
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Instructor
 * 
 */
export type Instructor = $Result.DefaultSelection<Prisma.$InstructorPayload>
/**
 * Model Proof
 * 
 */
export type Proof = $Result.DefaultSelection<Prisma.$ProofPayload>
/**
 * Model ProofLine
 * 
 */
export type ProofLine = $Result.DefaultSelection<Prisma.$ProofLinePayload>
/**
 * Model Problem
 * 
 */
export type Problem = $Result.DefaultSelection<Prisma.$ProblemPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model Assignment
 * 
 */
export type Assignment = $Result.DefaultSelection<Prisma.$AssignmentPayload>
/**
 * Model StudentProblemSolution
 * 
 */
export type StudentProblemSolution = $Result.DefaultSelection<Prisma.$StudentProblemSolutionPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model ResponseTracker
 * 
 */
export type ResponseTracker = $Result.DefaultSelection<Prisma.$ResponseTrackerPayload>
/**
 * Model AssignmentDelay
 * 
 */
export type AssignmentDelay = $Result.DefaultSelection<Prisma.$AssignmentDelayPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.instructor`: Exposes CRUD operations for the **Instructor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Instructors
    * const instructors = await prisma.instructor.findMany()
    * ```
    */
  get instructor(): Prisma.InstructorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.proof`: Exposes CRUD operations for the **Proof** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proofs
    * const proofs = await prisma.proof.findMany()
    * ```
    */
  get proof(): Prisma.ProofDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.proofLine`: Exposes CRUD operations for the **ProofLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProofLines
    * const proofLines = await prisma.proofLine.findMany()
    * ```
    */
  get proofLine(): Prisma.ProofLineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.problem`: Exposes CRUD operations for the **Problem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Problems
    * const problems = await prisma.problem.findMany()
    * ```
    */
  get problem(): Prisma.ProblemDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assignment`: Exposes CRUD operations for the **Assignment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Assignments
    * const assignments = await prisma.assignment.findMany()
    * ```
    */
  get assignment(): Prisma.AssignmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.studentProblemSolution`: Exposes CRUD operations for the **StudentProblemSolution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentProblemSolutions
    * const studentProblemSolutions = await prisma.studentProblemSolution.findMany()
    * ```
    */
  get studentProblemSolution(): Prisma.StudentProblemSolutionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.responseTracker`: Exposes CRUD operations for the **ResponseTracker** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ResponseTrackers
    * const responseTrackers = await prisma.responseTracker.findMany()
    * ```
    */
  get responseTracker(): Prisma.ResponseTrackerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.assignmentDelay`: Exposes CRUD operations for the **AssignmentDelay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AssignmentDelays
    * const assignmentDelays = await prisma.assignmentDelay.findMany()
    * ```
    */
  get assignmentDelay(): Prisma.AssignmentDelayDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Student: 'Student',
    Instructor: 'Instructor',
    Proof: 'Proof',
    ProofLine: 'ProofLine',
    Problem: 'Problem',
    Course: 'Course',
    Assignment: 'Assignment',
    StudentProblemSolution: 'StudentProblemSolution',
    Feedback: 'Feedback',
    ResponseTracker: 'ResponseTracker',
    AssignmentDelay: 'AssignmentDelay',
    Account: 'Account',
    Session: 'Session',
    VerificationToken: 'VerificationToken'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "student" | "instructor" | "proof" | "proofLine" | "problem" | "course" | "assignment" | "studentProblemSolution" | "feedback" | "responseTracker" | "assignmentDelay" | "account" | "session" | "verificationToken"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Instructor: {
        payload: Prisma.$InstructorPayload<ExtArgs>
        fields: Prisma.InstructorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InstructorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InstructorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          findFirst: {
            args: Prisma.InstructorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InstructorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          findMany: {
            args: Prisma.InstructorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>[]
          }
          create: {
            args: Prisma.InstructorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          createMany: {
            args: Prisma.InstructorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InstructorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>[]
          }
          delete: {
            args: Prisma.InstructorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          update: {
            args: Prisma.InstructorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          deleteMany: {
            args: Prisma.InstructorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InstructorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InstructorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>[]
          }
          upsert: {
            args: Prisma.InstructorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InstructorPayload>
          }
          aggregate: {
            args: Prisma.InstructorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInstructor>
          }
          groupBy: {
            args: Prisma.InstructorGroupByArgs<ExtArgs>
            result: $Utils.Optional<InstructorGroupByOutputType>[]
          }
          count: {
            args: Prisma.InstructorCountArgs<ExtArgs>
            result: $Utils.Optional<InstructorCountAggregateOutputType> | number
          }
        }
      }
      Proof: {
        payload: Prisma.$ProofPayload<ExtArgs>
        fields: Prisma.ProofFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProofFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProofFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>
          }
          findFirst: {
            args: Prisma.ProofFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProofFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>
          }
          findMany: {
            args: Prisma.ProofFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>[]
          }
          create: {
            args: Prisma.ProofCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>
          }
          createMany: {
            args: Prisma.ProofCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProofCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>[]
          }
          delete: {
            args: Prisma.ProofDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>
          }
          update: {
            args: Prisma.ProofUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>
          }
          deleteMany: {
            args: Prisma.ProofDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProofUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProofUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>[]
          }
          upsert: {
            args: Prisma.ProofUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofPayload>
          }
          aggregate: {
            args: Prisma.ProofAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProof>
          }
          groupBy: {
            args: Prisma.ProofGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProofGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProofCountArgs<ExtArgs>
            result: $Utils.Optional<ProofCountAggregateOutputType> | number
          }
        }
      }
      ProofLine: {
        payload: Prisma.$ProofLinePayload<ExtArgs>
        fields: Prisma.ProofLineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProofLineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProofLineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>
          }
          findFirst: {
            args: Prisma.ProofLineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProofLineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>
          }
          findMany: {
            args: Prisma.ProofLineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>[]
          }
          create: {
            args: Prisma.ProofLineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>
          }
          createMany: {
            args: Prisma.ProofLineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProofLineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>[]
          }
          delete: {
            args: Prisma.ProofLineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>
          }
          update: {
            args: Prisma.ProofLineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>
          }
          deleteMany: {
            args: Prisma.ProofLineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProofLineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProofLineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>[]
          }
          upsert: {
            args: Prisma.ProofLineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProofLinePayload>
          }
          aggregate: {
            args: Prisma.ProofLineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProofLine>
          }
          groupBy: {
            args: Prisma.ProofLineGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProofLineGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProofLineCountArgs<ExtArgs>
            result: $Utils.Optional<ProofLineCountAggregateOutputType> | number
          }
        }
      }
      Problem: {
        payload: Prisma.$ProblemPayload<ExtArgs>
        fields: Prisma.ProblemFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProblemFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProblemFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          findFirst: {
            args: Prisma.ProblemFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProblemFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          findMany: {
            args: Prisma.ProblemFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          create: {
            args: Prisma.ProblemCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          createMany: {
            args: Prisma.ProblemCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProblemCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          delete: {
            args: Prisma.ProblemDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          update: {
            args: Prisma.ProblemUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          deleteMany: {
            args: Prisma.ProblemDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProblemUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProblemUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>[]
          }
          upsert: {
            args: Prisma.ProblemUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProblemPayload>
          }
          aggregate: {
            args: Prisma.ProblemAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProblem>
          }
          groupBy: {
            args: Prisma.ProblemGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProblemGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProblemCountArgs<ExtArgs>
            result: $Utils.Optional<ProblemCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      Assignment: {
        payload: Prisma.$AssignmentPayload<ExtArgs>
        fields: Prisma.AssignmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findFirst: {
            args: Prisma.AssignmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          findMany: {
            args: Prisma.AssignmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          create: {
            args: Prisma.AssignmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          createMany: {
            args: Prisma.AssignmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssignmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          delete: {
            args: Prisma.AssignmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          update: {
            args: Prisma.AssignmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssignmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>[]
          }
          upsert: {
            args: Prisma.AssignmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentPayload>
          }
          aggregate: {
            args: Prisma.AssignmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignment>
          }
          groupBy: {
            args: Prisma.AssignmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentCountAggregateOutputType> | number
          }
        }
      }
      StudentProblemSolution: {
        payload: Prisma.$StudentProblemSolutionPayload<ExtArgs>
        fields: Prisma.StudentProblemSolutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentProblemSolutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentProblemSolutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>
          }
          findFirst: {
            args: Prisma.StudentProblemSolutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentProblemSolutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>
          }
          findMany: {
            args: Prisma.StudentProblemSolutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>[]
          }
          create: {
            args: Prisma.StudentProblemSolutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>
          }
          createMany: {
            args: Prisma.StudentProblemSolutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentProblemSolutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>[]
          }
          delete: {
            args: Prisma.StudentProblemSolutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>
          }
          update: {
            args: Prisma.StudentProblemSolutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>
          }
          deleteMany: {
            args: Prisma.StudentProblemSolutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StudentProblemSolutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StudentProblemSolutionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>[]
          }
          upsert: {
            args: Prisma.StudentProblemSolutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StudentProblemSolutionPayload>
          }
          aggregate: {
            args: Prisma.StudentProblemSolutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStudentProblemSolution>
          }
          groupBy: {
            args: Prisma.StudentProblemSolutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<StudentProblemSolutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentProblemSolutionCountArgs<ExtArgs>
            result: $Utils.Optional<StudentProblemSolutionCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FeedbackCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FeedbackUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      ResponseTracker: {
        payload: Prisma.$ResponseTrackerPayload<ExtArgs>
        fields: Prisma.ResponseTrackerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ResponseTrackerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ResponseTrackerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>
          }
          findFirst: {
            args: Prisma.ResponseTrackerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ResponseTrackerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>
          }
          findMany: {
            args: Prisma.ResponseTrackerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>[]
          }
          create: {
            args: Prisma.ResponseTrackerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>
          }
          createMany: {
            args: Prisma.ResponseTrackerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ResponseTrackerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>[]
          }
          delete: {
            args: Prisma.ResponseTrackerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>
          }
          update: {
            args: Prisma.ResponseTrackerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>
          }
          deleteMany: {
            args: Prisma.ResponseTrackerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ResponseTrackerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ResponseTrackerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>[]
          }
          upsert: {
            args: Prisma.ResponseTrackerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ResponseTrackerPayload>
          }
          aggregate: {
            args: Prisma.ResponseTrackerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateResponseTracker>
          }
          groupBy: {
            args: Prisma.ResponseTrackerGroupByArgs<ExtArgs>
            result: $Utils.Optional<ResponseTrackerGroupByOutputType>[]
          }
          count: {
            args: Prisma.ResponseTrackerCountArgs<ExtArgs>
            result: $Utils.Optional<ResponseTrackerCountAggregateOutputType> | number
          }
        }
      }
      AssignmentDelay: {
        payload: Prisma.$AssignmentDelayPayload<ExtArgs>
        fields: Prisma.AssignmentDelayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AssignmentDelayFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AssignmentDelayFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>
          }
          findFirst: {
            args: Prisma.AssignmentDelayFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AssignmentDelayFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>
          }
          findMany: {
            args: Prisma.AssignmentDelayFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>[]
          }
          create: {
            args: Prisma.AssignmentDelayCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>
          }
          createMany: {
            args: Prisma.AssignmentDelayCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AssignmentDelayCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>[]
          }
          delete: {
            args: Prisma.AssignmentDelayDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>
          }
          update: {
            args: Prisma.AssignmentDelayUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>
          }
          deleteMany: {
            args: Prisma.AssignmentDelayDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AssignmentDelayUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AssignmentDelayUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>[]
          }
          upsert: {
            args: Prisma.AssignmentDelayUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AssignmentDelayPayload>
          }
          aggregate: {
            args: Prisma.AssignmentDelayAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAssignmentDelay>
          }
          groupBy: {
            args: Prisma.AssignmentDelayGroupByArgs<ExtArgs>
            result: $Utils.Optional<AssignmentDelayGroupByOutputType>[]
          }
          count: {
            args: Prisma.AssignmentDelayCountArgs<ExtArgs>
            result: $Utils.Optional<AssignmentDelayCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VerificationTokenCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VerificationTokenUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    student?: StudentOmit
    instructor?: InstructorOmit
    proof?: ProofOmit
    proofLine?: ProofLineOmit
    problem?: ProblemOmit
    course?: CourseOmit
    assignment?: AssignmentOmit
    studentProblemSolution?: StudentProblemSolutionOmit
    feedback?: FeedbackOmit
    responseTracker?: ResponseTrackerOmit
    assignmentDelay?: AssignmentDelayOmit
    account?: AccountOmit
    session?: SessionOmit
    verificationToken?: VerificationTokenOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    proofs: number
    responses: number
    sessions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    proofs?: boolean | UserCountOutputTypeCountProofsArgs
    responses?: boolean | UserCountOutputTypeCountResponsesArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProofsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProofWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResponseTrackerWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }


  /**
   * Count Type StudentCountOutputType
   */

  export type StudentCountOutputType = {
    delays: number
    solutions: number
    courses: number
  }

  export type StudentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    delays?: boolean | StudentCountOutputTypeCountDelaysArgs
    solutions?: boolean | StudentCountOutputTypeCountSolutionsArgs
    courses?: boolean | StudentCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes
  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentCountOutputType
     */
    select?: StudentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountDelaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentDelayWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentProblemSolutionWhereInput
  }

  /**
   * StudentCountOutputType without action
   */
  export type StudentCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Count Type InstructorCountOutputType
   */

  export type InstructorCountOutputType = {
    assignments: number
    courses: number
  }

  export type InstructorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | InstructorCountOutputTypeCountAssignmentsArgs
    courses?: boolean | InstructorCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes
  /**
   * InstructorCountOutputType without action
   */
  export type InstructorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InstructorCountOutputType
     */
    select?: InstructorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InstructorCountOutputType without action
   */
  export type InstructorCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * InstructorCountOutputType without action
   */
  export type InstructorCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Count Type ProofCountOutputType
   */

  export type ProofCountOutputType = {
    lines: number
    responses: number
  }

  export type ProofCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | ProofCountOutputTypeCountLinesArgs
    responses?: boolean | ProofCountOutputTypeCountResponsesArgs
  }

  // Custom InputTypes
  /**
   * ProofCountOutputType without action
   */
  export type ProofCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofCountOutputType
     */
    select?: ProofCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProofCountOutputType without action
   */
  export type ProofCountOutputTypeCountLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProofLineWhereInput
  }

  /**
   * ProofCountOutputType without action
   */
  export type ProofCountOutputTypeCountResponsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResponseTrackerWhereInput
  }


  /**
   * Count Type ProblemCountOutputType
   */

  export type ProblemCountOutputType = {
    solutions: number
    assignments: number
  }

  export type ProblemCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    solutions?: boolean | ProblemCountOutputTypeCountSolutionsArgs
    assignments?: boolean | ProblemCountOutputTypeCountAssignmentsArgs
  }

  // Custom InputTypes
  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProblemCountOutputType
     */
    select?: ProblemCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentProblemSolutionWhereInput
  }

  /**
   * ProblemCountOutputType without action
   */
  export type ProblemCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    assignments: number
    students: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | CourseCountOutputTypeCountAssignmentsArgs
    students?: boolean | CourseCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type AssignmentCountOutputType
   */

  export type AssignmentCountOutputType = {
    delays: number
    solutions: number
    problems: number
  }

  export type AssignmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    delays?: boolean | AssignmentCountOutputTypeCountDelaysArgs
    solutions?: boolean | AssignmentCountOutputTypeCountSolutionsArgs
    problems?: boolean | AssignmentCountOutputTypeCountProblemsArgs
  }

  // Custom InputTypes
  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentCountOutputType
     */
    select?: AssignmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountDelaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentDelayWhereInput
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountSolutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentProblemSolutionWhereInput
  }

  /**
   * AssignmentCountOutputType without action
   */
  export type AssignmentCountOutputTypeCountProblemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    hashedPassword: string | null
    isStudent: boolean | null
    isInstructor: boolean | null
    isAdmin: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    username: string | null
    hashedPassword: string | null
    isStudent: boolean | null
    isInstructor: boolean | null
    isAdmin: boolean | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    username: number
    hashedPassword: number
    isStudent: number
    isInstructor: number
    isAdmin: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    username?: true
    hashedPassword?: true
    isStudent?: true
    isInstructor?: true
    isAdmin?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    username?: true
    hashedPassword?: true
    isStudent?: true
    isInstructor?: true
    isAdmin?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    username?: true
    hashedPassword?: true
    isStudent?: true
    isInstructor?: true
    isAdmin?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    username: string
    hashedPassword: string
    isStudent: boolean
    isInstructor: boolean
    isAdmin: boolean
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    hashedPassword?: boolean
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    instructor?: boolean | User$instructorArgs<ExtArgs>
    proofs?: boolean | User$proofsArgs<ExtArgs>
    responses?: boolean | User$responsesArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    hashedPassword?: boolean
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    username?: boolean
    hashedPassword?: boolean
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    username?: boolean
    hashedPassword?: boolean
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "username" | "hashedPassword" | "isStudent" | "isInstructor" | "isAdmin" | "isActive" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    instructor?: boolean | User$instructorArgs<ExtArgs>
    proofs?: boolean | User$proofsArgs<ExtArgs>
    responses?: boolean | User$responsesArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    student?: boolean | User$studentArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      instructor: Prisma.$InstructorPayload<ExtArgs> | null
      proofs: Prisma.$ProofPayload<ExtArgs>[]
      responses: Prisma.$ResponseTrackerPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      student: Prisma.$StudentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      username: string
      hashedPassword: string
      isStudent: boolean
      isInstructor: boolean
      isAdmin: boolean
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    instructor<T extends User$instructorArgs<ExtArgs> = {}>(args?: Subset<T, User$instructorArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    proofs<T extends User$proofsArgs<ExtArgs> = {}>(args?: Subset<T, User$proofsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    responses<T extends User$responsesArgs<ExtArgs> = {}>(args?: Subset<T, User$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    student<T extends User$studentArgs<ExtArgs> = {}>(args?: Subset<T, User$studentArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly hashedPassword: FieldRef<"User", 'String'>
    readonly isStudent: FieldRef<"User", 'Boolean'>
    readonly isInstructor: FieldRef<"User", 'Boolean'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
    readonly isActive: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.instructor
   */
  export type User$instructorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    where?: InstructorWhereInput
  }

  /**
   * User.proofs
   */
  export type User$proofsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    where?: ProofWhereInput
    orderBy?: ProofOrderByWithRelationInput | ProofOrderByWithRelationInput[]
    cursor?: ProofWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProofScalarFieldEnum | ProofScalarFieldEnum[]
  }

  /**
   * User.responses
   */
  export type User$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    where?: ResponseTrackerWhereInput
    orderBy?: ResponseTrackerOrderByWithRelationInput | ResponseTrackerOrderByWithRelationInput[]
    cursor?: ResponseTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResponseTrackerScalarFieldEnum | ResponseTrackerScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.student
   */
  export type User$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentMinAggregateOutputType = {
    userId: string | null
    imageUrl: string | null
    mobile: string | null
    bio: string | null
    dob: Date | null
  }

  export type StudentMaxAggregateOutputType = {
    userId: string | null
    imageUrl: string | null
    mobile: string | null
    bio: string | null
    dob: Date | null
  }

  export type StudentCountAggregateOutputType = {
    userId: number
    imageUrl: number
    mobile: number
    bio: number
    dob: number
    _all: number
  }


  export type StudentMinAggregateInputType = {
    userId?: true
    imageUrl?: true
    mobile?: true
    bio?: true
    dob?: true
  }

  export type StudentMaxAggregateInputType = {
    userId?: true
    imageUrl?: true
    mobile?: true
    bio?: true
    dob?: true
  }

  export type StudentCountAggregateInputType = {
    userId?: true
    imageUrl?: true
    mobile?: true
    bio?: true
    dob?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    userId: string
    imageUrl: string | null
    mobile: string | null
    bio: string | null
    dob: Date | null
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    imageUrl?: boolean
    mobile?: boolean
    bio?: boolean
    dob?: boolean
    delays?: boolean | Student$delaysArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    solutions?: boolean | Student$solutionsArgs<ExtArgs>
    courses?: boolean | Student$coursesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    imageUrl?: boolean
    mobile?: boolean
    bio?: boolean
    dob?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    imageUrl?: boolean
    mobile?: boolean
    bio?: boolean
    dob?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    userId?: boolean
    imageUrl?: boolean
    mobile?: boolean
    bio?: boolean
    dob?: boolean
  }

  export type StudentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "imageUrl" | "mobile" | "bio" | "dob", ExtArgs["result"]["student"]>
  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    delays?: boolean | Student$delaysArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    solutions?: boolean | Student$solutionsArgs<ExtArgs>
    courses?: boolean | Student$coursesArgs<ExtArgs>
    _count?: boolean | StudentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type StudentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      delays: Prisma.$AssignmentDelayPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      solutions: Prisma.$StudentProblemSolutionPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      imageUrl: string | null
      mobile: string | null
      bio: string | null
      dob: Date | null
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentFindUniqueArgs>(args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentFindFirstArgs>(args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const studentWithUserIdOnly = await prisma.student.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends StudentFindManyArgs>(args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
     */
    create<T extends StudentCreateArgs>(args: SelectSubset<T, StudentCreateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentCreateManyArgs>(args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `userId`
     * const studentWithUserIdOnly = await prisma.student.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
     */
    delete<T extends StudentDeleteArgs>(args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentUpdateArgs>(args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentDeleteManyArgs>(args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentUpdateManyArgs>(args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students and returns the data updated in the database.
     * @param {StudentUpdateManyAndReturnArgs} args - Arguments to update many Students.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Students and only return the `userId`
     * const studentWithUserIdOnly = await prisma.student.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
     */
    upsert<T extends StudentUpsertArgs>(args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    delays<T extends Student$delaysArgs<ExtArgs> = {}>(args?: Subset<T, Student$delaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    solutions<T extends Student$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, Student$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courses<T extends Student$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Student$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Student model
   */
  interface StudentFieldRefs {
    readonly userId: FieldRef<"Student", 'String'>
    readonly imageUrl: FieldRef<"Student", 'String'>
    readonly mobile: FieldRef<"Student", 'String'>
    readonly bio: FieldRef<"Student", 'String'>
    readonly dob: FieldRef<"Student", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
  }

  /**
   * Student updateManyAndReturn
   */
  export type StudentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
    /**
     * Limit how many Students to delete.
     */
    limit?: number
  }

  /**
   * Student.delays
   */
  export type Student$delaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    where?: AssignmentDelayWhereInput
    orderBy?: AssignmentDelayOrderByWithRelationInput | AssignmentDelayOrderByWithRelationInput[]
    cursor?: AssignmentDelayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentDelayScalarFieldEnum | AssignmentDelayScalarFieldEnum[]
  }

  /**
   * Student.solutions
   */
  export type Student$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    where?: StudentProblemSolutionWhereInput
    orderBy?: StudentProblemSolutionOrderByWithRelationInput | StudentProblemSolutionOrderByWithRelationInput[]
    cursor?: StudentProblemSolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentProblemSolutionScalarFieldEnum | StudentProblemSolutionScalarFieldEnum[]
  }

  /**
   * Student.courses
   */
  export type Student$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Instructor
   */

  export type AggregateInstructor = {
    _count: InstructorCountAggregateOutputType | null
    _min: InstructorMinAggregateOutputType | null
    _max: InstructorMaxAggregateOutputType | null
  }

  export type InstructorMinAggregateOutputType = {
    userId: string | null
    imageUrl: string | null
    mobile: string | null
    bio: string | null
    dob: Date | null
  }

  export type InstructorMaxAggregateOutputType = {
    userId: string | null
    imageUrl: string | null
    mobile: string | null
    bio: string | null
    dob: Date | null
  }

  export type InstructorCountAggregateOutputType = {
    userId: number
    imageUrl: number
    mobile: number
    bio: number
    dob: number
    _all: number
  }


  export type InstructorMinAggregateInputType = {
    userId?: true
    imageUrl?: true
    mobile?: true
    bio?: true
    dob?: true
  }

  export type InstructorMaxAggregateInputType = {
    userId?: true
    imageUrl?: true
    mobile?: true
    bio?: true
    dob?: true
  }

  export type InstructorCountAggregateInputType = {
    userId?: true
    imageUrl?: true
    mobile?: true
    bio?: true
    dob?: true
    _all?: true
  }

  export type InstructorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instructor to aggregate.
     */
    where?: InstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructors to fetch.
     */
    orderBy?: InstructorOrderByWithRelationInput | InstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Instructors
    **/
    _count?: true | InstructorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InstructorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InstructorMaxAggregateInputType
  }

  export type GetInstructorAggregateType<T extends InstructorAggregateArgs> = {
        [P in keyof T & keyof AggregateInstructor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInstructor[P]>
      : GetScalarType<T[P], AggregateInstructor[P]>
  }




  export type InstructorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InstructorWhereInput
    orderBy?: InstructorOrderByWithAggregationInput | InstructorOrderByWithAggregationInput[]
    by: InstructorScalarFieldEnum[] | InstructorScalarFieldEnum
    having?: InstructorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InstructorCountAggregateInputType | true
    _min?: InstructorMinAggregateInputType
    _max?: InstructorMaxAggregateInputType
  }

  export type InstructorGroupByOutputType = {
    userId: string
    imageUrl: string | null
    mobile: string | null
    bio: string | null
    dob: Date | null
    _count: InstructorCountAggregateOutputType | null
    _min: InstructorMinAggregateOutputType | null
    _max: InstructorMaxAggregateOutputType | null
  }

  type GetInstructorGroupByPayload<T extends InstructorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InstructorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InstructorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InstructorGroupByOutputType[P]>
            : GetScalarType<T[P], InstructorGroupByOutputType[P]>
        }
      >
    >


  export type InstructorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    imageUrl?: boolean
    mobile?: boolean
    bio?: boolean
    dob?: boolean
    assignments?: boolean | Instructor$assignmentsArgs<ExtArgs>
    courses?: boolean | Instructor$coursesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | InstructorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instructor"]>

  export type InstructorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    imageUrl?: boolean
    mobile?: boolean
    bio?: boolean
    dob?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instructor"]>

  export type InstructorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    imageUrl?: boolean
    mobile?: boolean
    bio?: boolean
    dob?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["instructor"]>

  export type InstructorSelectScalar = {
    userId?: boolean
    imageUrl?: boolean
    mobile?: boolean
    bio?: boolean
    dob?: boolean
  }

  export type InstructorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "imageUrl" | "mobile" | "bio" | "dob", ExtArgs["result"]["instructor"]>
  export type InstructorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | Instructor$assignmentsArgs<ExtArgs>
    courses?: boolean | Instructor$coursesArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | InstructorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type InstructorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type InstructorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $InstructorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Instructor"
    objects: {
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      imageUrl: string | null
      mobile: string | null
      bio: string | null
      dob: Date | null
    }, ExtArgs["result"]["instructor"]>
    composites: {}
  }

  type InstructorGetPayload<S extends boolean | null | undefined | InstructorDefaultArgs> = $Result.GetResult<Prisma.$InstructorPayload, S>

  type InstructorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InstructorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InstructorCountAggregateInputType | true
    }

  export interface InstructorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Instructor'], meta: { name: 'Instructor' } }
    /**
     * Find zero or one Instructor that matches the filter.
     * @param {InstructorFindUniqueArgs} args - Arguments to find a Instructor
     * @example
     * // Get one Instructor
     * const instructor = await prisma.instructor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InstructorFindUniqueArgs>(args: SelectSubset<T, InstructorFindUniqueArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Instructor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InstructorFindUniqueOrThrowArgs} args - Arguments to find a Instructor
     * @example
     * // Get one Instructor
     * const instructor = await prisma.instructor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InstructorFindUniqueOrThrowArgs>(args: SelectSubset<T, InstructorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Instructor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorFindFirstArgs} args - Arguments to find a Instructor
     * @example
     * // Get one Instructor
     * const instructor = await prisma.instructor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InstructorFindFirstArgs>(args?: SelectSubset<T, InstructorFindFirstArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Instructor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorFindFirstOrThrowArgs} args - Arguments to find a Instructor
     * @example
     * // Get one Instructor
     * const instructor = await prisma.instructor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InstructorFindFirstOrThrowArgs>(args?: SelectSubset<T, InstructorFindFirstOrThrowArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Instructors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Instructors
     * const instructors = await prisma.instructor.findMany()
     * 
     * // Get first 10 Instructors
     * const instructors = await prisma.instructor.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const instructorWithUserIdOnly = await prisma.instructor.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends InstructorFindManyArgs>(args?: SelectSubset<T, InstructorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Instructor.
     * @param {InstructorCreateArgs} args - Arguments to create a Instructor.
     * @example
     * // Create one Instructor
     * const Instructor = await prisma.instructor.create({
     *   data: {
     *     // ... data to create a Instructor
     *   }
     * })
     * 
     */
    create<T extends InstructorCreateArgs>(args: SelectSubset<T, InstructorCreateArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Instructors.
     * @param {InstructorCreateManyArgs} args - Arguments to create many Instructors.
     * @example
     * // Create many Instructors
     * const instructor = await prisma.instructor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InstructorCreateManyArgs>(args?: SelectSubset<T, InstructorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Instructors and returns the data saved in the database.
     * @param {InstructorCreateManyAndReturnArgs} args - Arguments to create many Instructors.
     * @example
     * // Create many Instructors
     * const instructor = await prisma.instructor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Instructors and only return the `userId`
     * const instructorWithUserIdOnly = await prisma.instructor.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InstructorCreateManyAndReturnArgs>(args?: SelectSubset<T, InstructorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Instructor.
     * @param {InstructorDeleteArgs} args - Arguments to delete one Instructor.
     * @example
     * // Delete one Instructor
     * const Instructor = await prisma.instructor.delete({
     *   where: {
     *     // ... filter to delete one Instructor
     *   }
     * })
     * 
     */
    delete<T extends InstructorDeleteArgs>(args: SelectSubset<T, InstructorDeleteArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Instructor.
     * @param {InstructorUpdateArgs} args - Arguments to update one Instructor.
     * @example
     * // Update one Instructor
     * const instructor = await prisma.instructor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InstructorUpdateArgs>(args: SelectSubset<T, InstructorUpdateArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Instructors.
     * @param {InstructorDeleteManyArgs} args - Arguments to filter Instructors to delete.
     * @example
     * // Delete a few Instructors
     * const { count } = await prisma.instructor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InstructorDeleteManyArgs>(args?: SelectSubset<T, InstructorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instructors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Instructors
     * const instructor = await prisma.instructor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InstructorUpdateManyArgs>(args: SelectSubset<T, InstructorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Instructors and returns the data updated in the database.
     * @param {InstructorUpdateManyAndReturnArgs} args - Arguments to update many Instructors.
     * @example
     * // Update many Instructors
     * const instructor = await prisma.instructor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Instructors and only return the `userId`
     * const instructorWithUserIdOnly = await prisma.instructor.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InstructorUpdateManyAndReturnArgs>(args: SelectSubset<T, InstructorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Instructor.
     * @param {InstructorUpsertArgs} args - Arguments to update or create a Instructor.
     * @example
     * // Update or create a Instructor
     * const instructor = await prisma.instructor.upsert({
     *   create: {
     *     // ... data to create a Instructor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Instructor we want to update
     *   }
     * })
     */
    upsert<T extends InstructorUpsertArgs>(args: SelectSubset<T, InstructorUpsertArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Instructors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorCountArgs} args - Arguments to filter Instructors to count.
     * @example
     * // Count the number of Instructors
     * const count = await prisma.instructor.count({
     *   where: {
     *     // ... the filter for the Instructors we want to count
     *   }
     * })
    **/
    count<T extends InstructorCountArgs>(
      args?: Subset<T, InstructorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InstructorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Instructor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InstructorAggregateArgs>(args: Subset<T, InstructorAggregateArgs>): Prisma.PrismaPromise<GetInstructorAggregateType<T>>

    /**
     * Group by Instructor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InstructorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InstructorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InstructorGroupByArgs['orderBy'] }
        : { orderBy?: InstructorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InstructorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInstructorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Instructor model
   */
  readonly fields: InstructorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Instructor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InstructorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends Instructor$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Instructor$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    courses<T extends Instructor$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Instructor$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Instructor model
   */
  interface InstructorFieldRefs {
    readonly userId: FieldRef<"Instructor", 'String'>
    readonly imageUrl: FieldRef<"Instructor", 'String'>
    readonly mobile: FieldRef<"Instructor", 'String'>
    readonly bio: FieldRef<"Instructor", 'String'>
    readonly dob: FieldRef<"Instructor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Instructor findUnique
   */
  export type InstructorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructor to fetch.
     */
    where: InstructorWhereUniqueInput
  }

  /**
   * Instructor findUniqueOrThrow
   */
  export type InstructorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructor to fetch.
     */
    where: InstructorWhereUniqueInput
  }

  /**
   * Instructor findFirst
   */
  export type InstructorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructor to fetch.
     */
    where?: InstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructors to fetch.
     */
    orderBy?: InstructorOrderByWithRelationInput | InstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instructors.
     */
    cursor?: InstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instructors.
     */
    distinct?: InstructorScalarFieldEnum | InstructorScalarFieldEnum[]
  }

  /**
   * Instructor findFirstOrThrow
   */
  export type InstructorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructor to fetch.
     */
    where?: InstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructors to fetch.
     */
    orderBy?: InstructorOrderByWithRelationInput | InstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Instructors.
     */
    cursor?: InstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Instructors.
     */
    distinct?: InstructorScalarFieldEnum | InstructorScalarFieldEnum[]
  }

  /**
   * Instructor findMany
   */
  export type InstructorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter, which Instructors to fetch.
     */
    where?: InstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Instructors to fetch.
     */
    orderBy?: InstructorOrderByWithRelationInput | InstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Instructors.
     */
    cursor?: InstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Instructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Instructors.
     */
    skip?: number
    distinct?: InstructorScalarFieldEnum | InstructorScalarFieldEnum[]
  }

  /**
   * Instructor create
   */
  export type InstructorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * The data needed to create a Instructor.
     */
    data: XOR<InstructorCreateInput, InstructorUncheckedCreateInput>
  }

  /**
   * Instructor createMany
   */
  export type InstructorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Instructors.
     */
    data: InstructorCreateManyInput | InstructorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Instructor createManyAndReturn
   */
  export type InstructorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * The data used to create many Instructors.
     */
    data: InstructorCreateManyInput | InstructorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Instructor update
   */
  export type InstructorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * The data needed to update a Instructor.
     */
    data: XOR<InstructorUpdateInput, InstructorUncheckedUpdateInput>
    /**
     * Choose, which Instructor to update.
     */
    where: InstructorWhereUniqueInput
  }

  /**
   * Instructor updateMany
   */
  export type InstructorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Instructors.
     */
    data: XOR<InstructorUpdateManyMutationInput, InstructorUncheckedUpdateManyInput>
    /**
     * Filter which Instructors to update
     */
    where?: InstructorWhereInput
    /**
     * Limit how many Instructors to update.
     */
    limit?: number
  }

  /**
   * Instructor updateManyAndReturn
   */
  export type InstructorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * The data used to update Instructors.
     */
    data: XOR<InstructorUpdateManyMutationInput, InstructorUncheckedUpdateManyInput>
    /**
     * Filter which Instructors to update
     */
    where?: InstructorWhereInput
    /**
     * Limit how many Instructors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Instructor upsert
   */
  export type InstructorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * The filter to search for the Instructor to update in case it exists.
     */
    where: InstructorWhereUniqueInput
    /**
     * In case the Instructor found by the `where` argument doesn't exist, create a new Instructor with this data.
     */
    create: XOR<InstructorCreateInput, InstructorUncheckedCreateInput>
    /**
     * In case the Instructor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InstructorUpdateInput, InstructorUncheckedUpdateInput>
  }

  /**
   * Instructor delete
   */
  export type InstructorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    /**
     * Filter which Instructor to delete.
     */
    where: InstructorWhereUniqueInput
  }

  /**
   * Instructor deleteMany
   */
  export type InstructorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Instructors to delete
     */
    where?: InstructorWhereInput
    /**
     * Limit how many Instructors to delete.
     */
    limit?: number
  }

  /**
   * Instructor.assignments
   */
  export type Instructor$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Instructor.courses
   */
  export type Instructor$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Instructor without action
   */
  export type InstructorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
  }


  /**
   * Model Proof
   */

  export type AggregateProof = {
    _count: ProofCountAggregateOutputType | null
    _min: ProofMinAggregateOutputType | null
    _max: ProofMaxAggregateOutputType | null
  }

  export type ProofMinAggregateOutputType = {
    id: string | null
    name: string | null
    rules: string | null
    premises: string | null
    conclusion: string | null
    createdById: string | null
    complete: boolean | null
    lemmasAllowed: boolean | null
    disproofString: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type ProofMaxAggregateOutputType = {
    id: string | null
    name: string | null
    rules: string | null
    premises: string | null
    conclusion: string | null
    createdById: string | null
    complete: boolean | null
    lemmasAllowed: boolean | null
    disproofString: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
  }

  export type ProofCountAggregateOutputType = {
    id: number
    name: number
    rules: number
    premises: number
    conclusion: number
    createdById: number
    complete: number
    lemmasAllowed: number
    disproofString: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    _all: number
  }


  export type ProofMinAggregateInputType = {
    id?: true
    name?: true
    rules?: true
    premises?: true
    conclusion?: true
    createdById?: true
    complete?: true
    lemmasAllowed?: true
    disproofString?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type ProofMaxAggregateInputType = {
    id?: true
    name?: true
    rules?: true
    premises?: true
    conclusion?: true
    createdById?: true
    complete?: true
    lemmasAllowed?: true
    disproofString?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
  }

  export type ProofCountAggregateInputType = {
    id?: true
    name?: true
    rules?: true
    premises?: true
    conclusion?: true
    createdById?: true
    complete?: true
    lemmasAllowed?: true
    disproofString?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    _all?: true
  }

  export type ProofAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proof to aggregate.
     */
    where?: ProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proofs to fetch.
     */
    orderBy?: ProofOrderByWithRelationInput | ProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proofs
    **/
    _count?: true | ProofCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProofMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProofMaxAggregateInputType
  }

  export type GetProofAggregateType<T extends ProofAggregateArgs> = {
        [P in keyof T & keyof AggregateProof]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProof[P]>
      : GetScalarType<T[P], AggregateProof[P]>
  }




  export type ProofGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProofWhereInput
    orderBy?: ProofOrderByWithAggregationInput | ProofOrderByWithAggregationInput[]
    by: ProofScalarFieldEnum[] | ProofScalarFieldEnum
    having?: ProofScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProofCountAggregateInputType | true
    _min?: ProofMinAggregateInputType
    _max?: ProofMaxAggregateInputType
  }

  export type ProofGroupByOutputType = {
    id: string
    name: string | null
    rules: string
    premises: string | null
    conclusion: string
    createdById: string
    complete: boolean
    lemmasAllowed: boolean
    disproofString: string | null
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    _count: ProofCountAggregateOutputType | null
    _min: ProofMinAggregateOutputType | null
    _max: ProofMaxAggregateOutputType | null
  }

  type GetProofGroupByPayload<T extends ProofGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProofGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProofGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProofGroupByOutputType[P]>
            : GetScalarType<T[P], ProofGroupByOutputType[P]>
        }
      >
    >


  export type ProofSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    rules?: boolean
    premises?: boolean
    conclusion?: boolean
    createdById?: boolean
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    problem?: boolean | Proof$problemArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lines?: boolean | Proof$linesArgs<ExtArgs>
    responses?: boolean | Proof$responsesArgs<ExtArgs>
    studentSolution?: boolean | Proof$studentSolutionArgs<ExtArgs>
    _count?: boolean | ProofCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proof"]>

  export type ProofSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    rules?: boolean
    premises?: boolean
    conclusion?: boolean
    createdById?: boolean
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proof"]>

  export type ProofSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    rules?: boolean
    premises?: boolean
    conclusion?: boolean
    createdById?: boolean
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proof"]>

  export type ProofSelectScalar = {
    id?: boolean
    name?: boolean
    rules?: boolean
    premises?: boolean
    conclusion?: boolean
    createdById?: boolean
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
  }

  export type ProofOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "rules" | "premises" | "conclusion" | "createdById" | "complete" | "lemmasAllowed" | "disproofString" | "createdAt" | "updatedAt" | "isDeleted", ExtArgs["result"]["proof"]>
  export type ProofInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    problem?: boolean | Proof$problemArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    lines?: boolean | Proof$linesArgs<ExtArgs>
    responses?: boolean | Proof$responsesArgs<ExtArgs>
    studentSolution?: boolean | Proof$studentSolutionArgs<ExtArgs>
    _count?: boolean | ProofCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProofIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProofIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProofPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Proof"
    objects: {
      problem: Prisma.$ProblemPayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs>
      lines: Prisma.$ProofLinePayload<ExtArgs>[]
      responses: Prisma.$ResponseTrackerPayload<ExtArgs>[]
      studentSolution: Prisma.$StudentProblemSolutionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      rules: string
      premises: string | null
      conclusion: string
      createdById: string
      complete: boolean
      lemmasAllowed: boolean
      disproofString: string | null
      createdAt: Date
      updatedAt: Date
      isDeleted: boolean
    }, ExtArgs["result"]["proof"]>
    composites: {}
  }

  type ProofGetPayload<S extends boolean | null | undefined | ProofDefaultArgs> = $Result.GetResult<Prisma.$ProofPayload, S>

  type ProofCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProofFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProofCountAggregateInputType | true
    }

  export interface ProofDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proof'], meta: { name: 'Proof' } }
    /**
     * Find zero or one Proof that matches the filter.
     * @param {ProofFindUniqueArgs} args - Arguments to find a Proof
     * @example
     * // Get one Proof
     * const proof = await prisma.proof.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProofFindUniqueArgs>(args: SelectSubset<T, ProofFindUniqueArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Proof that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProofFindUniqueOrThrowArgs} args - Arguments to find a Proof
     * @example
     * // Get one Proof
     * const proof = await prisma.proof.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProofFindUniqueOrThrowArgs>(args: SelectSubset<T, ProofFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Proof that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofFindFirstArgs} args - Arguments to find a Proof
     * @example
     * // Get one Proof
     * const proof = await prisma.proof.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProofFindFirstArgs>(args?: SelectSubset<T, ProofFindFirstArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Proof that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofFindFirstOrThrowArgs} args - Arguments to find a Proof
     * @example
     * // Get one Proof
     * const proof = await prisma.proof.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProofFindFirstOrThrowArgs>(args?: SelectSubset<T, ProofFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Proofs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proofs
     * const proofs = await prisma.proof.findMany()
     * 
     * // Get first 10 Proofs
     * const proofs = await prisma.proof.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proofWithIdOnly = await prisma.proof.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProofFindManyArgs>(args?: SelectSubset<T, ProofFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Proof.
     * @param {ProofCreateArgs} args - Arguments to create a Proof.
     * @example
     * // Create one Proof
     * const Proof = await prisma.proof.create({
     *   data: {
     *     // ... data to create a Proof
     *   }
     * })
     * 
     */
    create<T extends ProofCreateArgs>(args: SelectSubset<T, ProofCreateArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Proofs.
     * @param {ProofCreateManyArgs} args - Arguments to create many Proofs.
     * @example
     * // Create many Proofs
     * const proof = await prisma.proof.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProofCreateManyArgs>(args?: SelectSubset<T, ProofCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Proofs and returns the data saved in the database.
     * @param {ProofCreateManyAndReturnArgs} args - Arguments to create many Proofs.
     * @example
     * // Create many Proofs
     * const proof = await prisma.proof.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Proofs and only return the `id`
     * const proofWithIdOnly = await prisma.proof.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProofCreateManyAndReturnArgs>(args?: SelectSubset<T, ProofCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Proof.
     * @param {ProofDeleteArgs} args - Arguments to delete one Proof.
     * @example
     * // Delete one Proof
     * const Proof = await prisma.proof.delete({
     *   where: {
     *     // ... filter to delete one Proof
     *   }
     * })
     * 
     */
    delete<T extends ProofDeleteArgs>(args: SelectSubset<T, ProofDeleteArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Proof.
     * @param {ProofUpdateArgs} args - Arguments to update one Proof.
     * @example
     * // Update one Proof
     * const proof = await prisma.proof.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProofUpdateArgs>(args: SelectSubset<T, ProofUpdateArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Proofs.
     * @param {ProofDeleteManyArgs} args - Arguments to filter Proofs to delete.
     * @example
     * // Delete a few Proofs
     * const { count } = await prisma.proof.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProofDeleteManyArgs>(args?: SelectSubset<T, ProofDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proofs
     * const proof = await prisma.proof.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProofUpdateManyArgs>(args: SelectSubset<T, ProofUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proofs and returns the data updated in the database.
     * @param {ProofUpdateManyAndReturnArgs} args - Arguments to update many Proofs.
     * @example
     * // Update many Proofs
     * const proof = await prisma.proof.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Proofs and only return the `id`
     * const proofWithIdOnly = await prisma.proof.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProofUpdateManyAndReturnArgs>(args: SelectSubset<T, ProofUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Proof.
     * @param {ProofUpsertArgs} args - Arguments to update or create a Proof.
     * @example
     * // Update or create a Proof
     * const proof = await prisma.proof.upsert({
     *   create: {
     *     // ... data to create a Proof
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proof we want to update
     *   }
     * })
     */
    upsert<T extends ProofUpsertArgs>(args: SelectSubset<T, ProofUpsertArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Proofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofCountArgs} args - Arguments to filter Proofs to count.
     * @example
     * // Count the number of Proofs
     * const count = await prisma.proof.count({
     *   where: {
     *     // ... the filter for the Proofs we want to count
     *   }
     * })
    **/
    count<T extends ProofCountArgs>(
      args?: Subset<T, ProofCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProofCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProofAggregateArgs>(args: Subset<T, ProofAggregateArgs>): Prisma.PrismaPromise<GetProofAggregateType<T>>

    /**
     * Group by Proof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProofGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProofGroupByArgs['orderBy'] }
        : { orderBy?: ProofGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProofGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProofGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Proof model
   */
  readonly fields: ProofFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Proof.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProofClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    problem<T extends Proof$problemArgs<ExtArgs> = {}>(args?: Subset<T, Proof$problemArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lines<T extends Proof$linesArgs<ExtArgs> = {}>(args?: Subset<T, Proof$linesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    responses<T extends Proof$responsesArgs<ExtArgs> = {}>(args?: Subset<T, Proof$responsesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    studentSolution<T extends Proof$studentSolutionArgs<ExtArgs> = {}>(args?: Subset<T, Proof$studentSolutionArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Proof model
   */
  interface ProofFieldRefs {
    readonly id: FieldRef<"Proof", 'String'>
    readonly name: FieldRef<"Proof", 'String'>
    readonly rules: FieldRef<"Proof", 'String'>
    readonly premises: FieldRef<"Proof", 'String'>
    readonly conclusion: FieldRef<"Proof", 'String'>
    readonly createdById: FieldRef<"Proof", 'String'>
    readonly complete: FieldRef<"Proof", 'Boolean'>
    readonly lemmasAllowed: FieldRef<"Proof", 'Boolean'>
    readonly disproofString: FieldRef<"Proof", 'String'>
    readonly createdAt: FieldRef<"Proof", 'DateTime'>
    readonly updatedAt: FieldRef<"Proof", 'DateTime'>
    readonly isDeleted: FieldRef<"Proof", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Proof findUnique
   */
  export type ProofFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proof to fetch.
     */
    where: ProofWhereUniqueInput
  }

  /**
   * Proof findUniqueOrThrow
   */
  export type ProofFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proof to fetch.
     */
    where: ProofWhereUniqueInput
  }

  /**
   * Proof findFirst
   */
  export type ProofFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proof to fetch.
     */
    where?: ProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proofs to fetch.
     */
    orderBy?: ProofOrderByWithRelationInput | ProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proofs.
     */
    cursor?: ProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proofs.
     */
    distinct?: ProofScalarFieldEnum | ProofScalarFieldEnum[]
  }

  /**
   * Proof findFirstOrThrow
   */
  export type ProofFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proof to fetch.
     */
    where?: ProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proofs to fetch.
     */
    orderBy?: ProofOrderByWithRelationInput | ProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proofs.
     */
    cursor?: ProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proofs.
     */
    distinct?: ProofScalarFieldEnum | ProofScalarFieldEnum[]
  }

  /**
   * Proof findMany
   */
  export type ProofFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proofs to fetch.
     */
    where?: ProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proofs to fetch.
     */
    orderBy?: ProofOrderByWithRelationInput | ProofOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proofs.
     */
    cursor?: ProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proofs.
     */
    skip?: number
    distinct?: ProofScalarFieldEnum | ProofScalarFieldEnum[]
  }

  /**
   * Proof create
   */
  export type ProofCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * The data needed to create a Proof.
     */
    data: XOR<ProofCreateInput, ProofUncheckedCreateInput>
  }

  /**
   * Proof createMany
   */
  export type ProofCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proofs.
     */
    data: ProofCreateManyInput | ProofCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Proof createManyAndReturn
   */
  export type ProofCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * The data used to create many Proofs.
     */
    data: ProofCreateManyInput | ProofCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Proof update
   */
  export type ProofUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * The data needed to update a Proof.
     */
    data: XOR<ProofUpdateInput, ProofUncheckedUpdateInput>
    /**
     * Choose, which Proof to update.
     */
    where: ProofWhereUniqueInput
  }

  /**
   * Proof updateMany
   */
  export type ProofUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proofs.
     */
    data: XOR<ProofUpdateManyMutationInput, ProofUncheckedUpdateManyInput>
    /**
     * Filter which Proofs to update
     */
    where?: ProofWhereInput
    /**
     * Limit how many Proofs to update.
     */
    limit?: number
  }

  /**
   * Proof updateManyAndReturn
   */
  export type ProofUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * The data used to update Proofs.
     */
    data: XOR<ProofUpdateManyMutationInput, ProofUncheckedUpdateManyInput>
    /**
     * Filter which Proofs to update
     */
    where?: ProofWhereInput
    /**
     * Limit how many Proofs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Proof upsert
   */
  export type ProofUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * The filter to search for the Proof to update in case it exists.
     */
    where: ProofWhereUniqueInput
    /**
     * In case the Proof found by the `where` argument doesn't exist, create a new Proof with this data.
     */
    create: XOR<ProofCreateInput, ProofUncheckedCreateInput>
    /**
     * In case the Proof was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProofUpdateInput, ProofUncheckedUpdateInput>
  }

  /**
   * Proof delete
   */
  export type ProofDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter which Proof to delete.
     */
    where: ProofWhereUniqueInput
  }

  /**
   * Proof deleteMany
   */
  export type ProofDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proofs to delete
     */
    where?: ProofWhereInput
    /**
     * Limit how many Proofs to delete.
     */
    limit?: number
  }

  /**
   * Proof.problem
   */
  export type Proof$problemArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    where?: ProblemWhereInput
  }

  /**
   * Proof.lines
   */
  export type Proof$linesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    where?: ProofLineWhereInput
    orderBy?: ProofLineOrderByWithRelationInput | ProofLineOrderByWithRelationInput[]
    cursor?: ProofLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProofLineScalarFieldEnum | ProofLineScalarFieldEnum[]
  }

  /**
   * Proof.responses
   */
  export type Proof$responsesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    where?: ResponseTrackerWhereInput
    orderBy?: ResponseTrackerOrderByWithRelationInput | ResponseTrackerOrderByWithRelationInput[]
    cursor?: ResponseTrackerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ResponseTrackerScalarFieldEnum | ResponseTrackerScalarFieldEnum[]
  }

  /**
   * Proof.studentSolution
   */
  export type Proof$studentSolutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    where?: StudentProblemSolutionWhereInput
  }

  /**
   * Proof without action
   */
  export type ProofDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Proof
     */
    omit?: ProofOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofInclude<ExtArgs> | null
  }


  /**
   * Model ProofLine
   */

  export type AggregateProofLine = {
    _count: ProofLineCountAggregateOutputType | null
    _avg: ProofLineAvgAggregateOutputType | null
    _sum: ProofLineSumAggregateOutputType | null
    _min: ProofLineMinAggregateOutputType | null
    _max: ProofLineMaxAggregateOutputType | null
  }

  export type ProofLineAvgAggregateOutputType = {
    order: number | null
    depth: number | null
  }

  export type ProofLineSumAggregateOutputType = {
    order: number | null
    depth: number | null
  }

  export type ProofLineMinAggregateOutputType = {
    id: string | null
    proofId: string | null
    lineNo: string | null
    formula: string | null
    rule: string | null
    order: number | null
    comment: string | null
    response: string | null
    depth: number | null
  }

  export type ProofLineMaxAggregateOutputType = {
    id: string | null
    proofId: string | null
    lineNo: string | null
    formula: string | null
    rule: string | null
    order: number | null
    comment: string | null
    response: string | null
    depth: number | null
  }

  export type ProofLineCountAggregateOutputType = {
    id: number
    proofId: number
    lineNo: number
    formula: number
    rule: number
    order: number
    comment: number
    response: number
    depth: number
    refs: number
    _all: number
  }


  export type ProofLineAvgAggregateInputType = {
    order?: true
    depth?: true
  }

  export type ProofLineSumAggregateInputType = {
    order?: true
    depth?: true
  }

  export type ProofLineMinAggregateInputType = {
    id?: true
    proofId?: true
    lineNo?: true
    formula?: true
    rule?: true
    order?: true
    comment?: true
    response?: true
    depth?: true
  }

  export type ProofLineMaxAggregateInputType = {
    id?: true
    proofId?: true
    lineNo?: true
    formula?: true
    rule?: true
    order?: true
    comment?: true
    response?: true
    depth?: true
  }

  export type ProofLineCountAggregateInputType = {
    id?: true
    proofId?: true
    lineNo?: true
    formula?: true
    rule?: true
    order?: true
    comment?: true
    response?: true
    depth?: true
    refs?: true
    _all?: true
  }

  export type ProofLineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProofLine to aggregate.
     */
    where?: ProofLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProofLines to fetch.
     */
    orderBy?: ProofLineOrderByWithRelationInput | ProofLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProofLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProofLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProofLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProofLines
    **/
    _count?: true | ProofLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProofLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProofLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProofLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProofLineMaxAggregateInputType
  }

  export type GetProofLineAggregateType<T extends ProofLineAggregateArgs> = {
        [P in keyof T & keyof AggregateProofLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProofLine[P]>
      : GetScalarType<T[P], AggregateProofLine[P]>
  }




  export type ProofLineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProofLineWhereInput
    orderBy?: ProofLineOrderByWithAggregationInput | ProofLineOrderByWithAggregationInput[]
    by: ProofLineScalarFieldEnum[] | ProofLineScalarFieldEnum
    having?: ProofLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProofLineCountAggregateInputType | true
    _avg?: ProofLineAvgAggregateInputType
    _sum?: ProofLineSumAggregateInputType
    _min?: ProofLineMinAggregateInputType
    _max?: ProofLineMaxAggregateInputType
  }

  export type ProofLineGroupByOutputType = {
    id: string
    proofId: string
    lineNo: string
    formula: string | null
    rule: string | null
    order: number | null
    comment: string | null
    response: string | null
    depth: number
    refs: string[]
    _count: ProofLineCountAggregateOutputType | null
    _avg: ProofLineAvgAggregateOutputType | null
    _sum: ProofLineSumAggregateOutputType | null
    _min: ProofLineMinAggregateOutputType | null
    _max: ProofLineMaxAggregateOutputType | null
  }

  type GetProofLineGroupByPayload<T extends ProofLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProofLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProofLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProofLineGroupByOutputType[P]>
            : GetScalarType<T[P], ProofLineGroupByOutputType[P]>
        }
      >
    >


  export type ProofLineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proofId?: boolean
    lineNo?: boolean
    formula?: boolean
    rule?: boolean
    order?: boolean
    comment?: boolean
    response?: boolean
    depth?: boolean
    refs?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proofLine"]>

  export type ProofLineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proofId?: boolean
    lineNo?: boolean
    formula?: boolean
    rule?: boolean
    order?: boolean
    comment?: boolean
    response?: boolean
    depth?: boolean
    refs?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proofLine"]>

  export type ProofLineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proofId?: boolean
    lineNo?: boolean
    formula?: boolean
    rule?: boolean
    order?: boolean
    comment?: boolean
    response?: boolean
    depth?: boolean
    refs?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["proofLine"]>

  export type ProofLineSelectScalar = {
    id?: boolean
    proofId?: boolean
    lineNo?: boolean
    formula?: boolean
    rule?: boolean
    order?: boolean
    comment?: boolean
    response?: boolean
    depth?: boolean
    refs?: boolean
  }

  export type ProofLineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "proofId" | "lineNo" | "formula" | "rule" | "order" | "comment" | "response" | "depth" | "refs", ExtArgs["result"]["proofLine"]>
  export type ProofLineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }
  export type ProofLineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }
  export type ProofLineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }

  export type $ProofLinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProofLine"
    objects: {
      proof: Prisma.$ProofPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      proofId: string
      lineNo: string
      formula: string | null
      rule: string | null
      order: number | null
      comment: string | null
      response: string | null
      depth: number
      refs: string[]
    }, ExtArgs["result"]["proofLine"]>
    composites: {}
  }

  type ProofLineGetPayload<S extends boolean | null | undefined | ProofLineDefaultArgs> = $Result.GetResult<Prisma.$ProofLinePayload, S>

  type ProofLineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProofLineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProofLineCountAggregateInputType | true
    }

  export interface ProofLineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProofLine'], meta: { name: 'ProofLine' } }
    /**
     * Find zero or one ProofLine that matches the filter.
     * @param {ProofLineFindUniqueArgs} args - Arguments to find a ProofLine
     * @example
     * // Get one ProofLine
     * const proofLine = await prisma.proofLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProofLineFindUniqueArgs>(args: SelectSubset<T, ProofLineFindUniqueArgs<ExtArgs>>): Prisma__ProofLineClient<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ProofLine that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProofLineFindUniqueOrThrowArgs} args - Arguments to find a ProofLine
     * @example
     * // Get one ProofLine
     * const proofLine = await prisma.proofLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProofLineFindUniqueOrThrowArgs>(args: SelectSubset<T, ProofLineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProofLineClient<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProofLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofLineFindFirstArgs} args - Arguments to find a ProofLine
     * @example
     * // Get one ProofLine
     * const proofLine = await prisma.proofLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProofLineFindFirstArgs>(args?: SelectSubset<T, ProofLineFindFirstArgs<ExtArgs>>): Prisma__ProofLineClient<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ProofLine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofLineFindFirstOrThrowArgs} args - Arguments to find a ProofLine
     * @example
     * // Get one ProofLine
     * const proofLine = await prisma.proofLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProofLineFindFirstOrThrowArgs>(args?: SelectSubset<T, ProofLineFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProofLineClient<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ProofLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofLineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProofLines
     * const proofLines = await prisma.proofLine.findMany()
     * 
     * // Get first 10 ProofLines
     * const proofLines = await prisma.proofLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proofLineWithIdOnly = await prisma.proofLine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProofLineFindManyArgs>(args?: SelectSubset<T, ProofLineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ProofLine.
     * @param {ProofLineCreateArgs} args - Arguments to create a ProofLine.
     * @example
     * // Create one ProofLine
     * const ProofLine = await prisma.proofLine.create({
     *   data: {
     *     // ... data to create a ProofLine
     *   }
     * })
     * 
     */
    create<T extends ProofLineCreateArgs>(args: SelectSubset<T, ProofLineCreateArgs<ExtArgs>>): Prisma__ProofLineClient<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ProofLines.
     * @param {ProofLineCreateManyArgs} args - Arguments to create many ProofLines.
     * @example
     * // Create many ProofLines
     * const proofLine = await prisma.proofLine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProofLineCreateManyArgs>(args?: SelectSubset<T, ProofLineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProofLines and returns the data saved in the database.
     * @param {ProofLineCreateManyAndReturnArgs} args - Arguments to create many ProofLines.
     * @example
     * // Create many ProofLines
     * const proofLine = await prisma.proofLine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProofLines and only return the `id`
     * const proofLineWithIdOnly = await prisma.proofLine.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProofLineCreateManyAndReturnArgs>(args?: SelectSubset<T, ProofLineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ProofLine.
     * @param {ProofLineDeleteArgs} args - Arguments to delete one ProofLine.
     * @example
     * // Delete one ProofLine
     * const ProofLine = await prisma.proofLine.delete({
     *   where: {
     *     // ... filter to delete one ProofLine
     *   }
     * })
     * 
     */
    delete<T extends ProofLineDeleteArgs>(args: SelectSubset<T, ProofLineDeleteArgs<ExtArgs>>): Prisma__ProofLineClient<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ProofLine.
     * @param {ProofLineUpdateArgs} args - Arguments to update one ProofLine.
     * @example
     * // Update one ProofLine
     * const proofLine = await prisma.proofLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProofLineUpdateArgs>(args: SelectSubset<T, ProofLineUpdateArgs<ExtArgs>>): Prisma__ProofLineClient<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ProofLines.
     * @param {ProofLineDeleteManyArgs} args - Arguments to filter ProofLines to delete.
     * @example
     * // Delete a few ProofLines
     * const { count } = await prisma.proofLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProofLineDeleteManyArgs>(args?: SelectSubset<T, ProofLineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProofLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProofLines
     * const proofLine = await prisma.proofLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProofLineUpdateManyArgs>(args: SelectSubset<T, ProofLineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProofLines and returns the data updated in the database.
     * @param {ProofLineUpdateManyAndReturnArgs} args - Arguments to update many ProofLines.
     * @example
     * // Update many ProofLines
     * const proofLine = await prisma.proofLine.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ProofLines and only return the `id`
     * const proofLineWithIdOnly = await prisma.proofLine.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProofLineUpdateManyAndReturnArgs>(args: SelectSubset<T, ProofLineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ProofLine.
     * @param {ProofLineUpsertArgs} args - Arguments to update or create a ProofLine.
     * @example
     * // Update or create a ProofLine
     * const proofLine = await prisma.proofLine.upsert({
     *   create: {
     *     // ... data to create a ProofLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProofLine we want to update
     *   }
     * })
     */
    upsert<T extends ProofLineUpsertArgs>(args: SelectSubset<T, ProofLineUpsertArgs<ExtArgs>>): Prisma__ProofLineClient<$Result.GetResult<Prisma.$ProofLinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ProofLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofLineCountArgs} args - Arguments to filter ProofLines to count.
     * @example
     * // Count the number of ProofLines
     * const count = await prisma.proofLine.count({
     *   where: {
     *     // ... the filter for the ProofLines we want to count
     *   }
     * })
    **/
    count<T extends ProofLineCountArgs>(
      args?: Subset<T, ProofLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProofLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProofLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProofLineAggregateArgs>(args: Subset<T, ProofLineAggregateArgs>): Prisma.PrismaPromise<GetProofLineAggregateType<T>>

    /**
     * Group by ProofLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProofLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProofLineGroupByArgs['orderBy'] }
        : { orderBy?: ProofLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProofLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProofLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProofLine model
   */
  readonly fields: ProofLineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProofLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProofLineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proof<T extends ProofDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProofDefaultArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProofLine model
   */
  interface ProofLineFieldRefs {
    readonly id: FieldRef<"ProofLine", 'String'>
    readonly proofId: FieldRef<"ProofLine", 'String'>
    readonly lineNo: FieldRef<"ProofLine", 'String'>
    readonly formula: FieldRef<"ProofLine", 'String'>
    readonly rule: FieldRef<"ProofLine", 'String'>
    readonly order: FieldRef<"ProofLine", 'Int'>
    readonly comment: FieldRef<"ProofLine", 'String'>
    readonly response: FieldRef<"ProofLine", 'String'>
    readonly depth: FieldRef<"ProofLine", 'Int'>
    readonly refs: FieldRef<"ProofLine", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * ProofLine findUnique
   */
  export type ProofLineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * Filter, which ProofLine to fetch.
     */
    where: ProofLineWhereUniqueInput
  }

  /**
   * ProofLine findUniqueOrThrow
   */
  export type ProofLineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * Filter, which ProofLine to fetch.
     */
    where: ProofLineWhereUniqueInput
  }

  /**
   * ProofLine findFirst
   */
  export type ProofLineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * Filter, which ProofLine to fetch.
     */
    where?: ProofLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProofLines to fetch.
     */
    orderBy?: ProofLineOrderByWithRelationInput | ProofLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProofLines.
     */
    cursor?: ProofLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProofLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProofLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProofLines.
     */
    distinct?: ProofLineScalarFieldEnum | ProofLineScalarFieldEnum[]
  }

  /**
   * ProofLine findFirstOrThrow
   */
  export type ProofLineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * Filter, which ProofLine to fetch.
     */
    where?: ProofLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProofLines to fetch.
     */
    orderBy?: ProofLineOrderByWithRelationInput | ProofLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProofLines.
     */
    cursor?: ProofLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProofLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProofLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProofLines.
     */
    distinct?: ProofLineScalarFieldEnum | ProofLineScalarFieldEnum[]
  }

  /**
   * ProofLine findMany
   */
  export type ProofLineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * Filter, which ProofLines to fetch.
     */
    where?: ProofLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProofLines to fetch.
     */
    orderBy?: ProofLineOrderByWithRelationInput | ProofLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProofLines.
     */
    cursor?: ProofLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProofLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProofLines.
     */
    skip?: number
    distinct?: ProofLineScalarFieldEnum | ProofLineScalarFieldEnum[]
  }

  /**
   * ProofLine create
   */
  export type ProofLineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * The data needed to create a ProofLine.
     */
    data: XOR<ProofLineCreateInput, ProofLineUncheckedCreateInput>
  }

  /**
   * ProofLine createMany
   */
  export type ProofLineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProofLines.
     */
    data: ProofLineCreateManyInput | ProofLineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProofLine createManyAndReturn
   */
  export type ProofLineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * The data used to create many ProofLines.
     */
    data: ProofLineCreateManyInput | ProofLineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProofLine update
   */
  export type ProofLineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * The data needed to update a ProofLine.
     */
    data: XOR<ProofLineUpdateInput, ProofLineUncheckedUpdateInput>
    /**
     * Choose, which ProofLine to update.
     */
    where: ProofLineWhereUniqueInput
  }

  /**
   * ProofLine updateMany
   */
  export type ProofLineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProofLines.
     */
    data: XOR<ProofLineUpdateManyMutationInput, ProofLineUncheckedUpdateManyInput>
    /**
     * Filter which ProofLines to update
     */
    where?: ProofLineWhereInput
    /**
     * Limit how many ProofLines to update.
     */
    limit?: number
  }

  /**
   * ProofLine updateManyAndReturn
   */
  export type ProofLineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * The data used to update ProofLines.
     */
    data: XOR<ProofLineUpdateManyMutationInput, ProofLineUncheckedUpdateManyInput>
    /**
     * Filter which ProofLines to update
     */
    where?: ProofLineWhereInput
    /**
     * Limit how many ProofLines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProofLine upsert
   */
  export type ProofLineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * The filter to search for the ProofLine to update in case it exists.
     */
    where: ProofLineWhereUniqueInput
    /**
     * In case the ProofLine found by the `where` argument doesn't exist, create a new ProofLine with this data.
     */
    create: XOR<ProofLineCreateInput, ProofLineUncheckedCreateInput>
    /**
     * In case the ProofLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProofLineUpdateInput, ProofLineUncheckedUpdateInput>
  }

  /**
   * ProofLine delete
   */
  export type ProofLineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
    /**
     * Filter which ProofLine to delete.
     */
    where: ProofLineWhereUniqueInput
  }

  /**
   * ProofLine deleteMany
   */
  export type ProofLineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProofLines to delete
     */
    where?: ProofLineWhereInput
    /**
     * Limit how many ProofLines to delete.
     */
    limit?: number
  }

  /**
   * ProofLine without action
   */
  export type ProofLineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofLine
     */
    select?: ProofLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ProofLine
     */
    omit?: ProofLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProofLineInclude<ExtArgs> | null
  }


  /**
   * Model Problem
   */

  export type AggregateProblem = {
    _count: ProblemCountAggregateOutputType | null
    _avg: ProblemAvgAggregateOutputType | null
    _sum: ProblemSumAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  export type ProblemAvgAggregateOutputType = {
    point: Decimal | null
    targetSteps: number | null
    lostPoints: number | null
  }

  export type ProblemSumAggregateOutputType = {
    point: Decimal | null
    targetSteps: number | null
    lostPoints: number | null
  }

  export type ProblemMinAggregateOutputType = {
    id: string | null
    question: string | null
    point: Decimal | null
    targetSteps: number | null
    lostPoints: number | null
    proofId: string | null
    lemmasAllowed: boolean | null
    showTargetSteps: boolean | null
  }

  export type ProblemMaxAggregateOutputType = {
    id: string | null
    question: string | null
    point: Decimal | null
    targetSteps: number | null
    lostPoints: number | null
    proofId: string | null
    lemmasAllowed: boolean | null
    showTargetSteps: boolean | null
  }

  export type ProblemCountAggregateOutputType = {
    id: number
    question: number
    point: number
    targetSteps: number
    lostPoints: number
    proofId: number
    lemmasAllowed: number
    showTargetSteps: number
    _all: number
  }


  export type ProblemAvgAggregateInputType = {
    point?: true
    targetSteps?: true
    lostPoints?: true
  }

  export type ProblemSumAggregateInputType = {
    point?: true
    targetSteps?: true
    lostPoints?: true
  }

  export type ProblemMinAggregateInputType = {
    id?: true
    question?: true
    point?: true
    targetSteps?: true
    lostPoints?: true
    proofId?: true
    lemmasAllowed?: true
    showTargetSteps?: true
  }

  export type ProblemMaxAggregateInputType = {
    id?: true
    question?: true
    point?: true
    targetSteps?: true
    lostPoints?: true
    proofId?: true
    lemmasAllowed?: true
    showTargetSteps?: true
  }

  export type ProblemCountAggregateInputType = {
    id?: true
    question?: true
    point?: true
    targetSteps?: true
    lostPoints?: true
    proofId?: true
    lemmasAllowed?: true
    showTargetSteps?: true
    _all?: true
  }

  export type ProblemAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problem to aggregate.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Problems
    **/
    _count?: true | ProblemCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProblemAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProblemSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProblemMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProblemMaxAggregateInputType
  }

  export type GetProblemAggregateType<T extends ProblemAggregateArgs> = {
        [P in keyof T & keyof AggregateProblem]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProblem[P]>
      : GetScalarType<T[P], AggregateProblem[P]>
  }




  export type ProblemGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProblemWhereInput
    orderBy?: ProblemOrderByWithAggregationInput | ProblemOrderByWithAggregationInput[]
    by: ProblemScalarFieldEnum[] | ProblemScalarFieldEnum
    having?: ProblemScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProblemCountAggregateInputType | true
    _avg?: ProblemAvgAggregateInputType
    _sum?: ProblemSumAggregateInputType
    _min?: ProblemMinAggregateInputType
    _max?: ProblemMaxAggregateInputType
  }

  export type ProblemGroupByOutputType = {
    id: string
    question: string
    point: Decimal
    targetSteps: number
    lostPoints: number
    proofId: string
    lemmasAllowed: boolean
    showTargetSteps: boolean
    _count: ProblemCountAggregateOutputType | null
    _avg: ProblemAvgAggregateOutputType | null
    _sum: ProblemSumAggregateOutputType | null
    _min: ProblemMinAggregateOutputType | null
    _max: ProblemMaxAggregateOutputType | null
  }

  type GetProblemGroupByPayload<T extends ProblemGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProblemGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProblemGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProblemGroupByOutputType[P]>
            : GetScalarType<T[P], ProblemGroupByOutputType[P]>
        }
      >
    >


  export type ProblemSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    point?: boolean
    targetSteps?: boolean
    lostPoints?: boolean
    proofId?: boolean
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    solutions?: boolean | Problem$solutionsArgs<ExtArgs>
    assignments?: boolean | Problem$assignmentsArgs<ExtArgs>
    _count?: boolean | ProblemCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problem"]>

  export type ProblemSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    point?: boolean
    targetSteps?: boolean
    lostPoints?: boolean
    proofId?: boolean
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problem"]>

  export type ProblemSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    point?: boolean
    targetSteps?: boolean
    lostPoints?: boolean
    proofId?: boolean
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["problem"]>

  export type ProblemSelectScalar = {
    id?: boolean
    question?: boolean
    point?: boolean
    targetSteps?: boolean
    lostPoints?: boolean
    proofId?: boolean
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
  }

  export type ProblemOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "question" | "point" | "targetSteps" | "lostPoints" | "proofId" | "lemmasAllowed" | "showTargetSteps", ExtArgs["result"]["problem"]>
  export type ProblemInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    solutions?: boolean | Problem$solutionsArgs<ExtArgs>
    assignments?: boolean | Problem$assignmentsArgs<ExtArgs>
    _count?: boolean | ProblemCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProblemIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }
  export type ProblemIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
  }

  export type $ProblemPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Problem"
    objects: {
      proof: Prisma.$ProofPayload<ExtArgs>
      solutions: Prisma.$StudentProblemSolutionPayload<ExtArgs>[]
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      question: string
      point: Prisma.Decimal
      targetSteps: number
      lostPoints: number
      proofId: string
      lemmasAllowed: boolean
      showTargetSteps: boolean
    }, ExtArgs["result"]["problem"]>
    composites: {}
  }

  type ProblemGetPayload<S extends boolean | null | undefined | ProblemDefaultArgs> = $Result.GetResult<Prisma.$ProblemPayload, S>

  type ProblemCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProblemFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProblemCountAggregateInputType | true
    }

  export interface ProblemDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Problem'], meta: { name: 'Problem' } }
    /**
     * Find zero or one Problem that matches the filter.
     * @param {ProblemFindUniqueArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProblemFindUniqueArgs>(args: SelectSubset<T, ProblemFindUniqueArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Problem that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProblemFindUniqueOrThrowArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProblemFindUniqueOrThrowArgs>(args: SelectSubset<T, ProblemFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Problem that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProblemFindFirstArgs>(args?: SelectSubset<T, ProblemFindFirstArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Problem that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindFirstOrThrowArgs} args - Arguments to find a Problem
     * @example
     * // Get one Problem
     * const problem = await prisma.problem.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProblemFindFirstOrThrowArgs>(args?: SelectSubset<T, ProblemFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Problems that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Problems
     * const problems = await prisma.problem.findMany()
     * 
     * // Get first 10 Problems
     * const problems = await prisma.problem.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const problemWithIdOnly = await prisma.problem.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProblemFindManyArgs>(args?: SelectSubset<T, ProblemFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Problem.
     * @param {ProblemCreateArgs} args - Arguments to create a Problem.
     * @example
     * // Create one Problem
     * const Problem = await prisma.problem.create({
     *   data: {
     *     // ... data to create a Problem
     *   }
     * })
     * 
     */
    create<T extends ProblemCreateArgs>(args: SelectSubset<T, ProblemCreateArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Problems.
     * @param {ProblemCreateManyArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problem = await prisma.problem.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProblemCreateManyArgs>(args?: SelectSubset<T, ProblemCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Problems and returns the data saved in the database.
     * @param {ProblemCreateManyAndReturnArgs} args - Arguments to create many Problems.
     * @example
     * // Create many Problems
     * const problem = await prisma.problem.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Problems and only return the `id`
     * const problemWithIdOnly = await prisma.problem.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProblemCreateManyAndReturnArgs>(args?: SelectSubset<T, ProblemCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Problem.
     * @param {ProblemDeleteArgs} args - Arguments to delete one Problem.
     * @example
     * // Delete one Problem
     * const Problem = await prisma.problem.delete({
     *   where: {
     *     // ... filter to delete one Problem
     *   }
     * })
     * 
     */
    delete<T extends ProblemDeleteArgs>(args: SelectSubset<T, ProblemDeleteArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Problem.
     * @param {ProblemUpdateArgs} args - Arguments to update one Problem.
     * @example
     * // Update one Problem
     * const problem = await prisma.problem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProblemUpdateArgs>(args: SelectSubset<T, ProblemUpdateArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Problems.
     * @param {ProblemDeleteManyArgs} args - Arguments to filter Problems to delete.
     * @example
     * // Delete a few Problems
     * const { count } = await prisma.problem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProblemDeleteManyArgs>(args?: SelectSubset<T, ProblemDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Problems
     * const problem = await prisma.problem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProblemUpdateManyArgs>(args: SelectSubset<T, ProblemUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Problems and returns the data updated in the database.
     * @param {ProblemUpdateManyAndReturnArgs} args - Arguments to update many Problems.
     * @example
     * // Update many Problems
     * const problem = await prisma.problem.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Problems and only return the `id`
     * const problemWithIdOnly = await prisma.problem.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProblemUpdateManyAndReturnArgs>(args: SelectSubset<T, ProblemUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Problem.
     * @param {ProblemUpsertArgs} args - Arguments to update or create a Problem.
     * @example
     * // Update or create a Problem
     * const problem = await prisma.problem.upsert({
     *   create: {
     *     // ... data to create a Problem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Problem we want to update
     *   }
     * })
     */
    upsert<T extends ProblemUpsertArgs>(args: SelectSubset<T, ProblemUpsertArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Problems.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemCountArgs} args - Arguments to filter Problems to count.
     * @example
     * // Count the number of Problems
     * const count = await prisma.problem.count({
     *   where: {
     *     // ... the filter for the Problems we want to count
     *   }
     * })
    **/
    count<T extends ProblemCountArgs>(
      args?: Subset<T, ProblemCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProblemCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProblemAggregateArgs>(args: Subset<T, ProblemAggregateArgs>): Prisma.PrismaPromise<GetProblemAggregateType<T>>

    /**
     * Group by Problem.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProblemGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProblemGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProblemGroupByArgs['orderBy'] }
        : { orderBy?: ProblemGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProblemGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProblemGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Problem model
   */
  readonly fields: ProblemFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Problem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProblemClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proof<T extends ProofDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProofDefaultArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    solutions<T extends Problem$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, Problem$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignments<T extends Problem$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Problem$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Problem model
   */
  interface ProblemFieldRefs {
    readonly id: FieldRef<"Problem", 'String'>
    readonly question: FieldRef<"Problem", 'String'>
    readonly point: FieldRef<"Problem", 'Decimal'>
    readonly targetSteps: FieldRef<"Problem", 'Int'>
    readonly lostPoints: FieldRef<"Problem", 'Int'>
    readonly proofId: FieldRef<"Problem", 'String'>
    readonly lemmasAllowed: FieldRef<"Problem", 'Boolean'>
    readonly showTargetSteps: FieldRef<"Problem", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Problem findUnique
   */
  export type ProblemFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem findUniqueOrThrow
   */
  export type ProblemFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem findFirst
   */
  export type ProblemFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem findFirstOrThrow
   */
  export type ProblemFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problem to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Problems.
     */
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem findMany
   */
  export type ProblemFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter, which Problems to fetch.
     */
    where?: ProblemWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Problems to fetch.
     */
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Problems.
     */
    cursor?: ProblemWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Problems from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Problems.
     */
    skip?: number
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Problem create
   */
  export type ProblemCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The data needed to create a Problem.
     */
    data: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
  }

  /**
   * Problem createMany
   */
  export type ProblemCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Problems.
     */
    data: ProblemCreateManyInput | ProblemCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Problem createManyAndReturn
   */
  export type ProblemCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * The data used to create many Problems.
     */
    data: ProblemCreateManyInput | ProblemCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Problem update
   */
  export type ProblemUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The data needed to update a Problem.
     */
    data: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
    /**
     * Choose, which Problem to update.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem updateMany
   */
  export type ProblemUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Problems.
     */
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyInput>
    /**
     * Filter which Problems to update
     */
    where?: ProblemWhereInput
    /**
     * Limit how many Problems to update.
     */
    limit?: number
  }

  /**
   * Problem updateManyAndReturn
   */
  export type ProblemUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * The data used to update Problems.
     */
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyInput>
    /**
     * Filter which Problems to update
     */
    where?: ProblemWhereInput
    /**
     * Limit how many Problems to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Problem upsert
   */
  export type ProblemUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * The filter to search for the Problem to update in case it exists.
     */
    where: ProblemWhereUniqueInput
    /**
     * In case the Problem found by the `where` argument doesn't exist, create a new Problem with this data.
     */
    create: XOR<ProblemCreateInput, ProblemUncheckedCreateInput>
    /**
     * In case the Problem was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProblemUpdateInput, ProblemUncheckedUpdateInput>
  }

  /**
   * Problem delete
   */
  export type ProblemDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    /**
     * Filter which Problem to delete.
     */
    where: ProblemWhereUniqueInput
  }

  /**
   * Problem deleteMany
   */
  export type ProblemDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Problems to delete
     */
    where?: ProblemWhereInput
    /**
     * Limit how many Problems to delete.
     */
    limit?: number
  }

  /**
   * Problem.solutions
   */
  export type Problem$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    where?: StudentProblemSolutionWhereInput
    orderBy?: StudentProblemSolutionOrderByWithRelationInput | StudentProblemSolutionOrderByWithRelationInput[]
    cursor?: StudentProblemSolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentProblemSolutionScalarFieldEnum | StudentProblemSolutionScalarFieldEnum[]
  }

  /**
   * Problem.assignments
   */
  export type Problem$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Problem without action
   */
  export type ProblemDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    section: number | null
  }

  export type CourseSumAggregateOutputType = {
    section: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    title: string | null
    term: string | null
    section: number | null
    instructorId: string | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    term: string | null
    section: number | null
    instructorId: string | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    title: number
    term: number
    section: number
    instructorId: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    section?: true
  }

  export type CourseSumAggregateInputType = {
    section?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    title?: true
    term?: true
    section?: true
    instructorId?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    title?: true
    term?: true
    section?: true
    instructorId?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    title?: true
    term?: true
    section?: true
    instructorId?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    title: string
    term: string
    section: number
    instructorId: string
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    term?: boolean
    section?: boolean
    instructorId?: boolean
    assignments?: boolean | Course$assignmentsArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
    students?: boolean | Course$studentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    term?: boolean
    section?: boolean
    instructorId?: boolean
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    term?: boolean
    section?: boolean
    instructorId?: boolean
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    title?: boolean
    term?: boolean
    section?: boolean
    instructorId?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "term" | "section" | "instructorId", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignments?: boolean | Course$assignmentsArgs<ExtArgs>
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
    students?: boolean | Course$studentsArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    instructor?: boolean | InstructorDefaultArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      assignments: Prisma.$AssignmentPayload<ExtArgs>[]
      instructor: Prisma.$InstructorPayload<ExtArgs>
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      term: string
      section: number
      instructorId: string
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignments<T extends Course$assignmentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$assignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    instructor<T extends InstructorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, InstructorDefaultArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    students<T extends Course$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Course$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly title: FieldRef<"Course", 'String'>
    readonly term: FieldRef<"Course", 'String'>
    readonly section: FieldRef<"Course", 'Int'>
    readonly instructorId: FieldRef<"Course", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.assignments
   */
  export type Course$assignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    cursor?: AssignmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Course.students
   */
  export type Course$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Student
     */
    omit?: StudentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model Assignment
   */

  export type AggregateAssignment = {
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  export type AssignmentAvgAggregateOutputType = {
    resubmissions: number | null
  }

  export type AssignmentSumAggregateOutputType = {
    resubmissions: number | null
  }

  export type AssignmentMinAggregateOutputType = {
    id: string | null
    title: string | null
    createdById: string | null
    createdOn: Date | null
    startDate: Date | null
    dueBy: Date | null
    resubmissions: number | null
    courseId: string | null
    isSubmitted: boolean | null
    isLateSubmitted: boolean | null
    isLateSubmittedDate: Date | null
  }

  export type AssignmentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    createdById: string | null
    createdOn: Date | null
    startDate: Date | null
    dueBy: Date | null
    resubmissions: number | null
    courseId: string | null
    isSubmitted: boolean | null
    isLateSubmitted: boolean | null
    isLateSubmittedDate: Date | null
  }

  export type AssignmentCountAggregateOutputType = {
    id: number
    title: number
    createdById: number
    createdOn: number
    startDate: number
    dueBy: number
    resubmissions: number
    courseId: number
    isSubmitted: number
    isLateSubmitted: number
    isLateSubmittedDate: number
    _all: number
  }


  export type AssignmentAvgAggregateInputType = {
    resubmissions?: true
  }

  export type AssignmentSumAggregateInputType = {
    resubmissions?: true
  }

  export type AssignmentMinAggregateInputType = {
    id?: true
    title?: true
    createdById?: true
    createdOn?: true
    startDate?: true
    dueBy?: true
    resubmissions?: true
    courseId?: true
    isSubmitted?: true
    isLateSubmitted?: true
    isLateSubmittedDate?: true
  }

  export type AssignmentMaxAggregateInputType = {
    id?: true
    title?: true
    createdById?: true
    createdOn?: true
    startDate?: true
    dueBy?: true
    resubmissions?: true
    courseId?: true
    isSubmitted?: true
    isLateSubmitted?: true
    isLateSubmittedDate?: true
  }

  export type AssignmentCountAggregateInputType = {
    id?: true
    title?: true
    createdById?: true
    createdOn?: true
    startDate?: true
    dueBy?: true
    resubmissions?: true
    courseId?: true
    isSubmitted?: true
    isLateSubmitted?: true
    isLateSubmittedDate?: true
    _all?: true
  }

  export type AssignmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignment to aggregate.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Assignments
    **/
    _count?: true | AssignmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AssignmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AssignmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentMaxAggregateInputType
  }

  export type GetAssignmentAggregateType<T extends AssignmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignment[P]>
      : GetScalarType<T[P], AggregateAssignment[P]>
  }




  export type AssignmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentWhereInput
    orderBy?: AssignmentOrderByWithAggregationInput | AssignmentOrderByWithAggregationInput[]
    by: AssignmentScalarFieldEnum[] | AssignmentScalarFieldEnum
    having?: AssignmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentCountAggregateInputType | true
    _avg?: AssignmentAvgAggregateInputType
    _sum?: AssignmentSumAggregateInputType
    _min?: AssignmentMinAggregateInputType
    _max?: AssignmentMaxAggregateInputType
  }

  export type AssignmentGroupByOutputType = {
    id: string
    title: string | null
    createdById: string | null
    createdOn: Date
    startDate: Date | null
    dueBy: Date
    resubmissions: number | null
    courseId: string
    isSubmitted: boolean
    isLateSubmitted: boolean
    isLateSubmittedDate: Date | null
    _count: AssignmentCountAggregateOutputType | null
    _avg: AssignmentAvgAggregateOutputType | null
    _sum: AssignmentSumAggregateOutputType | null
    _min: AssignmentMinAggregateOutputType | null
    _max: AssignmentMaxAggregateOutputType | null
  }

  type GetAssignmentGroupByPayload<T extends AssignmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdById?: boolean
    createdOn?: boolean
    startDate?: boolean
    dueBy?: boolean
    resubmissions?: boolean
    courseId?: boolean
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | Assignment$createdByArgs<ExtArgs>
    delays?: boolean | Assignment$delaysArgs<ExtArgs>
    solutions?: boolean | Assignment$solutionsArgs<ExtArgs>
    problems?: boolean | Assignment$problemsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdById?: boolean
    createdOn?: boolean
    startDate?: boolean
    dueBy?: boolean
    resubmissions?: boolean
    courseId?: boolean
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | Assignment$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    createdById?: boolean
    createdOn?: boolean
    startDate?: boolean
    dueBy?: boolean
    resubmissions?: boolean
    courseId?: boolean
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | Assignment$createdByArgs<ExtArgs>
  }, ExtArgs["result"]["assignment"]>

  export type AssignmentSelectScalar = {
    id?: boolean
    title?: boolean
    createdById?: boolean
    createdOn?: boolean
    startDate?: boolean
    dueBy?: boolean
    resubmissions?: boolean
    courseId?: boolean
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: boolean
  }

  export type AssignmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "createdById" | "createdOn" | "startDate" | "dueBy" | "resubmissions" | "courseId" | "isSubmitted" | "isLateSubmitted" | "isLateSubmittedDate", ExtArgs["result"]["assignment"]>
  export type AssignmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | Assignment$createdByArgs<ExtArgs>
    delays?: boolean | Assignment$delaysArgs<ExtArgs>
    solutions?: boolean | Assignment$solutionsArgs<ExtArgs>
    problems?: boolean | Assignment$problemsArgs<ExtArgs>
    _count?: boolean | AssignmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AssignmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | Assignment$createdByArgs<ExtArgs>
  }
  export type AssignmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
    createdBy?: boolean | Assignment$createdByArgs<ExtArgs>
  }

  export type $AssignmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Assignment"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
      createdBy: Prisma.$InstructorPayload<ExtArgs> | null
      delays: Prisma.$AssignmentDelayPayload<ExtArgs>[]
      solutions: Prisma.$StudentProblemSolutionPayload<ExtArgs>[]
      problems: Prisma.$ProblemPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string | null
      createdById: string | null
      createdOn: Date
      startDate: Date | null
      dueBy: Date
      resubmissions: number | null
      courseId: string
      isSubmitted: boolean
      isLateSubmitted: boolean
      isLateSubmittedDate: Date | null
    }, ExtArgs["result"]["assignment"]>
    composites: {}
  }

  type AssignmentGetPayload<S extends boolean | null | undefined | AssignmentDefaultArgs> = $Result.GetResult<Prisma.$AssignmentPayload, S>

  type AssignmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssignmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssignmentCountAggregateInputType | true
    }

  export interface AssignmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Assignment'], meta: { name: 'Assignment' } }
    /**
     * Find zero or one Assignment that matches the filter.
     * @param {AssignmentFindUniqueArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssignmentFindUniqueArgs>(args: SelectSubset<T, AssignmentFindUniqueArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Assignment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssignmentFindUniqueOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssignmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AssignmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssignmentFindFirstArgs>(args?: SelectSubset<T, AssignmentFindFirstArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Assignment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindFirstOrThrowArgs} args - Arguments to find a Assignment
     * @example
     * // Get one Assignment
     * const assignment = await prisma.assignment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssignmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AssignmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Assignments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Assignments
     * const assignments = await prisma.assignment.findMany()
     * 
     * // Get first 10 Assignments
     * const assignments = await prisma.assignment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentWithIdOnly = await prisma.assignment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssignmentFindManyArgs>(args?: SelectSubset<T, AssignmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Assignment.
     * @param {AssignmentCreateArgs} args - Arguments to create a Assignment.
     * @example
     * // Create one Assignment
     * const Assignment = await prisma.assignment.create({
     *   data: {
     *     // ... data to create a Assignment
     *   }
     * })
     * 
     */
    create<T extends AssignmentCreateArgs>(args: SelectSubset<T, AssignmentCreateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Assignments.
     * @param {AssignmentCreateManyArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssignmentCreateManyArgs>(args?: SelectSubset<T, AssignmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Assignments and returns the data saved in the database.
     * @param {AssignmentCreateManyAndReturnArgs} args - Arguments to create many Assignments.
     * @example
     * // Create many Assignments
     * const assignment = await prisma.assignment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssignmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AssignmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Assignment.
     * @param {AssignmentDeleteArgs} args - Arguments to delete one Assignment.
     * @example
     * // Delete one Assignment
     * const Assignment = await prisma.assignment.delete({
     *   where: {
     *     // ... filter to delete one Assignment
     *   }
     * })
     * 
     */
    delete<T extends AssignmentDeleteArgs>(args: SelectSubset<T, AssignmentDeleteArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Assignment.
     * @param {AssignmentUpdateArgs} args - Arguments to update one Assignment.
     * @example
     * // Update one Assignment
     * const assignment = await prisma.assignment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssignmentUpdateArgs>(args: SelectSubset<T, AssignmentUpdateArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Assignments.
     * @param {AssignmentDeleteManyArgs} args - Arguments to filter Assignments to delete.
     * @example
     * // Delete a few Assignments
     * const { count } = await prisma.assignment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssignmentDeleteManyArgs>(args?: SelectSubset<T, AssignmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssignmentUpdateManyArgs>(args: SelectSubset<T, AssignmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Assignments and returns the data updated in the database.
     * @param {AssignmentUpdateManyAndReturnArgs} args - Arguments to update many Assignments.
     * @example
     * // Update many Assignments
     * const assignment = await prisma.assignment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Assignments and only return the `id`
     * const assignmentWithIdOnly = await prisma.assignment.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssignmentUpdateManyAndReturnArgs>(args: SelectSubset<T, AssignmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Assignment.
     * @param {AssignmentUpsertArgs} args - Arguments to update or create a Assignment.
     * @example
     * // Update or create a Assignment
     * const assignment = await prisma.assignment.upsert({
     *   create: {
     *     // ... data to create a Assignment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Assignment we want to update
     *   }
     * })
     */
    upsert<T extends AssignmentUpsertArgs>(args: SelectSubset<T, AssignmentUpsertArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Assignments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentCountArgs} args - Arguments to filter Assignments to count.
     * @example
     * // Count the number of Assignments
     * const count = await prisma.assignment.count({
     *   where: {
     *     // ... the filter for the Assignments we want to count
     *   }
     * })
    **/
    count<T extends AssignmentCountArgs>(
      args?: Subset<T, AssignmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentAggregateArgs>(args: Subset<T, AssignmentAggregateArgs>): Prisma.PrismaPromise<GetAssignmentAggregateType<T>>

    /**
     * Group by Assignment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Assignment model
   */
  readonly fields: AssignmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Assignment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends Assignment$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$createdByArgs<ExtArgs>>): Prisma__InstructorClient<$Result.GetResult<Prisma.$InstructorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    delays<T extends Assignment$delaysArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$delaysArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    solutions<T extends Assignment$solutionsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$solutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    problems<T extends Assignment$problemsArgs<ExtArgs> = {}>(args?: Subset<T, Assignment$problemsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Assignment model
   */
  interface AssignmentFieldRefs {
    readonly id: FieldRef<"Assignment", 'String'>
    readonly title: FieldRef<"Assignment", 'String'>
    readonly createdById: FieldRef<"Assignment", 'String'>
    readonly createdOn: FieldRef<"Assignment", 'DateTime'>
    readonly startDate: FieldRef<"Assignment", 'DateTime'>
    readonly dueBy: FieldRef<"Assignment", 'DateTime'>
    readonly resubmissions: FieldRef<"Assignment", 'Int'>
    readonly courseId: FieldRef<"Assignment", 'String'>
    readonly isSubmitted: FieldRef<"Assignment", 'Boolean'>
    readonly isLateSubmitted: FieldRef<"Assignment", 'Boolean'>
    readonly isLateSubmittedDate: FieldRef<"Assignment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Assignment findUnique
   */
  export type AssignmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findUniqueOrThrow
   */
  export type AssignmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment findFirst
   */
  export type AssignmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findFirstOrThrow
   */
  export type AssignmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignment to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Assignments.
     */
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment findMany
   */
  export type AssignmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter, which Assignments to fetch.
     */
    where?: AssignmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Assignments to fetch.
     */
    orderBy?: AssignmentOrderByWithRelationInput | AssignmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Assignments.
     */
    cursor?: AssignmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Assignments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Assignments.
     */
    skip?: number
    distinct?: AssignmentScalarFieldEnum | AssignmentScalarFieldEnum[]
  }

  /**
   * Assignment create
   */
  export type AssignmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Assignment.
     */
    data: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
  }

  /**
   * Assignment createMany
   */
  export type AssignmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Assignment createManyAndReturn
   */
  export type AssignmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to create many Assignments.
     */
    data: AssignmentCreateManyInput | AssignmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment update
   */
  export type AssignmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Assignment.
     */
    data: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
    /**
     * Choose, which Assignment to update.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment updateMany
   */
  export type AssignmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
  }

  /**
   * Assignment updateManyAndReturn
   */
  export type AssignmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * The data used to update Assignments.
     */
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyInput>
    /**
     * Filter which Assignments to update
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Assignment upsert
   */
  export type AssignmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Assignment to update in case it exists.
     */
    where: AssignmentWhereUniqueInput
    /**
     * In case the Assignment found by the `where` argument doesn't exist, create a new Assignment with this data.
     */
    create: XOR<AssignmentCreateInput, AssignmentUncheckedCreateInput>
    /**
     * In case the Assignment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentUpdateInput, AssignmentUncheckedUpdateInput>
  }

  /**
   * Assignment delete
   */
  export type AssignmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
    /**
     * Filter which Assignment to delete.
     */
    where: AssignmentWhereUniqueInput
  }

  /**
   * Assignment deleteMany
   */
  export type AssignmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Assignments to delete
     */
    where?: AssignmentWhereInput
    /**
     * Limit how many Assignments to delete.
     */
    limit?: number
  }

  /**
   * Assignment.createdBy
   */
  export type Assignment$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Instructor
     */
    select?: InstructorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Instructor
     */
    omit?: InstructorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InstructorInclude<ExtArgs> | null
    where?: InstructorWhereInput
  }

  /**
   * Assignment.delays
   */
  export type Assignment$delaysArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    where?: AssignmentDelayWhereInput
    orderBy?: AssignmentDelayOrderByWithRelationInput | AssignmentDelayOrderByWithRelationInput[]
    cursor?: AssignmentDelayWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AssignmentDelayScalarFieldEnum | AssignmentDelayScalarFieldEnum[]
  }

  /**
   * Assignment.solutions
   */
  export type Assignment$solutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    where?: StudentProblemSolutionWhereInput
    orderBy?: StudentProblemSolutionOrderByWithRelationInput | StudentProblemSolutionOrderByWithRelationInput[]
    cursor?: StudentProblemSolutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentProblemSolutionScalarFieldEnum | StudentProblemSolutionScalarFieldEnum[]
  }

  /**
   * Assignment.problems
   */
  export type Assignment$problemsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Problem
     */
    select?: ProblemSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Problem
     */
    omit?: ProblemOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProblemInclude<ExtArgs> | null
    where?: ProblemWhereInput
    orderBy?: ProblemOrderByWithRelationInput | ProblemOrderByWithRelationInput[]
    cursor?: ProblemWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProblemScalarFieldEnum | ProblemScalarFieldEnum[]
  }

  /**
   * Assignment without action
   */
  export type AssignmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Assignment
     */
    select?: AssignmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Assignment
     */
    omit?: AssignmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentInclude<ExtArgs> | null
  }


  /**
   * Model StudentProblemSolution
   */

  export type AggregateStudentProblemSolution = {
    _count: StudentProblemSolutionCountAggregateOutputType | null
    _avg: StudentProblemSolutionAvgAggregateOutputType | null
    _sum: StudentProblemSolutionSumAggregateOutputType | null
    _min: StudentProblemSolutionMinAggregateOutputType | null
    _max: StudentProblemSolutionMaxAggregateOutputType | null
  }

  export type StudentProblemSolutionAvgAggregateOutputType = {
    grade: Decimal | null
  }

  export type StudentProblemSolutionSumAggregateOutputType = {
    grade: Decimal | null
  }

  export type StudentProblemSolutionMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    assignmentId: string | null
    problemId: string | null
    proofId: string | null
    submittedOn: Date | null
    grade: Decimal | null
  }

  export type StudentProblemSolutionMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    assignmentId: string | null
    problemId: string | null
    proofId: string | null
    submittedOn: Date | null
    grade: Decimal | null
  }

  export type StudentProblemSolutionCountAggregateOutputType = {
    id: number
    studentId: number
    assignmentId: number
    problemId: number
    proofId: number
    submittedOn: number
    grade: number
    _all: number
  }


  export type StudentProblemSolutionAvgAggregateInputType = {
    grade?: true
  }

  export type StudentProblemSolutionSumAggregateInputType = {
    grade?: true
  }

  export type StudentProblemSolutionMinAggregateInputType = {
    id?: true
    studentId?: true
    assignmentId?: true
    problemId?: true
    proofId?: true
    submittedOn?: true
    grade?: true
  }

  export type StudentProblemSolutionMaxAggregateInputType = {
    id?: true
    studentId?: true
    assignmentId?: true
    problemId?: true
    proofId?: true
    submittedOn?: true
    grade?: true
  }

  export type StudentProblemSolutionCountAggregateInputType = {
    id?: true
    studentId?: true
    assignmentId?: true
    problemId?: true
    proofId?: true
    submittedOn?: true
    grade?: true
    _all?: true
  }

  export type StudentProblemSolutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentProblemSolution to aggregate.
     */
    where?: StudentProblemSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProblemSolutions to fetch.
     */
    orderBy?: StudentProblemSolutionOrderByWithRelationInput | StudentProblemSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentProblemSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProblemSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProblemSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentProblemSolutions
    **/
    _count?: true | StudentProblemSolutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentProblemSolutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentProblemSolutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentProblemSolutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentProblemSolutionMaxAggregateInputType
  }

  export type GetStudentProblemSolutionAggregateType<T extends StudentProblemSolutionAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentProblemSolution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentProblemSolution[P]>
      : GetScalarType<T[P], AggregateStudentProblemSolution[P]>
  }




  export type StudentProblemSolutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentProblemSolutionWhereInput
    orderBy?: StudentProblemSolutionOrderByWithAggregationInput | StudentProblemSolutionOrderByWithAggregationInput[]
    by: StudentProblemSolutionScalarFieldEnum[] | StudentProblemSolutionScalarFieldEnum
    having?: StudentProblemSolutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentProblemSolutionCountAggregateInputType | true
    _avg?: StudentProblemSolutionAvgAggregateInputType
    _sum?: StudentProblemSolutionSumAggregateInputType
    _min?: StudentProblemSolutionMinAggregateInputType
    _max?: StudentProblemSolutionMaxAggregateInputType
  }

  export type StudentProblemSolutionGroupByOutputType = {
    id: string
    studentId: string
    assignmentId: string
    problemId: string
    proofId: string
    submittedOn: Date | null
    grade: Decimal | null
    _count: StudentProblemSolutionCountAggregateOutputType | null
    _avg: StudentProblemSolutionAvgAggregateOutputType | null
    _sum: StudentProblemSolutionSumAggregateOutputType | null
    _min: StudentProblemSolutionMinAggregateOutputType | null
    _max: StudentProblemSolutionMaxAggregateOutputType | null
  }

  type GetStudentProblemSolutionGroupByPayload<T extends StudentProblemSolutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentProblemSolutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentProblemSolutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentProblemSolutionGroupByOutputType[P]>
            : GetScalarType<T[P], StudentProblemSolutionGroupByOutputType[P]>
        }
      >
    >


  export type StudentProblemSolutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assignmentId?: boolean
    problemId?: boolean
    proofId?: boolean
    submittedOn?: boolean
    grade?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentProblemSolution"]>

  export type StudentProblemSolutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assignmentId?: boolean
    problemId?: boolean
    proofId?: boolean
    submittedOn?: boolean
    grade?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentProblemSolution"]>

  export type StudentProblemSolutionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    assignmentId?: boolean
    problemId?: boolean
    proofId?: boolean
    submittedOn?: boolean
    grade?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentProblemSolution"]>

  export type StudentProblemSolutionSelectScalar = {
    id?: boolean
    studentId?: boolean
    assignmentId?: boolean
    problemId?: boolean
    proofId?: boolean
    submittedOn?: boolean
    grade?: boolean
  }

  export type StudentProblemSolutionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "assignmentId" | "problemId" | "proofId" | "submittedOn" | "grade", ExtArgs["result"]["studentProblemSolution"]>
  export type StudentProblemSolutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentProblemSolutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type StudentProblemSolutionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    problem?: boolean | ProblemDefaultArgs<ExtArgs>
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $StudentProblemSolutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentProblemSolution"
    objects: {
      assignment: Prisma.$AssignmentPayload<ExtArgs>
      problem: Prisma.$ProblemPayload<ExtArgs>
      proof: Prisma.$ProofPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      assignmentId: string
      problemId: string
      proofId: string
      submittedOn: Date | null
      grade: Prisma.Decimal | null
    }, ExtArgs["result"]["studentProblemSolution"]>
    composites: {}
  }

  type StudentProblemSolutionGetPayload<S extends boolean | null | undefined | StudentProblemSolutionDefaultArgs> = $Result.GetResult<Prisma.$StudentProblemSolutionPayload, S>

  type StudentProblemSolutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StudentProblemSolutionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StudentProblemSolutionCountAggregateInputType | true
    }

  export interface StudentProblemSolutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentProblemSolution'], meta: { name: 'StudentProblemSolution' } }
    /**
     * Find zero or one StudentProblemSolution that matches the filter.
     * @param {StudentProblemSolutionFindUniqueArgs} args - Arguments to find a StudentProblemSolution
     * @example
     * // Get one StudentProblemSolution
     * const studentProblemSolution = await prisma.studentProblemSolution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StudentProblemSolutionFindUniqueArgs>(args: SelectSubset<T, StudentProblemSolutionFindUniqueArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StudentProblemSolution that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StudentProblemSolutionFindUniqueOrThrowArgs} args - Arguments to find a StudentProblemSolution
     * @example
     * // Get one StudentProblemSolution
     * const studentProblemSolution = await prisma.studentProblemSolution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StudentProblemSolutionFindUniqueOrThrowArgs>(args: SelectSubset<T, StudentProblemSolutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentProblemSolution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProblemSolutionFindFirstArgs} args - Arguments to find a StudentProblemSolution
     * @example
     * // Get one StudentProblemSolution
     * const studentProblemSolution = await prisma.studentProblemSolution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StudentProblemSolutionFindFirstArgs>(args?: SelectSubset<T, StudentProblemSolutionFindFirstArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StudentProblemSolution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProblemSolutionFindFirstOrThrowArgs} args - Arguments to find a StudentProblemSolution
     * @example
     * // Get one StudentProblemSolution
     * const studentProblemSolution = await prisma.studentProblemSolution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StudentProblemSolutionFindFirstOrThrowArgs>(args?: SelectSubset<T, StudentProblemSolutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StudentProblemSolutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProblemSolutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentProblemSolutions
     * const studentProblemSolutions = await prisma.studentProblemSolution.findMany()
     * 
     * // Get first 10 StudentProblemSolutions
     * const studentProblemSolutions = await prisma.studentProblemSolution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentProblemSolutionWithIdOnly = await prisma.studentProblemSolution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StudentProblemSolutionFindManyArgs>(args?: SelectSubset<T, StudentProblemSolutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StudentProblemSolution.
     * @param {StudentProblemSolutionCreateArgs} args - Arguments to create a StudentProblemSolution.
     * @example
     * // Create one StudentProblemSolution
     * const StudentProblemSolution = await prisma.studentProblemSolution.create({
     *   data: {
     *     // ... data to create a StudentProblemSolution
     *   }
     * })
     * 
     */
    create<T extends StudentProblemSolutionCreateArgs>(args: SelectSubset<T, StudentProblemSolutionCreateArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StudentProblemSolutions.
     * @param {StudentProblemSolutionCreateManyArgs} args - Arguments to create many StudentProblemSolutions.
     * @example
     * // Create many StudentProblemSolutions
     * const studentProblemSolution = await prisma.studentProblemSolution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StudentProblemSolutionCreateManyArgs>(args?: SelectSubset<T, StudentProblemSolutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentProblemSolutions and returns the data saved in the database.
     * @param {StudentProblemSolutionCreateManyAndReturnArgs} args - Arguments to create many StudentProblemSolutions.
     * @example
     * // Create many StudentProblemSolutions
     * const studentProblemSolution = await prisma.studentProblemSolution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentProblemSolutions and only return the `id`
     * const studentProblemSolutionWithIdOnly = await prisma.studentProblemSolution.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StudentProblemSolutionCreateManyAndReturnArgs>(args?: SelectSubset<T, StudentProblemSolutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StudentProblemSolution.
     * @param {StudentProblemSolutionDeleteArgs} args - Arguments to delete one StudentProblemSolution.
     * @example
     * // Delete one StudentProblemSolution
     * const StudentProblemSolution = await prisma.studentProblemSolution.delete({
     *   where: {
     *     // ... filter to delete one StudentProblemSolution
     *   }
     * })
     * 
     */
    delete<T extends StudentProblemSolutionDeleteArgs>(args: SelectSubset<T, StudentProblemSolutionDeleteArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StudentProblemSolution.
     * @param {StudentProblemSolutionUpdateArgs} args - Arguments to update one StudentProblemSolution.
     * @example
     * // Update one StudentProblemSolution
     * const studentProblemSolution = await prisma.studentProblemSolution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StudentProblemSolutionUpdateArgs>(args: SelectSubset<T, StudentProblemSolutionUpdateArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StudentProblemSolutions.
     * @param {StudentProblemSolutionDeleteManyArgs} args - Arguments to filter StudentProblemSolutions to delete.
     * @example
     * // Delete a few StudentProblemSolutions
     * const { count } = await prisma.studentProblemSolution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StudentProblemSolutionDeleteManyArgs>(args?: SelectSubset<T, StudentProblemSolutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentProblemSolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProblemSolutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentProblemSolutions
     * const studentProblemSolution = await prisma.studentProblemSolution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StudentProblemSolutionUpdateManyArgs>(args: SelectSubset<T, StudentProblemSolutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentProblemSolutions and returns the data updated in the database.
     * @param {StudentProblemSolutionUpdateManyAndReturnArgs} args - Arguments to update many StudentProblemSolutions.
     * @example
     * // Update many StudentProblemSolutions
     * const studentProblemSolution = await prisma.studentProblemSolution.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StudentProblemSolutions and only return the `id`
     * const studentProblemSolutionWithIdOnly = await prisma.studentProblemSolution.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StudentProblemSolutionUpdateManyAndReturnArgs>(args: SelectSubset<T, StudentProblemSolutionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StudentProblemSolution.
     * @param {StudentProblemSolutionUpsertArgs} args - Arguments to update or create a StudentProblemSolution.
     * @example
     * // Update or create a StudentProblemSolution
     * const studentProblemSolution = await prisma.studentProblemSolution.upsert({
     *   create: {
     *     // ... data to create a StudentProblemSolution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentProblemSolution we want to update
     *   }
     * })
     */
    upsert<T extends StudentProblemSolutionUpsertArgs>(args: SelectSubset<T, StudentProblemSolutionUpsertArgs<ExtArgs>>): Prisma__StudentProblemSolutionClient<$Result.GetResult<Prisma.$StudentProblemSolutionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StudentProblemSolutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProblemSolutionCountArgs} args - Arguments to filter StudentProblemSolutions to count.
     * @example
     * // Count the number of StudentProblemSolutions
     * const count = await prisma.studentProblemSolution.count({
     *   where: {
     *     // ... the filter for the StudentProblemSolutions we want to count
     *   }
     * })
    **/
    count<T extends StudentProblemSolutionCountArgs>(
      args?: Subset<T, StudentProblemSolutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentProblemSolutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentProblemSolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProblemSolutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentProblemSolutionAggregateArgs>(args: Subset<T, StudentProblemSolutionAggregateArgs>): Prisma.PrismaPromise<GetStudentProblemSolutionAggregateType<T>>

    /**
     * Group by StudentProblemSolution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentProblemSolutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentProblemSolutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentProblemSolutionGroupByArgs['orderBy'] }
        : { orderBy?: StudentProblemSolutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentProblemSolutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentProblemSolutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentProblemSolution model
   */
  readonly fields: StudentProblemSolutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentProblemSolution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentProblemSolutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignment<T extends AssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssignmentDefaultArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    problem<T extends ProblemDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProblemDefaultArgs<ExtArgs>>): Prisma__ProblemClient<$Result.GetResult<Prisma.$ProblemPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    proof<T extends ProofDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProofDefaultArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StudentProblemSolution model
   */
  interface StudentProblemSolutionFieldRefs {
    readonly id: FieldRef<"StudentProblemSolution", 'String'>
    readonly studentId: FieldRef<"StudentProblemSolution", 'String'>
    readonly assignmentId: FieldRef<"StudentProblemSolution", 'String'>
    readonly problemId: FieldRef<"StudentProblemSolution", 'String'>
    readonly proofId: FieldRef<"StudentProblemSolution", 'String'>
    readonly submittedOn: FieldRef<"StudentProblemSolution", 'DateTime'>
    readonly grade: FieldRef<"StudentProblemSolution", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * StudentProblemSolution findUnique
   */
  export type StudentProblemSolutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * Filter, which StudentProblemSolution to fetch.
     */
    where: StudentProblemSolutionWhereUniqueInput
  }

  /**
   * StudentProblemSolution findUniqueOrThrow
   */
  export type StudentProblemSolutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * Filter, which StudentProblemSolution to fetch.
     */
    where: StudentProblemSolutionWhereUniqueInput
  }

  /**
   * StudentProblemSolution findFirst
   */
  export type StudentProblemSolutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * Filter, which StudentProblemSolution to fetch.
     */
    where?: StudentProblemSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProblemSolutions to fetch.
     */
    orderBy?: StudentProblemSolutionOrderByWithRelationInput | StudentProblemSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentProblemSolutions.
     */
    cursor?: StudentProblemSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProblemSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProblemSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentProblemSolutions.
     */
    distinct?: StudentProblemSolutionScalarFieldEnum | StudentProblemSolutionScalarFieldEnum[]
  }

  /**
   * StudentProblemSolution findFirstOrThrow
   */
  export type StudentProblemSolutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * Filter, which StudentProblemSolution to fetch.
     */
    where?: StudentProblemSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProblemSolutions to fetch.
     */
    orderBy?: StudentProblemSolutionOrderByWithRelationInput | StudentProblemSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentProblemSolutions.
     */
    cursor?: StudentProblemSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProblemSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProblemSolutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentProblemSolutions.
     */
    distinct?: StudentProblemSolutionScalarFieldEnum | StudentProblemSolutionScalarFieldEnum[]
  }

  /**
   * StudentProblemSolution findMany
   */
  export type StudentProblemSolutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * Filter, which StudentProblemSolutions to fetch.
     */
    where?: StudentProblemSolutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentProblemSolutions to fetch.
     */
    orderBy?: StudentProblemSolutionOrderByWithRelationInput | StudentProblemSolutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentProblemSolutions.
     */
    cursor?: StudentProblemSolutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentProblemSolutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentProblemSolutions.
     */
    skip?: number
    distinct?: StudentProblemSolutionScalarFieldEnum | StudentProblemSolutionScalarFieldEnum[]
  }

  /**
   * StudentProblemSolution create
   */
  export type StudentProblemSolutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentProblemSolution.
     */
    data: XOR<StudentProblemSolutionCreateInput, StudentProblemSolutionUncheckedCreateInput>
  }

  /**
   * StudentProblemSolution createMany
   */
  export type StudentProblemSolutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentProblemSolutions.
     */
    data: StudentProblemSolutionCreateManyInput | StudentProblemSolutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentProblemSolution createManyAndReturn
   */
  export type StudentProblemSolutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * The data used to create many StudentProblemSolutions.
     */
    data: StudentProblemSolutionCreateManyInput | StudentProblemSolutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentProblemSolution update
   */
  export type StudentProblemSolutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentProblemSolution.
     */
    data: XOR<StudentProblemSolutionUpdateInput, StudentProblemSolutionUncheckedUpdateInput>
    /**
     * Choose, which StudentProblemSolution to update.
     */
    where: StudentProblemSolutionWhereUniqueInput
  }

  /**
   * StudentProblemSolution updateMany
   */
  export type StudentProblemSolutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentProblemSolutions.
     */
    data: XOR<StudentProblemSolutionUpdateManyMutationInput, StudentProblemSolutionUncheckedUpdateManyInput>
    /**
     * Filter which StudentProblemSolutions to update
     */
    where?: StudentProblemSolutionWhereInput
    /**
     * Limit how many StudentProblemSolutions to update.
     */
    limit?: number
  }

  /**
   * StudentProblemSolution updateManyAndReturn
   */
  export type StudentProblemSolutionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * The data used to update StudentProblemSolutions.
     */
    data: XOR<StudentProblemSolutionUpdateManyMutationInput, StudentProblemSolutionUncheckedUpdateManyInput>
    /**
     * Filter which StudentProblemSolutions to update
     */
    where?: StudentProblemSolutionWhereInput
    /**
     * Limit how many StudentProblemSolutions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentProblemSolution upsert
   */
  export type StudentProblemSolutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentProblemSolution to update in case it exists.
     */
    where: StudentProblemSolutionWhereUniqueInput
    /**
     * In case the StudentProblemSolution found by the `where` argument doesn't exist, create a new StudentProblemSolution with this data.
     */
    create: XOR<StudentProblemSolutionCreateInput, StudentProblemSolutionUncheckedCreateInput>
    /**
     * In case the StudentProblemSolution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentProblemSolutionUpdateInput, StudentProblemSolutionUncheckedUpdateInput>
  }

  /**
   * StudentProblemSolution delete
   */
  export type StudentProblemSolutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
    /**
     * Filter which StudentProblemSolution to delete.
     */
    where: StudentProblemSolutionWhereUniqueInput
  }

  /**
   * StudentProblemSolution deleteMany
   */
  export type StudentProblemSolutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentProblemSolutions to delete
     */
    where?: StudentProblemSolutionWhereInput
    /**
     * Limit how many StudentProblemSolutions to delete.
     */
    limit?: number
  }

  /**
   * StudentProblemSolution without action
   */
  export type StudentProblemSolutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentProblemSolution
     */
    select?: StudentProblemSolutionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StudentProblemSolution
     */
    omit?: StudentProblemSolutionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentProblemSolutionInclude<ExtArgs> | null
  }


  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    subject: string | null
    details: string | null
    attach: string | null
  }

  export type FeedbackMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    subject: string | null
    details: string | null
    attach: string | null
  }

  export type FeedbackCountAggregateOutputType = {
    id: number
    name: number
    email: number
    subject: number
    details: number
    attach: number
    _all: number
  }


  export type FeedbackMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    subject?: true
    details?: true
    attach?: true
  }

  export type FeedbackMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    subject?: true
    details?: true
    attach?: true
  }

  export type FeedbackCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    subject?: true
    details?: true
    attach?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    id: string
    name: string
    email: string
    subject: string
    details: string
    attach: string | null
    _count: FeedbackCountAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    details?: boolean
    attach?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    details?: boolean
    attach?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    details?: boolean
    attach?: boolean
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    subject?: boolean
    details?: boolean
    attach?: boolean
  }

  export type FeedbackOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "subject" | "details" | "attach", ExtArgs["result"]["feedback"]>

  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      subject: string
      details: string
      attach: string | null
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }

  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FeedbackFindUniqueArgs>(args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Feedback that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs>(args: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FeedbackFindFirstArgs>(args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs>(args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const feedbackWithIdOnly = await prisma.feedback.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FeedbackFindManyArgs>(args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
     */
    create<T extends FeedbackCreateArgs>(args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Feedbacks.
     * @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FeedbackCreateManyArgs>(args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Feedbacks and returns the data saved in the database.
     * @param {FeedbackCreateManyAndReturnArgs} args - Arguments to create many Feedbacks.
     * @example
     * // Create many Feedbacks
     * const feedback = await prisma.feedback.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FeedbackCreateManyAndReturnArgs>(args?: SelectSubset<T, FeedbackCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
     */
    delete<T extends FeedbackDeleteArgs>(args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FeedbackUpdateArgs>(args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FeedbackDeleteManyArgs>(args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FeedbackUpdateManyArgs>(args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks and returns the data updated in the database.
     * @param {FeedbackUpdateManyAndReturnArgs} args - Arguments to update many Feedbacks.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Feedbacks and only return the `id`
     * const feedbackWithIdOnly = await prisma.feedback.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FeedbackUpdateManyAndReturnArgs>(args: SelectSubset<T, FeedbackUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
     */
    upsert<T extends FeedbackUpsertArgs>(args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Feedback model
   */
  interface FeedbackFieldRefs {
    readonly id: FieldRef<"Feedback", 'String'>
    readonly name: FieldRef<"Feedback", 'String'>
    readonly email: FieldRef<"Feedback", 'String'>
    readonly subject: FieldRef<"Feedback", 'String'>
    readonly details: FieldRef<"Feedback", 'String'>
    readonly attach: FieldRef<"Feedback", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }

  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }

  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback createManyAndReturn
   */
  export type FeedbackCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback updateManyAndReturn
   */
  export type FeedbackUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to update.
     */
    limit?: number
  }

  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }

  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }

  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
    /**
     * Limit how many Feedbacks to delete.
     */
    limit?: number
  }

  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Feedback
     */
    omit?: FeedbackOmit<ExtArgs> | null
  }


  /**
   * Model ResponseTracker
   */

  export type AggregateResponseTracker = {
    _count: ResponseTrackerCountAggregateOutputType | null
    _avg: ResponseTrackerAvgAggregateOutputType | null
    _sum: ResponseTrackerSumAggregateOutputType | null
    _min: ResponseTrackerMinAggregateOutputType | null
    _max: ResponseTrackerMaxAggregateOutputType | null
  }

  export type ResponseTrackerAvgAggregateOutputType = {
    responseType: number | null
  }

  export type ResponseTrackerSumAggregateOutputType = {
    responseType: number | null
  }

  export type ResponseTrackerMinAggregateOutputType = {
    id: string | null
    proofId: string | null
    responseType: number | null
    responseMsg: string | null
    userId: string | null
  }

  export type ResponseTrackerMaxAggregateOutputType = {
    id: string | null
    proofId: string | null
    responseType: number | null
    responseMsg: string | null
    userId: string | null
  }

  export type ResponseTrackerCountAggregateOutputType = {
    id: number
    proofId: number
    responseType: number
    responseMsg: number
    userId: number
    _all: number
  }


  export type ResponseTrackerAvgAggregateInputType = {
    responseType?: true
  }

  export type ResponseTrackerSumAggregateInputType = {
    responseType?: true
  }

  export type ResponseTrackerMinAggregateInputType = {
    id?: true
    proofId?: true
    responseType?: true
    responseMsg?: true
    userId?: true
  }

  export type ResponseTrackerMaxAggregateInputType = {
    id?: true
    proofId?: true
    responseType?: true
    responseMsg?: true
    userId?: true
  }

  export type ResponseTrackerCountAggregateInputType = {
    id?: true
    proofId?: true
    responseType?: true
    responseMsg?: true
    userId?: true
    _all?: true
  }

  export type ResponseTrackerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResponseTracker to aggregate.
     */
    where?: ResponseTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResponseTrackers to fetch.
     */
    orderBy?: ResponseTrackerOrderByWithRelationInput | ResponseTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ResponseTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResponseTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResponseTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ResponseTrackers
    **/
    _count?: true | ResponseTrackerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ResponseTrackerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ResponseTrackerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ResponseTrackerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ResponseTrackerMaxAggregateInputType
  }

  export type GetResponseTrackerAggregateType<T extends ResponseTrackerAggregateArgs> = {
        [P in keyof T & keyof AggregateResponseTracker]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateResponseTracker[P]>
      : GetScalarType<T[P], AggregateResponseTracker[P]>
  }




  export type ResponseTrackerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ResponseTrackerWhereInput
    orderBy?: ResponseTrackerOrderByWithAggregationInput | ResponseTrackerOrderByWithAggregationInput[]
    by: ResponseTrackerScalarFieldEnum[] | ResponseTrackerScalarFieldEnum
    having?: ResponseTrackerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ResponseTrackerCountAggregateInputType | true
    _avg?: ResponseTrackerAvgAggregateInputType
    _sum?: ResponseTrackerSumAggregateInputType
    _min?: ResponseTrackerMinAggregateInputType
    _max?: ResponseTrackerMaxAggregateInputType
  }

  export type ResponseTrackerGroupByOutputType = {
    id: string
    proofId: string
    responseType: number | null
    responseMsg: string
    userId: string
    _count: ResponseTrackerCountAggregateOutputType | null
    _avg: ResponseTrackerAvgAggregateOutputType | null
    _sum: ResponseTrackerSumAggregateOutputType | null
    _min: ResponseTrackerMinAggregateOutputType | null
    _max: ResponseTrackerMaxAggregateOutputType | null
  }

  type GetResponseTrackerGroupByPayload<T extends ResponseTrackerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ResponseTrackerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ResponseTrackerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ResponseTrackerGroupByOutputType[P]>
            : GetScalarType<T[P], ResponseTrackerGroupByOutputType[P]>
        }
      >
    >


  export type ResponseTrackerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proofId?: boolean
    responseType?: boolean
    responseMsg?: boolean
    userId?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["responseTracker"]>

  export type ResponseTrackerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proofId?: boolean
    responseType?: boolean
    responseMsg?: boolean
    userId?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["responseTracker"]>

  export type ResponseTrackerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proofId?: boolean
    responseType?: boolean
    responseMsg?: boolean
    userId?: boolean
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["responseTracker"]>

  export type ResponseTrackerSelectScalar = {
    id?: boolean
    proofId?: boolean
    responseType?: boolean
    responseMsg?: boolean
    userId?: boolean
  }

  export type ResponseTrackerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "proofId" | "responseType" | "responseMsg" | "userId", ExtArgs["result"]["responseTracker"]>
  export type ResponseTrackerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResponseTrackerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ResponseTrackerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ResponseTrackerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ResponseTracker"
    objects: {
      proof: Prisma.$ProofPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      proofId: string
      responseType: number | null
      responseMsg: string
      userId: string
    }, ExtArgs["result"]["responseTracker"]>
    composites: {}
  }

  type ResponseTrackerGetPayload<S extends boolean | null | undefined | ResponseTrackerDefaultArgs> = $Result.GetResult<Prisma.$ResponseTrackerPayload, S>

  type ResponseTrackerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ResponseTrackerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ResponseTrackerCountAggregateInputType | true
    }

  export interface ResponseTrackerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ResponseTracker'], meta: { name: 'ResponseTracker' } }
    /**
     * Find zero or one ResponseTracker that matches the filter.
     * @param {ResponseTrackerFindUniqueArgs} args - Arguments to find a ResponseTracker
     * @example
     * // Get one ResponseTracker
     * const responseTracker = await prisma.responseTracker.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ResponseTrackerFindUniqueArgs>(args: SelectSubset<T, ResponseTrackerFindUniqueArgs<ExtArgs>>): Prisma__ResponseTrackerClient<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ResponseTracker that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ResponseTrackerFindUniqueOrThrowArgs} args - Arguments to find a ResponseTracker
     * @example
     * // Get one ResponseTracker
     * const responseTracker = await prisma.responseTracker.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ResponseTrackerFindUniqueOrThrowArgs>(args: SelectSubset<T, ResponseTrackerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ResponseTrackerClient<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResponseTracker that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseTrackerFindFirstArgs} args - Arguments to find a ResponseTracker
     * @example
     * // Get one ResponseTracker
     * const responseTracker = await prisma.responseTracker.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ResponseTrackerFindFirstArgs>(args?: SelectSubset<T, ResponseTrackerFindFirstArgs<ExtArgs>>): Prisma__ResponseTrackerClient<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ResponseTracker that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseTrackerFindFirstOrThrowArgs} args - Arguments to find a ResponseTracker
     * @example
     * // Get one ResponseTracker
     * const responseTracker = await prisma.responseTracker.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ResponseTrackerFindFirstOrThrowArgs>(args?: SelectSubset<T, ResponseTrackerFindFirstOrThrowArgs<ExtArgs>>): Prisma__ResponseTrackerClient<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ResponseTrackers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseTrackerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ResponseTrackers
     * const responseTrackers = await prisma.responseTracker.findMany()
     * 
     * // Get first 10 ResponseTrackers
     * const responseTrackers = await prisma.responseTracker.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const responseTrackerWithIdOnly = await prisma.responseTracker.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ResponseTrackerFindManyArgs>(args?: SelectSubset<T, ResponseTrackerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ResponseTracker.
     * @param {ResponseTrackerCreateArgs} args - Arguments to create a ResponseTracker.
     * @example
     * // Create one ResponseTracker
     * const ResponseTracker = await prisma.responseTracker.create({
     *   data: {
     *     // ... data to create a ResponseTracker
     *   }
     * })
     * 
     */
    create<T extends ResponseTrackerCreateArgs>(args: SelectSubset<T, ResponseTrackerCreateArgs<ExtArgs>>): Prisma__ResponseTrackerClient<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ResponseTrackers.
     * @param {ResponseTrackerCreateManyArgs} args - Arguments to create many ResponseTrackers.
     * @example
     * // Create many ResponseTrackers
     * const responseTracker = await prisma.responseTracker.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ResponseTrackerCreateManyArgs>(args?: SelectSubset<T, ResponseTrackerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ResponseTrackers and returns the data saved in the database.
     * @param {ResponseTrackerCreateManyAndReturnArgs} args - Arguments to create many ResponseTrackers.
     * @example
     * // Create many ResponseTrackers
     * const responseTracker = await prisma.responseTracker.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ResponseTrackers and only return the `id`
     * const responseTrackerWithIdOnly = await prisma.responseTracker.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ResponseTrackerCreateManyAndReturnArgs>(args?: SelectSubset<T, ResponseTrackerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ResponseTracker.
     * @param {ResponseTrackerDeleteArgs} args - Arguments to delete one ResponseTracker.
     * @example
     * // Delete one ResponseTracker
     * const ResponseTracker = await prisma.responseTracker.delete({
     *   where: {
     *     // ... filter to delete one ResponseTracker
     *   }
     * })
     * 
     */
    delete<T extends ResponseTrackerDeleteArgs>(args: SelectSubset<T, ResponseTrackerDeleteArgs<ExtArgs>>): Prisma__ResponseTrackerClient<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ResponseTracker.
     * @param {ResponseTrackerUpdateArgs} args - Arguments to update one ResponseTracker.
     * @example
     * // Update one ResponseTracker
     * const responseTracker = await prisma.responseTracker.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ResponseTrackerUpdateArgs>(args: SelectSubset<T, ResponseTrackerUpdateArgs<ExtArgs>>): Prisma__ResponseTrackerClient<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ResponseTrackers.
     * @param {ResponseTrackerDeleteManyArgs} args - Arguments to filter ResponseTrackers to delete.
     * @example
     * // Delete a few ResponseTrackers
     * const { count } = await prisma.responseTracker.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ResponseTrackerDeleteManyArgs>(args?: SelectSubset<T, ResponseTrackerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResponseTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseTrackerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ResponseTrackers
     * const responseTracker = await prisma.responseTracker.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ResponseTrackerUpdateManyArgs>(args: SelectSubset<T, ResponseTrackerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ResponseTrackers and returns the data updated in the database.
     * @param {ResponseTrackerUpdateManyAndReturnArgs} args - Arguments to update many ResponseTrackers.
     * @example
     * // Update many ResponseTrackers
     * const responseTracker = await prisma.responseTracker.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ResponseTrackers and only return the `id`
     * const responseTrackerWithIdOnly = await prisma.responseTracker.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ResponseTrackerUpdateManyAndReturnArgs>(args: SelectSubset<T, ResponseTrackerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ResponseTracker.
     * @param {ResponseTrackerUpsertArgs} args - Arguments to update or create a ResponseTracker.
     * @example
     * // Update or create a ResponseTracker
     * const responseTracker = await prisma.responseTracker.upsert({
     *   create: {
     *     // ... data to create a ResponseTracker
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ResponseTracker we want to update
     *   }
     * })
     */
    upsert<T extends ResponseTrackerUpsertArgs>(args: SelectSubset<T, ResponseTrackerUpsertArgs<ExtArgs>>): Prisma__ResponseTrackerClient<$Result.GetResult<Prisma.$ResponseTrackerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ResponseTrackers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseTrackerCountArgs} args - Arguments to filter ResponseTrackers to count.
     * @example
     * // Count the number of ResponseTrackers
     * const count = await prisma.responseTracker.count({
     *   where: {
     *     // ... the filter for the ResponseTrackers we want to count
     *   }
     * })
    **/
    count<T extends ResponseTrackerCountArgs>(
      args?: Subset<T, ResponseTrackerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ResponseTrackerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ResponseTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseTrackerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ResponseTrackerAggregateArgs>(args: Subset<T, ResponseTrackerAggregateArgs>): Prisma.PrismaPromise<GetResponseTrackerAggregateType<T>>

    /**
     * Group by ResponseTracker.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ResponseTrackerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ResponseTrackerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ResponseTrackerGroupByArgs['orderBy'] }
        : { orderBy?: ResponseTrackerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ResponseTrackerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetResponseTrackerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ResponseTracker model
   */
  readonly fields: ResponseTrackerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ResponseTracker.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ResponseTrackerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    proof<T extends ProofDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProofDefaultArgs<ExtArgs>>): Prisma__ProofClient<$Result.GetResult<Prisma.$ProofPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ResponseTracker model
   */
  interface ResponseTrackerFieldRefs {
    readonly id: FieldRef<"ResponseTracker", 'String'>
    readonly proofId: FieldRef<"ResponseTracker", 'String'>
    readonly responseType: FieldRef<"ResponseTracker", 'Int'>
    readonly responseMsg: FieldRef<"ResponseTracker", 'String'>
    readonly userId: FieldRef<"ResponseTracker", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ResponseTracker findUnique
   */
  export type ResponseTrackerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ResponseTracker to fetch.
     */
    where: ResponseTrackerWhereUniqueInput
  }

  /**
   * ResponseTracker findUniqueOrThrow
   */
  export type ResponseTrackerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ResponseTracker to fetch.
     */
    where: ResponseTrackerWhereUniqueInput
  }

  /**
   * ResponseTracker findFirst
   */
  export type ResponseTrackerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ResponseTracker to fetch.
     */
    where?: ResponseTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResponseTrackers to fetch.
     */
    orderBy?: ResponseTrackerOrderByWithRelationInput | ResponseTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResponseTrackers.
     */
    cursor?: ResponseTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResponseTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResponseTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResponseTrackers.
     */
    distinct?: ResponseTrackerScalarFieldEnum | ResponseTrackerScalarFieldEnum[]
  }

  /**
   * ResponseTracker findFirstOrThrow
   */
  export type ResponseTrackerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ResponseTracker to fetch.
     */
    where?: ResponseTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResponseTrackers to fetch.
     */
    orderBy?: ResponseTrackerOrderByWithRelationInput | ResponseTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ResponseTrackers.
     */
    cursor?: ResponseTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResponseTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResponseTrackers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ResponseTrackers.
     */
    distinct?: ResponseTrackerScalarFieldEnum | ResponseTrackerScalarFieldEnum[]
  }

  /**
   * ResponseTracker findMany
   */
  export type ResponseTrackerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * Filter, which ResponseTrackers to fetch.
     */
    where?: ResponseTrackerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ResponseTrackers to fetch.
     */
    orderBy?: ResponseTrackerOrderByWithRelationInput | ResponseTrackerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ResponseTrackers.
     */
    cursor?: ResponseTrackerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ResponseTrackers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ResponseTrackers.
     */
    skip?: number
    distinct?: ResponseTrackerScalarFieldEnum | ResponseTrackerScalarFieldEnum[]
  }

  /**
   * ResponseTracker create
   */
  export type ResponseTrackerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * The data needed to create a ResponseTracker.
     */
    data: XOR<ResponseTrackerCreateInput, ResponseTrackerUncheckedCreateInput>
  }

  /**
   * ResponseTracker createMany
   */
  export type ResponseTrackerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ResponseTrackers.
     */
    data: ResponseTrackerCreateManyInput | ResponseTrackerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ResponseTracker createManyAndReturn
   */
  export type ResponseTrackerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * The data used to create many ResponseTrackers.
     */
    data: ResponseTrackerCreateManyInput | ResponseTrackerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResponseTracker update
   */
  export type ResponseTrackerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * The data needed to update a ResponseTracker.
     */
    data: XOR<ResponseTrackerUpdateInput, ResponseTrackerUncheckedUpdateInput>
    /**
     * Choose, which ResponseTracker to update.
     */
    where: ResponseTrackerWhereUniqueInput
  }

  /**
   * ResponseTracker updateMany
   */
  export type ResponseTrackerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ResponseTrackers.
     */
    data: XOR<ResponseTrackerUpdateManyMutationInput, ResponseTrackerUncheckedUpdateManyInput>
    /**
     * Filter which ResponseTrackers to update
     */
    where?: ResponseTrackerWhereInput
    /**
     * Limit how many ResponseTrackers to update.
     */
    limit?: number
  }

  /**
   * ResponseTracker updateManyAndReturn
   */
  export type ResponseTrackerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * The data used to update ResponseTrackers.
     */
    data: XOR<ResponseTrackerUpdateManyMutationInput, ResponseTrackerUncheckedUpdateManyInput>
    /**
     * Filter which ResponseTrackers to update
     */
    where?: ResponseTrackerWhereInput
    /**
     * Limit how many ResponseTrackers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ResponseTracker upsert
   */
  export type ResponseTrackerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * The filter to search for the ResponseTracker to update in case it exists.
     */
    where: ResponseTrackerWhereUniqueInput
    /**
     * In case the ResponseTracker found by the `where` argument doesn't exist, create a new ResponseTracker with this data.
     */
    create: XOR<ResponseTrackerCreateInput, ResponseTrackerUncheckedCreateInput>
    /**
     * In case the ResponseTracker was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ResponseTrackerUpdateInput, ResponseTrackerUncheckedUpdateInput>
  }

  /**
   * ResponseTracker delete
   */
  export type ResponseTrackerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
    /**
     * Filter which ResponseTracker to delete.
     */
    where: ResponseTrackerWhereUniqueInput
  }

  /**
   * ResponseTracker deleteMany
   */
  export type ResponseTrackerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ResponseTrackers to delete
     */
    where?: ResponseTrackerWhereInput
    /**
     * Limit how many ResponseTrackers to delete.
     */
    limit?: number
  }

  /**
   * ResponseTracker without action
   */
  export type ResponseTrackerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ResponseTracker
     */
    select?: ResponseTrackerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ResponseTracker
     */
    omit?: ResponseTrackerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ResponseTrackerInclude<ExtArgs> | null
  }


  /**
   * Model AssignmentDelay
   */

  export type AggregateAssignmentDelay = {
    _count: AssignmentDelayCountAggregateOutputType | null
    _min: AssignmentDelayMinAggregateOutputType | null
    _max: AssignmentDelayMaxAggregateOutputType | null
  }

  export type AssignmentDelayMinAggregateOutputType = {
    id: string | null
    assignmentId: string | null
    studentId: string | null
    dueDate: Date | null
    submissionDate: Date | null
    status: string | null
  }

  export type AssignmentDelayMaxAggregateOutputType = {
    id: string | null
    assignmentId: string | null
    studentId: string | null
    dueDate: Date | null
    submissionDate: Date | null
    status: string | null
  }

  export type AssignmentDelayCountAggregateOutputType = {
    id: number
    assignmentId: number
    studentId: number
    dueDate: number
    submissionDate: number
    status: number
    _all: number
  }


  export type AssignmentDelayMinAggregateInputType = {
    id?: true
    assignmentId?: true
    studentId?: true
    dueDate?: true
    submissionDate?: true
    status?: true
  }

  export type AssignmentDelayMaxAggregateInputType = {
    id?: true
    assignmentId?: true
    studentId?: true
    dueDate?: true
    submissionDate?: true
    status?: true
  }

  export type AssignmentDelayCountAggregateInputType = {
    id?: true
    assignmentId?: true
    studentId?: true
    dueDate?: true
    submissionDate?: true
    status?: true
    _all?: true
  }

  export type AssignmentDelayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssignmentDelay to aggregate.
     */
    where?: AssignmentDelayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentDelays to fetch.
     */
    orderBy?: AssignmentDelayOrderByWithRelationInput | AssignmentDelayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AssignmentDelayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentDelays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentDelays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AssignmentDelays
    **/
    _count?: true | AssignmentDelayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AssignmentDelayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AssignmentDelayMaxAggregateInputType
  }

  export type GetAssignmentDelayAggregateType<T extends AssignmentDelayAggregateArgs> = {
        [P in keyof T & keyof AggregateAssignmentDelay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAssignmentDelay[P]>
      : GetScalarType<T[P], AggregateAssignmentDelay[P]>
  }




  export type AssignmentDelayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AssignmentDelayWhereInput
    orderBy?: AssignmentDelayOrderByWithAggregationInput | AssignmentDelayOrderByWithAggregationInput[]
    by: AssignmentDelayScalarFieldEnum[] | AssignmentDelayScalarFieldEnum
    having?: AssignmentDelayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AssignmentDelayCountAggregateInputType | true
    _min?: AssignmentDelayMinAggregateInputType
    _max?: AssignmentDelayMaxAggregateInputType
  }

  export type AssignmentDelayGroupByOutputType = {
    id: string
    assignmentId: string
    studentId: string
    dueDate: Date | null
    submissionDate: Date | null
    status: string
    _count: AssignmentDelayCountAggregateOutputType | null
    _min: AssignmentDelayMinAggregateOutputType | null
    _max: AssignmentDelayMaxAggregateOutputType | null
  }

  type GetAssignmentDelayGroupByPayload<T extends AssignmentDelayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AssignmentDelayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AssignmentDelayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AssignmentDelayGroupByOutputType[P]>
            : GetScalarType<T[P], AssignmentDelayGroupByOutputType[P]>
        }
      >
    >


  export type AssignmentDelaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentId?: boolean
    studentId?: boolean
    dueDate?: boolean
    submissionDate?: boolean
    status?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignmentDelay"]>

  export type AssignmentDelaySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentId?: boolean
    studentId?: boolean
    dueDate?: boolean
    submissionDate?: boolean
    status?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignmentDelay"]>

  export type AssignmentDelaySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    assignmentId?: boolean
    studentId?: boolean
    dueDate?: boolean
    submissionDate?: boolean
    status?: boolean
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["assignmentDelay"]>

  export type AssignmentDelaySelectScalar = {
    id?: boolean
    assignmentId?: boolean
    studentId?: boolean
    dueDate?: boolean
    submissionDate?: boolean
    status?: boolean
  }

  export type AssignmentDelayOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "assignmentId" | "studentId" | "dueDate" | "submissionDate" | "status", ExtArgs["result"]["assignmentDelay"]>
  export type AssignmentDelayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type AssignmentDelayIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }
  export type AssignmentDelayIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignment?: boolean | AssignmentDefaultArgs<ExtArgs>
    student?: boolean | StudentDefaultArgs<ExtArgs>
  }

  export type $AssignmentDelayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AssignmentDelay"
    objects: {
      assignment: Prisma.$AssignmentPayload<ExtArgs>
      student: Prisma.$StudentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      assignmentId: string
      studentId: string
      dueDate: Date | null
      submissionDate: Date | null
      status: string
    }, ExtArgs["result"]["assignmentDelay"]>
    composites: {}
  }

  type AssignmentDelayGetPayload<S extends boolean | null | undefined | AssignmentDelayDefaultArgs> = $Result.GetResult<Prisma.$AssignmentDelayPayload, S>

  type AssignmentDelayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AssignmentDelayFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AssignmentDelayCountAggregateInputType | true
    }

  export interface AssignmentDelayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AssignmentDelay'], meta: { name: 'AssignmentDelay' } }
    /**
     * Find zero or one AssignmentDelay that matches the filter.
     * @param {AssignmentDelayFindUniqueArgs} args - Arguments to find a AssignmentDelay
     * @example
     * // Get one AssignmentDelay
     * const assignmentDelay = await prisma.assignmentDelay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AssignmentDelayFindUniqueArgs>(args: SelectSubset<T, AssignmentDelayFindUniqueArgs<ExtArgs>>): Prisma__AssignmentDelayClient<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AssignmentDelay that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AssignmentDelayFindUniqueOrThrowArgs} args - Arguments to find a AssignmentDelay
     * @example
     * // Get one AssignmentDelay
     * const assignmentDelay = await prisma.assignmentDelay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AssignmentDelayFindUniqueOrThrowArgs>(args: SelectSubset<T, AssignmentDelayFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AssignmentDelayClient<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssignmentDelay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentDelayFindFirstArgs} args - Arguments to find a AssignmentDelay
     * @example
     * // Get one AssignmentDelay
     * const assignmentDelay = await prisma.assignmentDelay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AssignmentDelayFindFirstArgs>(args?: SelectSubset<T, AssignmentDelayFindFirstArgs<ExtArgs>>): Prisma__AssignmentDelayClient<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AssignmentDelay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentDelayFindFirstOrThrowArgs} args - Arguments to find a AssignmentDelay
     * @example
     * // Get one AssignmentDelay
     * const assignmentDelay = await prisma.assignmentDelay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AssignmentDelayFindFirstOrThrowArgs>(args?: SelectSubset<T, AssignmentDelayFindFirstOrThrowArgs<ExtArgs>>): Prisma__AssignmentDelayClient<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AssignmentDelays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentDelayFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AssignmentDelays
     * const assignmentDelays = await prisma.assignmentDelay.findMany()
     * 
     * // Get first 10 AssignmentDelays
     * const assignmentDelays = await prisma.assignmentDelay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const assignmentDelayWithIdOnly = await prisma.assignmentDelay.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AssignmentDelayFindManyArgs>(args?: SelectSubset<T, AssignmentDelayFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AssignmentDelay.
     * @param {AssignmentDelayCreateArgs} args - Arguments to create a AssignmentDelay.
     * @example
     * // Create one AssignmentDelay
     * const AssignmentDelay = await prisma.assignmentDelay.create({
     *   data: {
     *     // ... data to create a AssignmentDelay
     *   }
     * })
     * 
     */
    create<T extends AssignmentDelayCreateArgs>(args: SelectSubset<T, AssignmentDelayCreateArgs<ExtArgs>>): Prisma__AssignmentDelayClient<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AssignmentDelays.
     * @param {AssignmentDelayCreateManyArgs} args - Arguments to create many AssignmentDelays.
     * @example
     * // Create many AssignmentDelays
     * const assignmentDelay = await prisma.assignmentDelay.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AssignmentDelayCreateManyArgs>(args?: SelectSubset<T, AssignmentDelayCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AssignmentDelays and returns the data saved in the database.
     * @param {AssignmentDelayCreateManyAndReturnArgs} args - Arguments to create many AssignmentDelays.
     * @example
     * // Create many AssignmentDelays
     * const assignmentDelay = await prisma.assignmentDelay.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AssignmentDelays and only return the `id`
     * const assignmentDelayWithIdOnly = await prisma.assignmentDelay.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AssignmentDelayCreateManyAndReturnArgs>(args?: SelectSubset<T, AssignmentDelayCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AssignmentDelay.
     * @param {AssignmentDelayDeleteArgs} args - Arguments to delete one AssignmentDelay.
     * @example
     * // Delete one AssignmentDelay
     * const AssignmentDelay = await prisma.assignmentDelay.delete({
     *   where: {
     *     // ... filter to delete one AssignmentDelay
     *   }
     * })
     * 
     */
    delete<T extends AssignmentDelayDeleteArgs>(args: SelectSubset<T, AssignmentDelayDeleteArgs<ExtArgs>>): Prisma__AssignmentDelayClient<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AssignmentDelay.
     * @param {AssignmentDelayUpdateArgs} args - Arguments to update one AssignmentDelay.
     * @example
     * // Update one AssignmentDelay
     * const assignmentDelay = await prisma.assignmentDelay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AssignmentDelayUpdateArgs>(args: SelectSubset<T, AssignmentDelayUpdateArgs<ExtArgs>>): Prisma__AssignmentDelayClient<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AssignmentDelays.
     * @param {AssignmentDelayDeleteManyArgs} args - Arguments to filter AssignmentDelays to delete.
     * @example
     * // Delete a few AssignmentDelays
     * const { count } = await prisma.assignmentDelay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AssignmentDelayDeleteManyArgs>(args?: SelectSubset<T, AssignmentDelayDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssignmentDelays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentDelayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AssignmentDelays
     * const assignmentDelay = await prisma.assignmentDelay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AssignmentDelayUpdateManyArgs>(args: SelectSubset<T, AssignmentDelayUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AssignmentDelays and returns the data updated in the database.
     * @param {AssignmentDelayUpdateManyAndReturnArgs} args - Arguments to update many AssignmentDelays.
     * @example
     * // Update many AssignmentDelays
     * const assignmentDelay = await prisma.assignmentDelay.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AssignmentDelays and only return the `id`
     * const assignmentDelayWithIdOnly = await prisma.assignmentDelay.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AssignmentDelayUpdateManyAndReturnArgs>(args: SelectSubset<T, AssignmentDelayUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AssignmentDelay.
     * @param {AssignmentDelayUpsertArgs} args - Arguments to update or create a AssignmentDelay.
     * @example
     * // Update or create a AssignmentDelay
     * const assignmentDelay = await prisma.assignmentDelay.upsert({
     *   create: {
     *     // ... data to create a AssignmentDelay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AssignmentDelay we want to update
     *   }
     * })
     */
    upsert<T extends AssignmentDelayUpsertArgs>(args: SelectSubset<T, AssignmentDelayUpsertArgs<ExtArgs>>): Prisma__AssignmentDelayClient<$Result.GetResult<Prisma.$AssignmentDelayPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AssignmentDelays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentDelayCountArgs} args - Arguments to filter AssignmentDelays to count.
     * @example
     * // Count the number of AssignmentDelays
     * const count = await prisma.assignmentDelay.count({
     *   where: {
     *     // ... the filter for the AssignmentDelays we want to count
     *   }
     * })
    **/
    count<T extends AssignmentDelayCountArgs>(
      args?: Subset<T, AssignmentDelayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AssignmentDelayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AssignmentDelay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentDelayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AssignmentDelayAggregateArgs>(args: Subset<T, AssignmentDelayAggregateArgs>): Prisma.PrismaPromise<GetAssignmentDelayAggregateType<T>>

    /**
     * Group by AssignmentDelay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AssignmentDelayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AssignmentDelayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AssignmentDelayGroupByArgs['orderBy'] }
        : { orderBy?: AssignmentDelayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AssignmentDelayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAssignmentDelayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AssignmentDelay model
   */
  readonly fields: AssignmentDelayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AssignmentDelay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AssignmentDelayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignment<T extends AssignmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AssignmentDefaultArgs<ExtArgs>>): Prisma__AssignmentClient<$Result.GetResult<Prisma.$AssignmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    student<T extends StudentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentDefaultArgs<ExtArgs>>): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AssignmentDelay model
   */
  interface AssignmentDelayFieldRefs {
    readonly id: FieldRef<"AssignmentDelay", 'String'>
    readonly assignmentId: FieldRef<"AssignmentDelay", 'String'>
    readonly studentId: FieldRef<"AssignmentDelay", 'String'>
    readonly dueDate: FieldRef<"AssignmentDelay", 'DateTime'>
    readonly submissionDate: FieldRef<"AssignmentDelay", 'DateTime'>
    readonly status: FieldRef<"AssignmentDelay", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AssignmentDelay findUnique
   */
  export type AssignmentDelayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentDelay to fetch.
     */
    where: AssignmentDelayWhereUniqueInput
  }

  /**
   * AssignmentDelay findUniqueOrThrow
   */
  export type AssignmentDelayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentDelay to fetch.
     */
    where: AssignmentDelayWhereUniqueInput
  }

  /**
   * AssignmentDelay findFirst
   */
  export type AssignmentDelayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentDelay to fetch.
     */
    where?: AssignmentDelayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentDelays to fetch.
     */
    orderBy?: AssignmentDelayOrderByWithRelationInput | AssignmentDelayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssignmentDelays.
     */
    cursor?: AssignmentDelayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentDelays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentDelays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssignmentDelays.
     */
    distinct?: AssignmentDelayScalarFieldEnum | AssignmentDelayScalarFieldEnum[]
  }

  /**
   * AssignmentDelay findFirstOrThrow
   */
  export type AssignmentDelayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentDelay to fetch.
     */
    where?: AssignmentDelayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentDelays to fetch.
     */
    orderBy?: AssignmentDelayOrderByWithRelationInput | AssignmentDelayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AssignmentDelays.
     */
    cursor?: AssignmentDelayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentDelays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentDelays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AssignmentDelays.
     */
    distinct?: AssignmentDelayScalarFieldEnum | AssignmentDelayScalarFieldEnum[]
  }

  /**
   * AssignmentDelay findMany
   */
  export type AssignmentDelayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * Filter, which AssignmentDelays to fetch.
     */
    where?: AssignmentDelayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AssignmentDelays to fetch.
     */
    orderBy?: AssignmentDelayOrderByWithRelationInput | AssignmentDelayOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AssignmentDelays.
     */
    cursor?: AssignmentDelayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AssignmentDelays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AssignmentDelays.
     */
    skip?: number
    distinct?: AssignmentDelayScalarFieldEnum | AssignmentDelayScalarFieldEnum[]
  }

  /**
   * AssignmentDelay create
   */
  export type AssignmentDelayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * The data needed to create a AssignmentDelay.
     */
    data: XOR<AssignmentDelayCreateInput, AssignmentDelayUncheckedCreateInput>
  }

  /**
   * AssignmentDelay createMany
   */
  export type AssignmentDelayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AssignmentDelays.
     */
    data: AssignmentDelayCreateManyInput | AssignmentDelayCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AssignmentDelay createManyAndReturn
   */
  export type AssignmentDelayCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * The data used to create many AssignmentDelays.
     */
    data: AssignmentDelayCreateManyInput | AssignmentDelayCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssignmentDelay update
   */
  export type AssignmentDelayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * The data needed to update a AssignmentDelay.
     */
    data: XOR<AssignmentDelayUpdateInput, AssignmentDelayUncheckedUpdateInput>
    /**
     * Choose, which AssignmentDelay to update.
     */
    where: AssignmentDelayWhereUniqueInput
  }

  /**
   * AssignmentDelay updateMany
   */
  export type AssignmentDelayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AssignmentDelays.
     */
    data: XOR<AssignmentDelayUpdateManyMutationInput, AssignmentDelayUncheckedUpdateManyInput>
    /**
     * Filter which AssignmentDelays to update
     */
    where?: AssignmentDelayWhereInput
    /**
     * Limit how many AssignmentDelays to update.
     */
    limit?: number
  }

  /**
   * AssignmentDelay updateManyAndReturn
   */
  export type AssignmentDelayUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * The data used to update AssignmentDelays.
     */
    data: XOR<AssignmentDelayUpdateManyMutationInput, AssignmentDelayUncheckedUpdateManyInput>
    /**
     * Filter which AssignmentDelays to update
     */
    where?: AssignmentDelayWhereInput
    /**
     * Limit how many AssignmentDelays to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AssignmentDelay upsert
   */
  export type AssignmentDelayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * The filter to search for the AssignmentDelay to update in case it exists.
     */
    where: AssignmentDelayWhereUniqueInput
    /**
     * In case the AssignmentDelay found by the `where` argument doesn't exist, create a new AssignmentDelay with this data.
     */
    create: XOR<AssignmentDelayCreateInput, AssignmentDelayUncheckedCreateInput>
    /**
     * In case the AssignmentDelay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AssignmentDelayUpdateInput, AssignmentDelayUncheckedUpdateInput>
  }

  /**
   * AssignmentDelay delete
   */
  export type AssignmentDelayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
    /**
     * Filter which AssignmentDelay to delete.
     */
    where: AssignmentDelayWhereUniqueInput
  }

  /**
   * AssignmentDelay deleteMany
   */
  export type AssignmentDelayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AssignmentDelays to delete
     */
    where?: AssignmentDelayWhereInput
    /**
     * Limit how many AssignmentDelays to delete.
     */
    limit?: number
  }

  /**
   * AssignmentDelay without action
   */
  export type AssignmentDelayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AssignmentDelay
     */
    select?: AssignmentDelaySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AssignmentDelay
     */
    omit?: AssignmentDelayOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AssignmentDelayInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "refresh_token" | "access_token" | "expires_at" | "token_type" | "scope" | "id_token" | "session_state", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }

  export type VerificationTokenOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"identifier" | "token" | "expires", ExtArgs["result"]["verificationToken"]>

  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }

  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationTokenFindUniqueArgs>(args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one VerificationToken that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationTokenFindFirstArgs>(args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
     */
    findMany<T extends VerificationTokenFindManyArgs>(args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
     */
    create<T extends VerificationTokenCreateArgs>(args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many VerificationTokens.
     * @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationTokenCreateManyArgs>(args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many VerificationTokens and returns the data saved in the database.
     * @param {VerificationTokenCreateManyAndReturnArgs} args - Arguments to create many VerificationTokens.
     * @example
     * // Create many VerificationTokens
     * const verificationToken = await prisma.verificationToken.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.createManyAndReturn({
     *   select: { identifier: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VerificationTokenCreateManyAndReturnArgs>(args?: SelectSubset<T, VerificationTokenCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
     */
    delete<T extends VerificationTokenDeleteArgs>(args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationTokenUpdateArgs>(args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationTokenDeleteManyArgs>(args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationTokenUpdateManyArgs>(args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens and returns the data updated in the database.
     * @param {VerificationTokenUpdateManyAndReturnArgs} args - Arguments to update many VerificationTokens.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more VerificationTokens and only return the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.updateManyAndReturn({
     *   select: { identifier: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VerificationTokenUpdateManyAndReturnArgs>(args: SelectSubset<T, VerificationTokenUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
     */
    upsert<T extends VerificationTokenUpsertArgs>(args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the VerificationToken model
   */
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken createManyAndReturn
   */
  export type VerificationTokenCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken updateManyAndReturn
   */
  export type VerificationTokenUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to update.
     */
    limit?: number
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
    /**
     * Limit how many VerificationTokens to delete.
     */
    limit?: number
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Omit specific fields from the VerificationToken
     */
    omit?: VerificationTokenOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    username: 'username',
    hashedPassword: 'hashedPassword',
    isStudent: 'isStudent',
    isInstructor: 'isInstructor',
    isAdmin: 'isAdmin',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    userId: 'userId',
    imageUrl: 'imageUrl',
    mobile: 'mobile',
    bio: 'bio',
    dob: 'dob'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const InstructorScalarFieldEnum: {
    userId: 'userId',
    imageUrl: 'imageUrl',
    mobile: 'mobile',
    bio: 'bio',
    dob: 'dob'
  };

  export type InstructorScalarFieldEnum = (typeof InstructorScalarFieldEnum)[keyof typeof InstructorScalarFieldEnum]


  export const ProofScalarFieldEnum: {
    id: 'id',
    name: 'name',
    rules: 'rules',
    premises: 'premises',
    conclusion: 'conclusion',
    createdById: 'createdById',
    complete: 'complete',
    lemmasAllowed: 'lemmasAllowed',
    disproofString: 'disproofString',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted'
  };

  export type ProofScalarFieldEnum = (typeof ProofScalarFieldEnum)[keyof typeof ProofScalarFieldEnum]


  export const ProofLineScalarFieldEnum: {
    id: 'id',
    proofId: 'proofId',
    lineNo: 'lineNo',
    formula: 'formula',
    rule: 'rule',
    order: 'order',
    comment: 'comment',
    response: 'response',
    depth: 'depth',
    refs: 'refs'
  };

  export type ProofLineScalarFieldEnum = (typeof ProofLineScalarFieldEnum)[keyof typeof ProofLineScalarFieldEnum]


  export const ProblemScalarFieldEnum: {
    id: 'id',
    question: 'question',
    point: 'point',
    targetSteps: 'targetSteps',
    lostPoints: 'lostPoints',
    proofId: 'proofId',
    lemmasAllowed: 'lemmasAllowed',
    showTargetSteps: 'showTargetSteps'
  };

  export type ProblemScalarFieldEnum = (typeof ProblemScalarFieldEnum)[keyof typeof ProblemScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    term: 'term',
    section: 'section',
    instructorId: 'instructorId'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const AssignmentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    createdById: 'createdById',
    createdOn: 'createdOn',
    startDate: 'startDate',
    dueBy: 'dueBy',
    resubmissions: 'resubmissions',
    courseId: 'courseId',
    isSubmitted: 'isSubmitted',
    isLateSubmitted: 'isLateSubmitted',
    isLateSubmittedDate: 'isLateSubmittedDate'
  };

  export type AssignmentScalarFieldEnum = (typeof AssignmentScalarFieldEnum)[keyof typeof AssignmentScalarFieldEnum]


  export const StudentProblemSolutionScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    assignmentId: 'assignmentId',
    problemId: 'problemId',
    proofId: 'proofId',
    submittedOn: 'submittedOn',
    grade: 'grade'
  };

  export type StudentProblemSolutionScalarFieldEnum = (typeof StudentProblemSolutionScalarFieldEnum)[keyof typeof StudentProblemSolutionScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    subject: 'subject',
    details: 'details',
    attach: 'attach'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const ResponseTrackerScalarFieldEnum: {
    id: 'id',
    proofId: 'proofId',
    responseType: 'responseType',
    responseMsg: 'responseMsg',
    userId: 'userId'
  };

  export type ResponseTrackerScalarFieldEnum = (typeof ResponseTrackerScalarFieldEnum)[keyof typeof ResponseTrackerScalarFieldEnum]


  export const AssignmentDelayScalarFieldEnum: {
    id: 'id',
    assignmentId: 'assignmentId',
    studentId: 'studentId',
    dueDate: 'dueDate',
    submissionDate: 'submissionDate',
    status: 'status'
  };

  export type AssignmentDelayScalarFieldEnum = (typeof AssignmentDelayScalarFieldEnum)[keyof typeof AssignmentDelayScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    hashedPassword?: StringFilter<"User"> | string
    isStudent?: BoolFilter<"User"> | boolean
    isInstructor?: BoolFilter<"User"> | boolean
    isAdmin?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    instructor?: XOR<InstructorNullableScalarRelationFilter, InstructorWhereInput> | null
    proofs?: ProofListRelationFilter
    responses?: ResponseTrackerListRelationFilter
    sessions?: SessionListRelationFilter
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    isStudent?: SortOrder
    isInstructor?: SortOrder
    isAdmin?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    instructor?: InstructorOrderByWithRelationInput
    proofs?: ProofOrderByRelationAggregateInput
    responses?: ResponseTrackerOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    student?: StudentOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    hashedPassword?: StringFilter<"User"> | string
    isStudent?: BoolFilter<"User"> | boolean
    isInstructor?: BoolFilter<"User"> | boolean
    isAdmin?: BoolFilter<"User"> | boolean
    isActive?: BoolFilter<"User"> | boolean
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    accounts?: AccountListRelationFilter
    instructor?: XOR<InstructorNullableScalarRelationFilter, InstructorWhereInput> | null
    proofs?: ProofListRelationFilter
    responses?: ResponseTrackerListRelationFilter
    sessions?: SessionListRelationFilter
    student?: XOR<StudentNullableScalarRelationFilter, StudentWhereInput> | null
  }, "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    isStudent?: SortOrder
    isInstructor?: SortOrder
    isAdmin?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    hashedPassword?: StringWithAggregatesFilter<"User"> | string
    isStudent?: BoolWithAggregatesFilter<"User"> | boolean
    isInstructor?: BoolWithAggregatesFilter<"User"> | boolean
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    userId?: StringFilter<"Student"> | string
    imageUrl?: StringNullableFilter<"Student"> | string | null
    mobile?: StringNullableFilter<"Student"> | string | null
    bio?: StringNullableFilter<"Student"> | string | null
    dob?: DateTimeNullableFilter<"Student"> | Date | string | null
    delays?: AssignmentDelayListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    solutions?: StudentProblemSolutionListRelationFilter
    courses?: CourseListRelationFilter
  }

  export type StudentOrderByWithRelationInput = {
    userId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    delays?: AssignmentDelayOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    solutions?: StudentProblemSolutionOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    imageUrl?: StringNullableFilter<"Student"> | string | null
    mobile?: StringNullableFilter<"Student"> | string | null
    bio?: StringNullableFilter<"Student"> | string | null
    dob?: DateTimeNullableFilter<"Student"> | Date | string | null
    delays?: AssignmentDelayListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    solutions?: StudentProblemSolutionListRelationFilter
    courses?: CourseListRelationFilter
  }, "userId">

  export type StudentOrderByWithAggregationInput = {
    userId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    _count?: StudentCountOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Student"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Student"> | string | null
    mobile?: StringNullableWithAggregatesFilter<"Student"> | string | null
    bio?: StringNullableWithAggregatesFilter<"Student"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"Student"> | Date | string | null
  }

  export type InstructorWhereInput = {
    AND?: InstructorWhereInput | InstructorWhereInput[]
    OR?: InstructorWhereInput[]
    NOT?: InstructorWhereInput | InstructorWhereInput[]
    userId?: StringFilter<"Instructor"> | string
    imageUrl?: StringNullableFilter<"Instructor"> | string | null
    mobile?: StringNullableFilter<"Instructor"> | string | null
    bio?: StringNullableFilter<"Instructor"> | string | null
    dob?: DateTimeNullableFilter<"Instructor"> | Date | string | null
    assignments?: AssignmentListRelationFilter
    courses?: CourseListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type InstructorOrderByWithRelationInput = {
    userId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    assignments?: AssignmentOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type InstructorWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: InstructorWhereInput | InstructorWhereInput[]
    OR?: InstructorWhereInput[]
    NOT?: InstructorWhereInput | InstructorWhereInput[]
    imageUrl?: StringNullableFilter<"Instructor"> | string | null
    mobile?: StringNullableFilter<"Instructor"> | string | null
    bio?: StringNullableFilter<"Instructor"> | string | null
    dob?: DateTimeNullableFilter<"Instructor"> | Date | string | null
    assignments?: AssignmentListRelationFilter
    courses?: CourseListRelationFilter
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId">

  export type InstructorOrderByWithAggregationInput = {
    userId?: SortOrder
    imageUrl?: SortOrderInput | SortOrder
    mobile?: SortOrderInput | SortOrder
    bio?: SortOrderInput | SortOrder
    dob?: SortOrderInput | SortOrder
    _count?: InstructorCountOrderByAggregateInput
    _max?: InstructorMaxOrderByAggregateInput
    _min?: InstructorMinOrderByAggregateInput
  }

  export type InstructorScalarWhereWithAggregatesInput = {
    AND?: InstructorScalarWhereWithAggregatesInput | InstructorScalarWhereWithAggregatesInput[]
    OR?: InstructorScalarWhereWithAggregatesInput[]
    NOT?: InstructorScalarWhereWithAggregatesInput | InstructorScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Instructor"> | string
    imageUrl?: StringNullableWithAggregatesFilter<"Instructor"> | string | null
    mobile?: StringNullableWithAggregatesFilter<"Instructor"> | string | null
    bio?: StringNullableWithAggregatesFilter<"Instructor"> | string | null
    dob?: DateTimeNullableWithAggregatesFilter<"Instructor"> | Date | string | null
  }

  export type ProofWhereInput = {
    AND?: ProofWhereInput | ProofWhereInput[]
    OR?: ProofWhereInput[]
    NOT?: ProofWhereInput | ProofWhereInput[]
    id?: StringFilter<"Proof"> | string
    name?: StringNullableFilter<"Proof"> | string | null
    rules?: StringFilter<"Proof"> | string
    premises?: StringNullableFilter<"Proof"> | string | null
    conclusion?: StringFilter<"Proof"> | string
    createdById?: StringFilter<"Proof"> | string
    complete?: BoolFilter<"Proof"> | boolean
    lemmasAllowed?: BoolFilter<"Proof"> | boolean
    disproofString?: StringNullableFilter<"Proof"> | string | null
    createdAt?: DateTimeFilter<"Proof"> | Date | string
    updatedAt?: DateTimeFilter<"Proof"> | Date | string
    isDeleted?: BoolFilter<"Proof"> | boolean
    problem?: XOR<ProblemNullableScalarRelationFilter, ProblemWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    lines?: ProofLineListRelationFilter
    responses?: ResponseTrackerListRelationFilter
    studentSolution?: XOR<StudentProblemSolutionNullableScalarRelationFilter, StudentProblemSolutionWhereInput> | null
  }

  export type ProofOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    rules?: SortOrder
    premises?: SortOrderInput | SortOrder
    conclusion?: SortOrder
    createdById?: SortOrder
    complete?: SortOrder
    lemmasAllowed?: SortOrder
    disproofString?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    problem?: ProblemOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    lines?: ProofLineOrderByRelationAggregateInput
    responses?: ResponseTrackerOrderByRelationAggregateInput
    studentSolution?: StudentProblemSolutionOrderByWithRelationInput
  }

  export type ProofWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProofWhereInput | ProofWhereInput[]
    OR?: ProofWhereInput[]
    NOT?: ProofWhereInput | ProofWhereInput[]
    name?: StringNullableFilter<"Proof"> | string | null
    rules?: StringFilter<"Proof"> | string
    premises?: StringNullableFilter<"Proof"> | string | null
    conclusion?: StringFilter<"Proof"> | string
    createdById?: StringFilter<"Proof"> | string
    complete?: BoolFilter<"Proof"> | boolean
    lemmasAllowed?: BoolFilter<"Proof"> | boolean
    disproofString?: StringNullableFilter<"Proof"> | string | null
    createdAt?: DateTimeFilter<"Proof"> | Date | string
    updatedAt?: DateTimeFilter<"Proof"> | Date | string
    isDeleted?: BoolFilter<"Proof"> | boolean
    problem?: XOR<ProblemNullableScalarRelationFilter, ProblemWhereInput> | null
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    lines?: ProofLineListRelationFilter
    responses?: ResponseTrackerListRelationFilter
    studentSolution?: XOR<StudentProblemSolutionNullableScalarRelationFilter, StudentProblemSolutionWhereInput> | null
  }, "id">

  export type ProofOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    rules?: SortOrder
    premises?: SortOrderInput | SortOrder
    conclusion?: SortOrder
    createdById?: SortOrder
    complete?: SortOrder
    lemmasAllowed?: SortOrder
    disproofString?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    _count?: ProofCountOrderByAggregateInput
    _max?: ProofMaxOrderByAggregateInput
    _min?: ProofMinOrderByAggregateInput
  }

  export type ProofScalarWhereWithAggregatesInput = {
    AND?: ProofScalarWhereWithAggregatesInput | ProofScalarWhereWithAggregatesInput[]
    OR?: ProofScalarWhereWithAggregatesInput[]
    NOT?: ProofScalarWhereWithAggregatesInput | ProofScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Proof"> | string
    name?: StringNullableWithAggregatesFilter<"Proof"> | string | null
    rules?: StringWithAggregatesFilter<"Proof"> | string
    premises?: StringNullableWithAggregatesFilter<"Proof"> | string | null
    conclusion?: StringWithAggregatesFilter<"Proof"> | string
    createdById?: StringWithAggregatesFilter<"Proof"> | string
    complete?: BoolWithAggregatesFilter<"Proof"> | boolean
    lemmasAllowed?: BoolWithAggregatesFilter<"Proof"> | boolean
    disproofString?: StringNullableWithAggregatesFilter<"Proof"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Proof"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Proof"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"Proof"> | boolean
  }

  export type ProofLineWhereInput = {
    AND?: ProofLineWhereInput | ProofLineWhereInput[]
    OR?: ProofLineWhereInput[]
    NOT?: ProofLineWhereInput | ProofLineWhereInput[]
    id?: StringFilter<"ProofLine"> | string
    proofId?: StringFilter<"ProofLine"> | string
    lineNo?: StringFilter<"ProofLine"> | string
    formula?: StringNullableFilter<"ProofLine"> | string | null
    rule?: StringNullableFilter<"ProofLine"> | string | null
    order?: IntNullableFilter<"ProofLine"> | number | null
    comment?: StringNullableFilter<"ProofLine"> | string | null
    response?: StringNullableFilter<"ProofLine"> | string | null
    depth?: IntFilter<"ProofLine"> | number
    refs?: StringNullableListFilter<"ProofLine">
    proof?: XOR<ProofScalarRelationFilter, ProofWhereInput>
  }

  export type ProofLineOrderByWithRelationInput = {
    id?: SortOrder
    proofId?: SortOrder
    lineNo?: SortOrder
    formula?: SortOrderInput | SortOrder
    rule?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    response?: SortOrderInput | SortOrder
    depth?: SortOrder
    refs?: SortOrder
    proof?: ProofOrderByWithRelationInput
  }

  export type ProofLineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProofLineWhereInput | ProofLineWhereInput[]
    OR?: ProofLineWhereInput[]
    NOT?: ProofLineWhereInput | ProofLineWhereInput[]
    proofId?: StringFilter<"ProofLine"> | string
    lineNo?: StringFilter<"ProofLine"> | string
    formula?: StringNullableFilter<"ProofLine"> | string | null
    rule?: StringNullableFilter<"ProofLine"> | string | null
    order?: IntNullableFilter<"ProofLine"> | number | null
    comment?: StringNullableFilter<"ProofLine"> | string | null
    response?: StringNullableFilter<"ProofLine"> | string | null
    depth?: IntFilter<"ProofLine"> | number
    refs?: StringNullableListFilter<"ProofLine">
    proof?: XOR<ProofScalarRelationFilter, ProofWhereInput>
  }, "id">

  export type ProofLineOrderByWithAggregationInput = {
    id?: SortOrder
    proofId?: SortOrder
    lineNo?: SortOrder
    formula?: SortOrderInput | SortOrder
    rule?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    comment?: SortOrderInput | SortOrder
    response?: SortOrderInput | SortOrder
    depth?: SortOrder
    refs?: SortOrder
    _count?: ProofLineCountOrderByAggregateInput
    _avg?: ProofLineAvgOrderByAggregateInput
    _max?: ProofLineMaxOrderByAggregateInput
    _min?: ProofLineMinOrderByAggregateInput
    _sum?: ProofLineSumOrderByAggregateInput
  }

  export type ProofLineScalarWhereWithAggregatesInput = {
    AND?: ProofLineScalarWhereWithAggregatesInput | ProofLineScalarWhereWithAggregatesInput[]
    OR?: ProofLineScalarWhereWithAggregatesInput[]
    NOT?: ProofLineScalarWhereWithAggregatesInput | ProofLineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProofLine"> | string
    proofId?: StringWithAggregatesFilter<"ProofLine"> | string
    lineNo?: StringWithAggregatesFilter<"ProofLine"> | string
    formula?: StringNullableWithAggregatesFilter<"ProofLine"> | string | null
    rule?: StringNullableWithAggregatesFilter<"ProofLine"> | string | null
    order?: IntNullableWithAggregatesFilter<"ProofLine"> | number | null
    comment?: StringNullableWithAggregatesFilter<"ProofLine"> | string | null
    response?: StringNullableWithAggregatesFilter<"ProofLine"> | string | null
    depth?: IntWithAggregatesFilter<"ProofLine"> | number
    refs?: StringNullableListFilter<"ProofLine">
  }

  export type ProblemWhereInput = {
    AND?: ProblemWhereInput | ProblemWhereInput[]
    OR?: ProblemWhereInput[]
    NOT?: ProblemWhereInput | ProblemWhereInput[]
    id?: StringFilter<"Problem"> | string
    question?: StringFilter<"Problem"> | string
    point?: DecimalFilter<"Problem"> | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFilter<"Problem"> | number
    lostPoints?: IntFilter<"Problem"> | number
    proofId?: StringFilter<"Problem"> | string
    lemmasAllowed?: BoolFilter<"Problem"> | boolean
    showTargetSteps?: BoolFilter<"Problem"> | boolean
    proof?: XOR<ProofScalarRelationFilter, ProofWhereInput>
    solutions?: StudentProblemSolutionListRelationFilter
    assignments?: AssignmentListRelationFilter
  }

  export type ProblemOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    point?: SortOrder
    targetSteps?: SortOrder
    lostPoints?: SortOrder
    proofId?: SortOrder
    lemmasAllowed?: SortOrder
    showTargetSteps?: SortOrder
    proof?: ProofOrderByWithRelationInput
    solutions?: StudentProblemSolutionOrderByRelationAggregateInput
    assignments?: AssignmentOrderByRelationAggregateInput
  }

  export type ProblemWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    proofId?: string
    AND?: ProblemWhereInput | ProblemWhereInput[]
    OR?: ProblemWhereInput[]
    NOT?: ProblemWhereInput | ProblemWhereInput[]
    question?: StringFilter<"Problem"> | string
    point?: DecimalFilter<"Problem"> | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFilter<"Problem"> | number
    lostPoints?: IntFilter<"Problem"> | number
    lemmasAllowed?: BoolFilter<"Problem"> | boolean
    showTargetSteps?: BoolFilter<"Problem"> | boolean
    proof?: XOR<ProofScalarRelationFilter, ProofWhereInput>
    solutions?: StudentProblemSolutionListRelationFilter
    assignments?: AssignmentListRelationFilter
  }, "id" | "proofId">

  export type ProblemOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    point?: SortOrder
    targetSteps?: SortOrder
    lostPoints?: SortOrder
    proofId?: SortOrder
    lemmasAllowed?: SortOrder
    showTargetSteps?: SortOrder
    _count?: ProblemCountOrderByAggregateInput
    _avg?: ProblemAvgOrderByAggregateInput
    _max?: ProblemMaxOrderByAggregateInput
    _min?: ProblemMinOrderByAggregateInput
    _sum?: ProblemSumOrderByAggregateInput
  }

  export type ProblemScalarWhereWithAggregatesInput = {
    AND?: ProblemScalarWhereWithAggregatesInput | ProblemScalarWhereWithAggregatesInput[]
    OR?: ProblemScalarWhereWithAggregatesInput[]
    NOT?: ProblemScalarWhereWithAggregatesInput | ProblemScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Problem"> | string
    question?: StringWithAggregatesFilter<"Problem"> | string
    point?: DecimalWithAggregatesFilter<"Problem"> | Decimal | DecimalJsLike | number | string
    targetSteps?: IntWithAggregatesFilter<"Problem"> | number
    lostPoints?: IntWithAggregatesFilter<"Problem"> | number
    proofId?: StringWithAggregatesFilter<"Problem"> | string
    lemmasAllowed?: BoolWithAggregatesFilter<"Problem"> | boolean
    showTargetSteps?: BoolWithAggregatesFilter<"Problem"> | boolean
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: StringFilter<"Course"> | string
    title?: StringFilter<"Course"> | string
    term?: StringFilter<"Course"> | string
    section?: IntFilter<"Course"> | number
    instructorId?: StringFilter<"Course"> | string
    assignments?: AssignmentListRelationFilter
    instructor?: XOR<InstructorScalarRelationFilter, InstructorWhereInput>
    students?: StudentListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    term?: SortOrder
    section?: SortOrder
    instructorId?: SortOrder
    assignments?: AssignmentOrderByRelationAggregateInput
    instructor?: InstructorOrderByWithRelationInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    title?: StringFilter<"Course"> | string
    term?: StringFilter<"Course"> | string
    section?: IntFilter<"Course"> | number
    instructorId?: StringFilter<"Course"> | string
    assignments?: AssignmentListRelationFilter
    instructor?: XOR<InstructorScalarRelationFilter, InstructorWhereInput>
    students?: StudentListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    term?: SortOrder
    section?: SortOrder
    instructorId?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Course"> | string
    title?: StringWithAggregatesFilter<"Course"> | string
    term?: StringWithAggregatesFilter<"Course"> | string
    section?: IntWithAggregatesFilter<"Course"> | number
    instructorId?: StringWithAggregatesFilter<"Course"> | string
  }

  export type AssignmentWhereInput = {
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    id?: StringFilter<"Assignment"> | string
    title?: StringNullableFilter<"Assignment"> | string | null
    createdById?: StringNullableFilter<"Assignment"> | string | null
    createdOn?: DateTimeFilter<"Assignment"> | Date | string
    startDate?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    dueBy?: DateTimeFilter<"Assignment"> | Date | string
    resubmissions?: IntNullableFilter<"Assignment"> | number | null
    courseId?: StringFilter<"Assignment"> | string
    isSubmitted?: BoolFilter<"Assignment"> | boolean
    isLateSubmitted?: BoolFilter<"Assignment"> | boolean
    isLateSubmittedDate?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    createdBy?: XOR<InstructorNullableScalarRelationFilter, InstructorWhereInput> | null
    delays?: AssignmentDelayListRelationFilter
    solutions?: StudentProblemSolutionListRelationFilter
    problems?: ProblemListRelationFilter
  }

  export type AssignmentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    createdOn?: SortOrder
    startDate?: SortOrderInput | SortOrder
    dueBy?: SortOrder
    resubmissions?: SortOrderInput | SortOrder
    courseId?: SortOrder
    isSubmitted?: SortOrder
    isLateSubmitted?: SortOrder
    isLateSubmittedDate?: SortOrderInput | SortOrder
    course?: CourseOrderByWithRelationInput
    createdBy?: InstructorOrderByWithRelationInput
    delays?: AssignmentDelayOrderByRelationAggregateInput
    solutions?: StudentProblemSolutionOrderByRelationAggregateInput
    problems?: ProblemOrderByRelationAggregateInput
  }

  export type AssignmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssignmentWhereInput | AssignmentWhereInput[]
    OR?: AssignmentWhereInput[]
    NOT?: AssignmentWhereInput | AssignmentWhereInput[]
    title?: StringNullableFilter<"Assignment"> | string | null
    createdById?: StringNullableFilter<"Assignment"> | string | null
    createdOn?: DateTimeFilter<"Assignment"> | Date | string
    startDate?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    dueBy?: DateTimeFilter<"Assignment"> | Date | string
    resubmissions?: IntNullableFilter<"Assignment"> | number | null
    courseId?: StringFilter<"Assignment"> | string
    isSubmitted?: BoolFilter<"Assignment"> | boolean
    isLateSubmitted?: BoolFilter<"Assignment"> | boolean
    isLateSubmittedDate?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
    createdBy?: XOR<InstructorNullableScalarRelationFilter, InstructorWhereInput> | null
    delays?: AssignmentDelayListRelationFilter
    solutions?: StudentProblemSolutionListRelationFilter
    problems?: ProblemListRelationFilter
  }, "id">

  export type AssignmentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    createdOn?: SortOrder
    startDate?: SortOrderInput | SortOrder
    dueBy?: SortOrder
    resubmissions?: SortOrderInput | SortOrder
    courseId?: SortOrder
    isSubmitted?: SortOrder
    isLateSubmitted?: SortOrder
    isLateSubmittedDate?: SortOrderInput | SortOrder
    _count?: AssignmentCountOrderByAggregateInput
    _avg?: AssignmentAvgOrderByAggregateInput
    _max?: AssignmentMaxOrderByAggregateInput
    _min?: AssignmentMinOrderByAggregateInput
    _sum?: AssignmentSumOrderByAggregateInput
  }

  export type AssignmentScalarWhereWithAggregatesInput = {
    AND?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    OR?: AssignmentScalarWhereWithAggregatesInput[]
    NOT?: AssignmentScalarWhereWithAggregatesInput | AssignmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Assignment"> | string
    title?: StringNullableWithAggregatesFilter<"Assignment"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"Assignment"> | string | null
    createdOn?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    startDate?: DateTimeNullableWithAggregatesFilter<"Assignment"> | Date | string | null
    dueBy?: DateTimeWithAggregatesFilter<"Assignment"> | Date | string
    resubmissions?: IntNullableWithAggregatesFilter<"Assignment"> | number | null
    courseId?: StringWithAggregatesFilter<"Assignment"> | string
    isSubmitted?: BoolWithAggregatesFilter<"Assignment"> | boolean
    isLateSubmitted?: BoolWithAggregatesFilter<"Assignment"> | boolean
    isLateSubmittedDate?: DateTimeNullableWithAggregatesFilter<"Assignment"> | Date | string | null
  }

  export type StudentProblemSolutionWhereInput = {
    AND?: StudentProblemSolutionWhereInput | StudentProblemSolutionWhereInput[]
    OR?: StudentProblemSolutionWhereInput[]
    NOT?: StudentProblemSolutionWhereInput | StudentProblemSolutionWhereInput[]
    id?: StringFilter<"StudentProblemSolution"> | string
    studentId?: StringFilter<"StudentProblemSolution"> | string
    assignmentId?: StringFilter<"StudentProblemSolution"> | string
    problemId?: StringFilter<"StudentProblemSolution"> | string
    proofId?: StringFilter<"StudentProblemSolution"> | string
    submittedOn?: DateTimeNullableFilter<"StudentProblemSolution"> | Date | string | null
    grade?: DecimalNullableFilter<"StudentProblemSolution"> | Decimal | DecimalJsLike | number | string | null
    assignment?: XOR<AssignmentScalarRelationFilter, AssignmentWhereInput>
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    proof?: XOR<ProofScalarRelationFilter, ProofWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type StudentProblemSolutionOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    assignmentId?: SortOrder
    problemId?: SortOrder
    proofId?: SortOrder
    submittedOn?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    assignment?: AssignmentOrderByWithRelationInput
    problem?: ProblemOrderByWithRelationInput
    proof?: ProofOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type StudentProblemSolutionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    proofId?: string
    studentId_assignmentId_problemId_proofId?: StudentProblemSolutionStudentIdAssignmentIdProblemIdProofIdCompoundUniqueInput
    AND?: StudentProblemSolutionWhereInput | StudentProblemSolutionWhereInput[]
    OR?: StudentProblemSolutionWhereInput[]
    NOT?: StudentProblemSolutionWhereInput | StudentProblemSolutionWhereInput[]
    studentId?: StringFilter<"StudentProblemSolution"> | string
    assignmentId?: StringFilter<"StudentProblemSolution"> | string
    problemId?: StringFilter<"StudentProblemSolution"> | string
    submittedOn?: DateTimeNullableFilter<"StudentProblemSolution"> | Date | string | null
    grade?: DecimalNullableFilter<"StudentProblemSolution"> | Decimal | DecimalJsLike | number | string | null
    assignment?: XOR<AssignmentScalarRelationFilter, AssignmentWhereInput>
    problem?: XOR<ProblemScalarRelationFilter, ProblemWhereInput>
    proof?: XOR<ProofScalarRelationFilter, ProofWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id" | "proofId" | "studentId_assignmentId_problemId_proofId">

  export type StudentProblemSolutionOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    assignmentId?: SortOrder
    problemId?: SortOrder
    proofId?: SortOrder
    submittedOn?: SortOrderInput | SortOrder
    grade?: SortOrderInput | SortOrder
    _count?: StudentProblemSolutionCountOrderByAggregateInput
    _avg?: StudentProblemSolutionAvgOrderByAggregateInput
    _max?: StudentProblemSolutionMaxOrderByAggregateInput
    _min?: StudentProblemSolutionMinOrderByAggregateInput
    _sum?: StudentProblemSolutionSumOrderByAggregateInput
  }

  export type StudentProblemSolutionScalarWhereWithAggregatesInput = {
    AND?: StudentProblemSolutionScalarWhereWithAggregatesInput | StudentProblemSolutionScalarWhereWithAggregatesInput[]
    OR?: StudentProblemSolutionScalarWhereWithAggregatesInput[]
    NOT?: StudentProblemSolutionScalarWhereWithAggregatesInput | StudentProblemSolutionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StudentProblemSolution"> | string
    studentId?: StringWithAggregatesFilter<"StudentProblemSolution"> | string
    assignmentId?: StringWithAggregatesFilter<"StudentProblemSolution"> | string
    problemId?: StringWithAggregatesFilter<"StudentProblemSolution"> | string
    proofId?: StringWithAggregatesFilter<"StudentProblemSolution"> | string
    submittedOn?: DateTimeNullableWithAggregatesFilter<"StudentProblemSolution"> | Date | string | null
    grade?: DecimalNullableWithAggregatesFilter<"StudentProblemSolution"> | Decimal | DecimalJsLike | number | string | null
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    id?: StringFilter<"Feedback"> | string
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    subject?: StringFilter<"Feedback"> | string
    details?: StringFilter<"Feedback"> | string
    attach?: StringNullableFilter<"Feedback"> | string | null
  }

  export type FeedbackOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    details?: SortOrder
    attach?: SortOrderInput | SortOrder
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    name?: StringFilter<"Feedback"> | string
    email?: StringFilter<"Feedback"> | string
    subject?: StringFilter<"Feedback"> | string
    details?: StringFilter<"Feedback"> | string
    attach?: StringNullableFilter<"Feedback"> | string | null
  }, "id">

  export type FeedbackOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    details?: SortOrder
    attach?: SortOrderInput | SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Feedback"> | string
    name?: StringWithAggregatesFilter<"Feedback"> | string
    email?: StringWithAggregatesFilter<"Feedback"> | string
    subject?: StringWithAggregatesFilter<"Feedback"> | string
    details?: StringWithAggregatesFilter<"Feedback"> | string
    attach?: StringNullableWithAggregatesFilter<"Feedback"> | string | null
  }

  export type ResponseTrackerWhereInput = {
    AND?: ResponseTrackerWhereInput | ResponseTrackerWhereInput[]
    OR?: ResponseTrackerWhereInput[]
    NOT?: ResponseTrackerWhereInput | ResponseTrackerWhereInput[]
    id?: StringFilter<"ResponseTracker"> | string
    proofId?: StringFilter<"ResponseTracker"> | string
    responseType?: IntNullableFilter<"ResponseTracker"> | number | null
    responseMsg?: StringFilter<"ResponseTracker"> | string
    userId?: StringFilter<"ResponseTracker"> | string
    proof?: XOR<ProofScalarRelationFilter, ProofWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ResponseTrackerOrderByWithRelationInput = {
    id?: SortOrder
    proofId?: SortOrder
    responseType?: SortOrderInput | SortOrder
    responseMsg?: SortOrder
    userId?: SortOrder
    proof?: ProofOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ResponseTrackerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ResponseTrackerWhereInput | ResponseTrackerWhereInput[]
    OR?: ResponseTrackerWhereInput[]
    NOT?: ResponseTrackerWhereInput | ResponseTrackerWhereInput[]
    proofId?: StringFilter<"ResponseTracker"> | string
    responseType?: IntNullableFilter<"ResponseTracker"> | number | null
    responseMsg?: StringFilter<"ResponseTracker"> | string
    userId?: StringFilter<"ResponseTracker"> | string
    proof?: XOR<ProofScalarRelationFilter, ProofWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ResponseTrackerOrderByWithAggregationInput = {
    id?: SortOrder
    proofId?: SortOrder
    responseType?: SortOrderInput | SortOrder
    responseMsg?: SortOrder
    userId?: SortOrder
    _count?: ResponseTrackerCountOrderByAggregateInput
    _avg?: ResponseTrackerAvgOrderByAggregateInput
    _max?: ResponseTrackerMaxOrderByAggregateInput
    _min?: ResponseTrackerMinOrderByAggregateInput
    _sum?: ResponseTrackerSumOrderByAggregateInput
  }

  export type ResponseTrackerScalarWhereWithAggregatesInput = {
    AND?: ResponseTrackerScalarWhereWithAggregatesInput | ResponseTrackerScalarWhereWithAggregatesInput[]
    OR?: ResponseTrackerScalarWhereWithAggregatesInput[]
    NOT?: ResponseTrackerScalarWhereWithAggregatesInput | ResponseTrackerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ResponseTracker"> | string
    proofId?: StringWithAggregatesFilter<"ResponseTracker"> | string
    responseType?: IntNullableWithAggregatesFilter<"ResponseTracker"> | number | null
    responseMsg?: StringWithAggregatesFilter<"ResponseTracker"> | string
    userId?: StringWithAggregatesFilter<"ResponseTracker"> | string
  }

  export type AssignmentDelayWhereInput = {
    AND?: AssignmentDelayWhereInput | AssignmentDelayWhereInput[]
    OR?: AssignmentDelayWhereInput[]
    NOT?: AssignmentDelayWhereInput | AssignmentDelayWhereInput[]
    id?: StringFilter<"AssignmentDelay"> | string
    assignmentId?: StringFilter<"AssignmentDelay"> | string
    studentId?: StringFilter<"AssignmentDelay"> | string
    dueDate?: DateTimeNullableFilter<"AssignmentDelay"> | Date | string | null
    submissionDate?: DateTimeNullableFilter<"AssignmentDelay"> | Date | string | null
    status?: StringFilter<"AssignmentDelay"> | string
    assignment?: XOR<AssignmentScalarRelationFilter, AssignmentWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }

  export type AssignmentDelayOrderByWithRelationInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    submissionDate?: SortOrderInput | SortOrder
    status?: SortOrder
    assignment?: AssignmentOrderByWithRelationInput
    student?: StudentOrderByWithRelationInput
  }

  export type AssignmentDelayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AssignmentDelayWhereInput | AssignmentDelayWhereInput[]
    OR?: AssignmentDelayWhereInput[]
    NOT?: AssignmentDelayWhereInput | AssignmentDelayWhereInput[]
    assignmentId?: StringFilter<"AssignmentDelay"> | string
    studentId?: StringFilter<"AssignmentDelay"> | string
    dueDate?: DateTimeNullableFilter<"AssignmentDelay"> | Date | string | null
    submissionDate?: DateTimeNullableFilter<"AssignmentDelay"> | Date | string | null
    status?: StringFilter<"AssignmentDelay"> | string
    assignment?: XOR<AssignmentScalarRelationFilter, AssignmentWhereInput>
    student?: XOR<StudentScalarRelationFilter, StudentWhereInput>
  }, "id">

  export type AssignmentDelayOrderByWithAggregationInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    submissionDate?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: AssignmentDelayCountOrderByAggregateInput
    _max?: AssignmentDelayMaxOrderByAggregateInput
    _min?: AssignmentDelayMinOrderByAggregateInput
  }

  export type AssignmentDelayScalarWhereWithAggregatesInput = {
    AND?: AssignmentDelayScalarWhereWithAggregatesInput | AssignmentDelayScalarWhereWithAggregatesInput[]
    OR?: AssignmentDelayScalarWhereWithAggregatesInput[]
    NOT?: AssignmentDelayScalarWhereWithAggregatesInput | AssignmentDelayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AssignmentDelay"> | string
    assignmentId?: StringWithAggregatesFilter<"AssignmentDelay"> | string
    studentId?: StringWithAggregatesFilter<"AssignmentDelay"> | string
    dueDate?: DateTimeNullableWithAggregatesFilter<"AssignmentDelay"> | Date | string | null
    submissionDate?: DateTimeNullableWithAggregatesFilter<"AssignmentDelay"> | Date | string | null
    status?: StringWithAggregatesFilter<"AssignmentDelay"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    instructor?: InstructorCreateNestedOneWithoutUserInput
    proofs?: ProofCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    instructor?: InstructorUncheckedCreateNestedOneWithoutUserInput
    proofs?: ProofUncheckedCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    instructor?: InstructorUpdateOneWithoutUserNestedInput
    proofs?: ProofUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    instructor?: InstructorUncheckedUpdateOneWithoutUserNestedInput
    proofs?: ProofUncheckedUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StudentCreateInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    delays?: AssignmentDelayCreateNestedManyWithoutStudentInput
    user: UserCreateNestedOneWithoutStudentInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutStudentInput
    courses?: CourseCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutStudentInput
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutStudentInput
    courses?: CourseUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentUpdateInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUpdateManyWithoutStudentNestedInput
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutStudentNestedInput
    courses?: CourseUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutStudentNestedInput
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutStudentNestedInput
    courses?: CourseUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type StudentCreateManyInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
  }

  export type StudentUpdateManyMutationInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InstructorCreateInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    assignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    courses?: CourseCreateNestedManyWithoutInstructorInput
    user: UserCreateNestedOneWithoutInstructorInput
  }

  export type InstructorUncheckedCreateInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
  }

  export type InstructorUpdateInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    courses?: CourseUpdateManyWithoutInstructorNestedInput
    user?: UserUpdateOneRequiredWithoutInstructorNestedInput
  }

  export type InstructorUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
  }

  export type InstructorCreateManyInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
  }

  export type InstructorUpdateManyMutationInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type InstructorUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProofCreateInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemCreateNestedOneWithoutProofInput
    createdBy: UserCreateNestedOneWithoutProofsInput
    lines?: ProofLineCreateNestedManyWithoutProofInput
    responses?: ResponseTrackerCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionCreateNestedOneWithoutProofInput
  }

  export type ProofUncheckedCreateInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    createdById: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemUncheckedCreateNestedOneWithoutProofInput
    lines?: ProofLineUncheckedCreateNestedManyWithoutProofInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionUncheckedCreateNestedOneWithoutProofInput
  }

  export type ProofUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUpdateOneWithoutProofNestedInput
    createdBy?: UserUpdateOneRequiredWithoutProofsNestedInput
    lines?: ProofLineUpdateManyWithoutProofNestedInput
    responses?: ResponseTrackerUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUpdateOneWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUncheckedUpdateOneWithoutProofNestedInput
    lines?: ProofLineUncheckedUpdateManyWithoutProofNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUncheckedUpdateOneWithoutProofNestedInput
  }

  export type ProofCreateManyInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    createdById: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type ProofUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProofUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProofLineCreateInput = {
    id?: string
    lineNo: string
    formula?: string | null
    rule?: string | null
    order?: number | null
    comment?: string | null
    response?: string | null
    depth?: number
    refs?: ProofLineCreaterefsInput | string[]
    proof: ProofCreateNestedOneWithoutLinesInput
  }

  export type ProofLineUncheckedCreateInput = {
    id?: string
    proofId: string
    lineNo: string
    formula?: string | null
    rule?: string | null
    order?: number | null
    comment?: string | null
    response?: string | null
    depth?: number
    refs?: ProofLineCreaterefsInput | string[]
  }

  export type ProofLineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNo?: StringFieldUpdateOperationsInput | string
    formula?: NullableStringFieldUpdateOperationsInput | string | null
    rule?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: IntFieldUpdateOperationsInput | number
    refs?: ProofLineUpdaterefsInput | string[]
    proof?: ProofUpdateOneRequiredWithoutLinesNestedInput
  }

  export type ProofLineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    lineNo?: StringFieldUpdateOperationsInput | string
    formula?: NullableStringFieldUpdateOperationsInput | string | null
    rule?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: IntFieldUpdateOperationsInput | number
    refs?: ProofLineUpdaterefsInput | string[]
  }

  export type ProofLineCreateManyInput = {
    id?: string
    proofId: string
    lineNo: string
    formula?: string | null
    rule?: string | null
    order?: number | null
    comment?: string | null
    response?: string | null
    depth?: number
    refs?: ProofLineCreaterefsInput | string[]
  }

  export type ProofLineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNo?: StringFieldUpdateOperationsInput | string
    formula?: NullableStringFieldUpdateOperationsInput | string | null
    rule?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: IntFieldUpdateOperationsInput | number
    refs?: ProofLineUpdaterefsInput | string[]
  }

  export type ProofLineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    lineNo?: StringFieldUpdateOperationsInput | string
    formula?: NullableStringFieldUpdateOperationsInput | string | null
    rule?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: IntFieldUpdateOperationsInput | number
    refs?: ProofLineUpdaterefsInput | string[]
  }

  export type ProblemCreateInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    proof: ProofCreateNestedOneWithoutProblemInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutProblemInput
    assignments?: AssignmentCreateNestedManyWithoutProblemsInput
  }

  export type ProblemUncheckedCreateInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    proofId: string
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutProblemInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutProblemsInput
  }

  export type ProblemUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
    proof?: ProofUpdateOneRequiredWithoutProblemNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutProblemNestedInput
    assignments?: AssignmentUpdateManyWithoutProblemsNestedInput
  }

  export type ProblemUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    proofId?: StringFieldUpdateOperationsInput | string
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutProblemNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutProblemsNestedInput
  }

  export type ProblemCreateManyInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    proofId: string
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
  }

  export type ProblemUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProblemUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    proofId?: StringFieldUpdateOperationsInput | string
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CourseCreateInput = {
    id?: string
    title: string
    term: string
    section: number
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    instructor: InstructorCreateNestedOneWithoutCoursesInput
    students?: StudentCreateNestedManyWithoutCoursesInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    title: string
    term: string
    section: number
    instructorId: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    students?: StudentUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    instructor?: InstructorUpdateOneRequiredWithoutCoursesNestedInput
    students?: StudentUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    instructorId?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    students?: StudentUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    title: string
    term: string
    section: number
    instructorId: string
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    instructorId?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentCreateInput = {
    id?: string
    title?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    course: CourseCreateNestedOneWithoutAssignmentsInput
    createdBy?: InstructorCreateNestedOneWithoutAssignmentsInput
    delays?: AssignmentDelayCreateNestedManyWithoutAssignmentInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutAssignmentInput
    problems?: ProblemCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateInput = {
    id?: string
    title?: string | null
    createdById?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    courseId: string
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutAssignmentInput
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutAssignmentInput
    problems?: ProblemUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    createdBy?: InstructorUpdateOneWithoutAssignmentsNestedInput
    delays?: AssignmentDelayUpdateManyWithoutAssignmentNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutAssignmentNestedInput
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentCreateManyInput = {
    id?: string
    title?: string | null
    createdById?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    courseId: string
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
  }

  export type AssignmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssignmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentProblemSolutionCreateInput = {
    id?: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
    assignment: AssignmentCreateNestedOneWithoutSolutionsInput
    problem: ProblemCreateNestedOneWithoutSolutionsInput
    proof: ProofCreateNestedOneWithoutStudentSolutionInput
    student: StudentCreateNestedOneWithoutSolutionsInput
  }

  export type StudentProblemSolutionUncheckedCreateInput = {
    id?: string
    studentId: string
    assignmentId: string
    problemId: string
    proofId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignment?: AssignmentUpdateOneRequiredWithoutSolutionsNestedInput
    problem?: ProblemUpdateOneRequiredWithoutSolutionsNestedInput
    proof?: ProofUpdateOneRequiredWithoutStudentSolutionNestedInput
    student?: StudentUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type StudentProblemSolutionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionCreateManyInput = {
    id?: string
    studentId: string
    assignmentId: string
    problemId: string
    proofId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type FeedbackCreateInput = {
    id?: string
    name: string
    email: string
    subject: string
    details: string
    attach?: string | null
  }

  export type FeedbackUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    subject: string
    details: string
    attach?: string | null
  }

  export type FeedbackUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    attach?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    attach?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackCreateManyInput = {
    id?: string
    name: string
    email: string
    subject: string
    details: string
    attach?: string | null
  }

  export type FeedbackUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    attach?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FeedbackUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    subject?: StringFieldUpdateOperationsInput | string
    details?: StringFieldUpdateOperationsInput | string
    attach?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ResponseTrackerCreateInput = {
    id?: string
    responseType?: number | null
    responseMsg?: string
    proof: ProofCreateNestedOneWithoutResponsesInput
    user: UserCreateNestedOneWithoutResponsesInput
  }

  export type ResponseTrackerUncheckedCreateInput = {
    id?: string
    proofId: string
    responseType?: number | null
    responseMsg?: string
    userId: string
  }

  export type ResponseTrackerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
    proof?: ProofUpdateOneRequiredWithoutResponsesNestedInput
    user?: UserUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type ResponseTrackerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseTrackerCreateManyInput = {
    id?: string
    proofId: string
    responseType?: number | null
    responseMsg?: string
    userId: string
  }

  export type ResponseTrackerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseTrackerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentDelayCreateInput = {
    id?: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
    assignment: AssignmentCreateNestedOneWithoutDelaysInput
    student: StudentCreateNestedOneWithoutDelaysInput
  }

  export type AssignmentDelayUncheckedCreateInput = {
    id?: string
    assignmentId: string
    studentId: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
  }

  export type AssignmentDelayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignment?: AssignmentUpdateOneRequiredWithoutDelaysNestedInput
    student?: StudentUpdateOneRequiredWithoutDelaysNestedInput
  }

  export type AssignmentDelayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentDelayCreateManyInput = {
    id?: string
    assignmentId: string
    studentId: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
  }

  export type AssignmentDelayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentDelayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type InstructorNullableScalarRelationFilter = {
    is?: InstructorWhereInput | null
    isNot?: InstructorWhereInput | null
  }

  export type ProofListRelationFilter = {
    every?: ProofWhereInput
    some?: ProofWhereInput
    none?: ProofWhereInput
  }

  export type ResponseTrackerListRelationFilter = {
    every?: ResponseTrackerWhereInput
    some?: ResponseTrackerWhereInput
    none?: ResponseTrackerWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type StudentNullableScalarRelationFilter = {
    is?: StudentWhereInput | null
    isNot?: StudentWhereInput | null
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProofOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ResponseTrackerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    isStudent?: SortOrder
    isInstructor?: SortOrder
    isAdmin?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    isStudent?: SortOrder
    isInstructor?: SortOrder
    isAdmin?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    username?: SortOrder
    hashedPassword?: SortOrder
    isStudent?: SortOrder
    isInstructor?: SortOrder
    isAdmin?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AssignmentDelayListRelationFilter = {
    every?: AssignmentDelayWhereInput
    some?: AssignmentDelayWhereInput
    none?: AssignmentDelayWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StudentProblemSolutionListRelationFilter = {
    every?: StudentProblemSolutionWhereInput
    some?: StudentProblemSolutionWhereInput
    none?: StudentProblemSolutionWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AssignmentDelayOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentProblemSolutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentCountOrderByAggregateInput = {
    userId?: SortOrder
    imageUrl?: SortOrder
    mobile?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    userId?: SortOrder
    imageUrl?: SortOrder
    mobile?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    userId?: SortOrder
    imageUrl?: SortOrder
    mobile?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type AssignmentListRelationFilter = {
    every?: AssignmentWhereInput
    some?: AssignmentWhereInput
    none?: AssignmentWhereInput
  }

  export type AssignmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InstructorCountOrderByAggregateInput = {
    userId?: SortOrder
    imageUrl?: SortOrder
    mobile?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type InstructorMaxOrderByAggregateInput = {
    userId?: SortOrder
    imageUrl?: SortOrder
    mobile?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type InstructorMinOrderByAggregateInput = {
    userId?: SortOrder
    imageUrl?: SortOrder
    mobile?: SortOrder
    bio?: SortOrder
    dob?: SortOrder
  }

  export type ProblemNullableScalarRelationFilter = {
    is?: ProblemWhereInput | null
    isNot?: ProblemWhereInput | null
  }

  export type ProofLineListRelationFilter = {
    every?: ProofLineWhereInput
    some?: ProofLineWhereInput
    none?: ProofLineWhereInput
  }

  export type StudentProblemSolutionNullableScalarRelationFilter = {
    is?: StudentProblemSolutionWhereInput | null
    isNot?: StudentProblemSolutionWhereInput | null
  }

  export type ProofLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProofCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    rules?: SortOrder
    premises?: SortOrder
    conclusion?: SortOrder
    createdById?: SortOrder
    complete?: SortOrder
    lemmasAllowed?: SortOrder
    disproofString?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ProofMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    rules?: SortOrder
    premises?: SortOrder
    conclusion?: SortOrder
    createdById?: SortOrder
    complete?: SortOrder
    lemmasAllowed?: SortOrder
    disproofString?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type ProofMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    rules?: SortOrder
    premises?: SortOrder
    conclusion?: SortOrder
    createdById?: SortOrder
    complete?: SortOrder
    lemmasAllowed?: SortOrder
    disproofString?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type ProofScalarRelationFilter = {
    is?: ProofWhereInput
    isNot?: ProofWhereInput
  }

  export type ProofLineCountOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    lineNo?: SortOrder
    formula?: SortOrder
    rule?: SortOrder
    order?: SortOrder
    comment?: SortOrder
    response?: SortOrder
    depth?: SortOrder
    refs?: SortOrder
  }

  export type ProofLineAvgOrderByAggregateInput = {
    order?: SortOrder
    depth?: SortOrder
  }

  export type ProofLineMaxOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    lineNo?: SortOrder
    formula?: SortOrder
    rule?: SortOrder
    order?: SortOrder
    comment?: SortOrder
    response?: SortOrder
    depth?: SortOrder
  }

  export type ProofLineMinOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    lineNo?: SortOrder
    formula?: SortOrder
    rule?: SortOrder
    order?: SortOrder
    comment?: SortOrder
    response?: SortOrder
    depth?: SortOrder
  }

  export type ProofLineSumOrderByAggregateInput = {
    order?: SortOrder
    depth?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type ProblemCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    point?: SortOrder
    targetSteps?: SortOrder
    lostPoints?: SortOrder
    proofId?: SortOrder
    lemmasAllowed?: SortOrder
    showTargetSteps?: SortOrder
  }

  export type ProblemAvgOrderByAggregateInput = {
    point?: SortOrder
    targetSteps?: SortOrder
    lostPoints?: SortOrder
  }

  export type ProblemMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    point?: SortOrder
    targetSteps?: SortOrder
    lostPoints?: SortOrder
    proofId?: SortOrder
    lemmasAllowed?: SortOrder
    showTargetSteps?: SortOrder
  }

  export type ProblemMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    point?: SortOrder
    targetSteps?: SortOrder
    lostPoints?: SortOrder
    proofId?: SortOrder
    lemmasAllowed?: SortOrder
    showTargetSteps?: SortOrder
  }

  export type ProblemSumOrderByAggregateInput = {
    point?: SortOrder
    targetSteps?: SortOrder
    lostPoints?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type InstructorScalarRelationFilter = {
    is?: InstructorWhereInput
    isNot?: InstructorWhereInput
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    term?: SortOrder
    section?: SortOrder
    instructorId?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    section?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    term?: SortOrder
    section?: SortOrder
    instructorId?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    term?: SortOrder
    section?: SortOrder
    instructorId?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    section?: SortOrder
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type ProblemListRelationFilter = {
    every?: ProblemWhereInput
    some?: ProblemWhereInput
    none?: ProblemWhereInput
  }

  export type ProblemOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AssignmentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdById?: SortOrder
    createdOn?: SortOrder
    startDate?: SortOrder
    dueBy?: SortOrder
    resubmissions?: SortOrder
    courseId?: SortOrder
    isSubmitted?: SortOrder
    isLateSubmitted?: SortOrder
    isLateSubmittedDate?: SortOrder
  }

  export type AssignmentAvgOrderByAggregateInput = {
    resubmissions?: SortOrder
  }

  export type AssignmentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdById?: SortOrder
    createdOn?: SortOrder
    startDate?: SortOrder
    dueBy?: SortOrder
    resubmissions?: SortOrder
    courseId?: SortOrder
    isSubmitted?: SortOrder
    isLateSubmitted?: SortOrder
    isLateSubmittedDate?: SortOrder
  }

  export type AssignmentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    createdById?: SortOrder
    createdOn?: SortOrder
    startDate?: SortOrder
    dueBy?: SortOrder
    resubmissions?: SortOrder
    courseId?: SortOrder
    isSubmitted?: SortOrder
    isLateSubmitted?: SortOrder
    isLateSubmittedDate?: SortOrder
  }

  export type AssignmentSumOrderByAggregateInput = {
    resubmissions?: SortOrder
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type AssignmentScalarRelationFilter = {
    is?: AssignmentWhereInput
    isNot?: AssignmentWhereInput
  }

  export type ProblemScalarRelationFilter = {
    is?: ProblemWhereInput
    isNot?: ProblemWhereInput
  }

  export type StudentScalarRelationFilter = {
    is?: StudentWhereInput
    isNot?: StudentWhereInput
  }

  export type StudentProblemSolutionStudentIdAssignmentIdProblemIdProofIdCompoundUniqueInput = {
    studentId: string
    assignmentId: string
    problemId: string
    proofId: string
  }

  export type StudentProblemSolutionCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assignmentId?: SortOrder
    problemId?: SortOrder
    proofId?: SortOrder
    submittedOn?: SortOrder
    grade?: SortOrder
  }

  export type StudentProblemSolutionAvgOrderByAggregateInput = {
    grade?: SortOrder
  }

  export type StudentProblemSolutionMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assignmentId?: SortOrder
    problemId?: SortOrder
    proofId?: SortOrder
    submittedOn?: SortOrder
    grade?: SortOrder
  }

  export type StudentProblemSolutionMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    assignmentId?: SortOrder
    problemId?: SortOrder
    proofId?: SortOrder
    submittedOn?: SortOrder
    grade?: SortOrder
  }

  export type StudentProblemSolutionSumOrderByAggregateInput = {
    grade?: SortOrder
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type FeedbackCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    details?: SortOrder
    attach?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    details?: SortOrder
    attach?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    subject?: SortOrder
    details?: SortOrder
    attach?: SortOrder
  }

  export type ResponseTrackerCountOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    responseType?: SortOrder
    responseMsg?: SortOrder
    userId?: SortOrder
  }

  export type ResponseTrackerAvgOrderByAggregateInput = {
    responseType?: SortOrder
  }

  export type ResponseTrackerMaxOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    responseType?: SortOrder
    responseMsg?: SortOrder
    userId?: SortOrder
  }

  export type ResponseTrackerMinOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    responseType?: SortOrder
    responseMsg?: SortOrder
    userId?: SortOrder
  }

  export type ResponseTrackerSumOrderByAggregateInput = {
    responseType?: SortOrder
  }

  export type AssignmentDelayCountOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    dueDate?: SortOrder
    submissionDate?: SortOrder
    status?: SortOrder
  }

  export type AssignmentDelayMaxOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    dueDate?: SortOrder
    submissionDate?: SortOrder
    status?: SortOrder
  }

  export type AssignmentDelayMinOrderByAggregateInput = {
    id?: SortOrder
    assignmentId?: SortOrder
    studentId?: SortOrder
    dueDate?: SortOrder
    submissionDate?: SortOrder
    status?: SortOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type InstructorCreateNestedOneWithoutUserInput = {
    create?: XOR<InstructorCreateWithoutUserInput, InstructorUncheckedCreateWithoutUserInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutUserInput
    connect?: InstructorWhereUniqueInput
  }

  export type ProofCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProofCreateWithoutCreatedByInput, ProofUncheckedCreateWithoutCreatedByInput> | ProofCreateWithoutCreatedByInput[] | ProofUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProofCreateOrConnectWithoutCreatedByInput | ProofCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProofCreateManyCreatedByInputEnvelope
    connect?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
  }

  export type ResponseTrackerCreateNestedManyWithoutUserInput = {
    create?: XOR<ResponseTrackerCreateWithoutUserInput, ResponseTrackerUncheckedCreateWithoutUserInput> | ResponseTrackerCreateWithoutUserInput[] | ResponseTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResponseTrackerCreateOrConnectWithoutUserInput | ResponseTrackerCreateOrConnectWithoutUserInput[]
    createMany?: ResponseTrackerCreateManyUserInputEnvelope
    connect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type StudentCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type InstructorUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<InstructorCreateWithoutUserInput, InstructorUncheckedCreateWithoutUserInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutUserInput
    connect?: InstructorWhereUniqueInput
  }

  export type ProofUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProofCreateWithoutCreatedByInput, ProofUncheckedCreateWithoutCreatedByInput> | ProofCreateWithoutCreatedByInput[] | ProofUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProofCreateOrConnectWithoutCreatedByInput | ProofCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProofCreateManyCreatedByInputEnvelope
    connect?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
  }

  export type ResponseTrackerUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ResponseTrackerCreateWithoutUserInput, ResponseTrackerUncheckedCreateWithoutUserInput> | ResponseTrackerCreateWithoutUserInput[] | ResponseTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResponseTrackerCreateOrConnectWithoutUserInput | ResponseTrackerCreateOrConnectWithoutUserInput[]
    createMany?: ResponseTrackerCreateManyUserInputEnvelope
    connect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    connect?: StudentWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type InstructorUpdateOneWithoutUserNestedInput = {
    create?: XOR<InstructorCreateWithoutUserInput, InstructorUncheckedCreateWithoutUserInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutUserInput
    upsert?: InstructorUpsertWithoutUserInput
    disconnect?: InstructorWhereInput | boolean
    delete?: InstructorWhereInput | boolean
    connect?: InstructorWhereUniqueInput
    update?: XOR<XOR<InstructorUpdateToOneWithWhereWithoutUserInput, InstructorUpdateWithoutUserInput>, InstructorUncheckedUpdateWithoutUserInput>
  }

  export type ProofUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProofCreateWithoutCreatedByInput, ProofUncheckedCreateWithoutCreatedByInput> | ProofCreateWithoutCreatedByInput[] | ProofUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProofCreateOrConnectWithoutCreatedByInput | ProofCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProofUpsertWithWhereUniqueWithoutCreatedByInput | ProofUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProofCreateManyCreatedByInputEnvelope
    set?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
    disconnect?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
    delete?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
    connect?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
    update?: ProofUpdateWithWhereUniqueWithoutCreatedByInput | ProofUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProofUpdateManyWithWhereWithoutCreatedByInput | ProofUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProofScalarWhereInput | ProofScalarWhereInput[]
  }

  export type ResponseTrackerUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResponseTrackerCreateWithoutUserInput, ResponseTrackerUncheckedCreateWithoutUserInput> | ResponseTrackerCreateWithoutUserInput[] | ResponseTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResponseTrackerCreateOrConnectWithoutUserInput | ResponseTrackerCreateOrConnectWithoutUserInput[]
    upsert?: ResponseTrackerUpsertWithWhereUniqueWithoutUserInput | ResponseTrackerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResponseTrackerCreateManyUserInputEnvelope
    set?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    disconnect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    delete?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    connect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    update?: ResponseTrackerUpdateWithWhereUniqueWithoutUserInput | ResponseTrackerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResponseTrackerUpdateManyWithWhereWithoutUserInput | ResponseTrackerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResponseTrackerScalarWhereInput | ResponseTrackerScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type StudentUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type InstructorUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<InstructorCreateWithoutUserInput, InstructorUncheckedCreateWithoutUserInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutUserInput
    upsert?: InstructorUpsertWithoutUserInput
    disconnect?: InstructorWhereInput | boolean
    delete?: InstructorWhereInput | boolean
    connect?: InstructorWhereUniqueInput
    update?: XOR<XOR<InstructorUpdateToOneWithWhereWithoutUserInput, InstructorUpdateWithoutUserInput>, InstructorUncheckedUpdateWithoutUserInput>
  }

  export type ProofUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProofCreateWithoutCreatedByInput, ProofUncheckedCreateWithoutCreatedByInput> | ProofCreateWithoutCreatedByInput[] | ProofUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProofCreateOrConnectWithoutCreatedByInput | ProofCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProofUpsertWithWhereUniqueWithoutCreatedByInput | ProofUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProofCreateManyCreatedByInputEnvelope
    set?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
    disconnect?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
    delete?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
    connect?: ProofWhereUniqueInput | ProofWhereUniqueInput[]
    update?: ProofUpdateWithWhereUniqueWithoutCreatedByInput | ProofUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProofUpdateManyWithWhereWithoutCreatedByInput | ProofUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProofScalarWhereInput | ProofScalarWhereInput[]
  }

  export type ResponseTrackerUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ResponseTrackerCreateWithoutUserInput, ResponseTrackerUncheckedCreateWithoutUserInput> | ResponseTrackerCreateWithoutUserInput[] | ResponseTrackerUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ResponseTrackerCreateOrConnectWithoutUserInput | ResponseTrackerCreateOrConnectWithoutUserInput[]
    upsert?: ResponseTrackerUpsertWithWhereUniqueWithoutUserInput | ResponseTrackerUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ResponseTrackerCreateManyUserInputEnvelope
    set?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    disconnect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    delete?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    connect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    update?: ResponseTrackerUpdateWithWhereUniqueWithoutUserInput | ResponseTrackerUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ResponseTrackerUpdateManyWithWhereWithoutUserInput | ResponseTrackerUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ResponseTrackerScalarWhereInput | ResponseTrackerScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type StudentUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    connectOrCreate?: StudentCreateOrConnectWithoutUserInput
    upsert?: StudentUpsertWithoutUserInput
    disconnect?: StudentWhereInput | boolean
    delete?: StudentWhereInput | boolean
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutUserInput, StudentUpdateWithoutUserInput>, StudentUncheckedUpdateWithoutUserInput>
  }

  export type AssignmentDelayCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssignmentDelayCreateWithoutStudentInput, AssignmentDelayUncheckedCreateWithoutStudentInput> | AssignmentDelayCreateWithoutStudentInput[] | AssignmentDelayUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentDelayCreateOrConnectWithoutStudentInput | AssignmentDelayCreateOrConnectWithoutStudentInput[]
    createMany?: AssignmentDelayCreateManyStudentInputEnvelope
    connect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutStudentInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    connect?: UserWhereUniqueInput
  }

  export type StudentProblemSolutionCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutStudentInput, StudentProblemSolutionUncheckedCreateWithoutStudentInput> | StudentProblemSolutionCreateWithoutStudentInput[] | StudentProblemSolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutStudentInput | StudentProblemSolutionCreateOrConnectWithoutStudentInput[]
    createMany?: StudentProblemSolutionCreateManyStudentInputEnvelope
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutStudentsInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput> | CourseCreateWithoutStudentsInput[] | CourseUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput | CourseCreateOrConnectWithoutStudentsInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type AssignmentDelayUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<AssignmentDelayCreateWithoutStudentInput, AssignmentDelayUncheckedCreateWithoutStudentInput> | AssignmentDelayCreateWithoutStudentInput[] | AssignmentDelayUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentDelayCreateOrConnectWithoutStudentInput | AssignmentDelayCreateOrConnectWithoutStudentInput[]
    createMany?: AssignmentDelayCreateManyStudentInputEnvelope
    connect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
  }

  export type StudentProblemSolutionUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutStudentInput, StudentProblemSolutionUncheckedCreateWithoutStudentInput> | StudentProblemSolutionCreateWithoutStudentInput[] | StudentProblemSolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutStudentInput | StudentProblemSolutionCreateOrConnectWithoutStudentInput[]
    createMany?: StudentProblemSolutionCreateManyStudentInputEnvelope
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutStudentsInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput> | CourseCreateWithoutStudentsInput[] | CourseUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput | CourseCreateOrConnectWithoutStudentsInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AssignmentDelayUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssignmentDelayCreateWithoutStudentInput, AssignmentDelayUncheckedCreateWithoutStudentInput> | AssignmentDelayCreateWithoutStudentInput[] | AssignmentDelayUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentDelayCreateOrConnectWithoutStudentInput | AssignmentDelayCreateOrConnectWithoutStudentInput[]
    upsert?: AssignmentDelayUpsertWithWhereUniqueWithoutStudentInput | AssignmentDelayUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssignmentDelayCreateManyStudentInputEnvelope
    set?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    disconnect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    delete?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    connect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    update?: AssignmentDelayUpdateWithWhereUniqueWithoutStudentInput | AssignmentDelayUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssignmentDelayUpdateManyWithWhereWithoutStudentInput | AssignmentDelayUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssignmentDelayScalarWhereInput | AssignmentDelayScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutStudentNestedInput = {
    create?: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInput
    upsert?: UserUpsertWithoutStudentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInput, UserUpdateWithoutStudentInput>, UserUncheckedUpdateWithoutStudentInput>
  }

  export type StudentProblemSolutionUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutStudentInput, StudentProblemSolutionUncheckedCreateWithoutStudentInput> | StudentProblemSolutionCreateWithoutStudentInput[] | StudentProblemSolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutStudentInput | StudentProblemSolutionCreateOrConnectWithoutStudentInput[]
    upsert?: StudentProblemSolutionUpsertWithWhereUniqueWithoutStudentInput | StudentProblemSolutionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentProblemSolutionCreateManyStudentInputEnvelope
    set?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    disconnect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    delete?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    update?: StudentProblemSolutionUpdateWithWhereUniqueWithoutStudentInput | StudentProblemSolutionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentProblemSolutionUpdateManyWithWhereWithoutStudentInput | StudentProblemSolutionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentProblemSolutionScalarWhereInput | StudentProblemSolutionScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput> | CourseCreateWithoutStudentsInput[] | CourseUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput | CourseCreateOrConnectWithoutStudentsInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutStudentsInput | CourseUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutStudentsInput | CourseUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutStudentsInput | CourseUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type AssignmentDelayUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<AssignmentDelayCreateWithoutStudentInput, AssignmentDelayUncheckedCreateWithoutStudentInput> | AssignmentDelayCreateWithoutStudentInput[] | AssignmentDelayUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: AssignmentDelayCreateOrConnectWithoutStudentInput | AssignmentDelayCreateOrConnectWithoutStudentInput[]
    upsert?: AssignmentDelayUpsertWithWhereUniqueWithoutStudentInput | AssignmentDelayUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: AssignmentDelayCreateManyStudentInputEnvelope
    set?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    disconnect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    delete?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    connect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    update?: AssignmentDelayUpdateWithWhereUniqueWithoutStudentInput | AssignmentDelayUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: AssignmentDelayUpdateManyWithWhereWithoutStudentInput | AssignmentDelayUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: AssignmentDelayScalarWhereInput | AssignmentDelayScalarWhereInput[]
  }

  export type StudentProblemSolutionUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutStudentInput, StudentProblemSolutionUncheckedCreateWithoutStudentInput> | StudentProblemSolutionCreateWithoutStudentInput[] | StudentProblemSolutionUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutStudentInput | StudentProblemSolutionCreateOrConnectWithoutStudentInput[]
    upsert?: StudentProblemSolutionUpsertWithWhereUniqueWithoutStudentInput | StudentProblemSolutionUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentProblemSolutionCreateManyStudentInputEnvelope
    set?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    disconnect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    delete?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    update?: StudentProblemSolutionUpdateWithWhereUniqueWithoutStudentInput | StudentProblemSolutionUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentProblemSolutionUpdateManyWithWhereWithoutStudentInput | StudentProblemSolutionUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentProblemSolutionScalarWhereInput | StudentProblemSolutionScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutStudentsNestedInput = {
    create?: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput> | CourseCreateWithoutStudentsInput[] | CourseUncheckedCreateWithoutStudentsInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutStudentsInput | CourseCreateOrConnectWithoutStudentsInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutStudentsInput | CourseUpsertWithWhereUniqueWithoutStudentsInput[]
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutStudentsInput | CourseUpdateWithWhereUniqueWithoutStudentsInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutStudentsInput | CourseUpdateManyWithWhereWithoutStudentsInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type AssignmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput> | AssignmentCreateWithoutCreatedByInput[] | AssignmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCreatedByInput | AssignmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: AssignmentCreateManyCreatedByInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutInstructorInput = {
    create?: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput> | CourseCreateWithoutInstructorInput[] | CourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorInput | CourseCreateOrConnectWithoutInstructorInput[]
    createMany?: CourseCreateManyInstructorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutInstructorInput = {
    create?: XOR<UserCreateWithoutInstructorInput, UserUncheckedCreateWithoutInstructorInput>
    connectOrCreate?: UserCreateOrConnectWithoutInstructorInput
    connect?: UserWhereUniqueInput
  }

  export type AssignmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput> | AssignmentCreateWithoutCreatedByInput[] | AssignmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCreatedByInput | AssignmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: AssignmentCreateManyCreatedByInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutInstructorInput = {
    create?: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput> | CourseCreateWithoutInstructorInput[] | CourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorInput | CourseCreateOrConnectWithoutInstructorInput[]
    createMany?: CourseCreateManyInstructorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type AssignmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput> | AssignmentCreateWithoutCreatedByInput[] | AssignmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCreatedByInput | AssignmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCreatedByInput | AssignmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AssignmentCreateManyCreatedByInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCreatedByInput | AssignmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCreatedByInput | AssignmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput> | CourseCreateWithoutInstructorInput[] | CourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorInput | CourseCreateOrConnectWithoutInstructorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutInstructorInput | CourseUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: CourseCreateManyInstructorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutInstructorInput | CourseUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutInstructorInput | CourseUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutInstructorNestedInput = {
    create?: XOR<UserCreateWithoutInstructorInput, UserUncheckedCreateWithoutInstructorInput>
    connectOrCreate?: UserCreateOrConnectWithoutInstructorInput
    upsert?: UserUpsertWithoutInstructorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutInstructorInput, UserUpdateWithoutInstructorInput>, UserUncheckedUpdateWithoutInstructorInput>
  }

  export type AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput> | AssignmentCreateWithoutCreatedByInput[] | AssignmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCreatedByInput | AssignmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCreatedByInput | AssignmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: AssignmentCreateManyCreatedByInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCreatedByInput | AssignmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCreatedByInput | AssignmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutInstructorNestedInput = {
    create?: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput> | CourseCreateWithoutInstructorInput[] | CourseUncheckedCreateWithoutInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutInstructorInput | CourseCreateOrConnectWithoutInstructorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutInstructorInput | CourseUpsertWithWhereUniqueWithoutInstructorInput[]
    createMany?: CourseCreateManyInstructorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutInstructorInput | CourseUpdateWithWhereUniqueWithoutInstructorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutInstructorInput | CourseUpdateManyWithWhereWithoutInstructorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type ProblemCreateNestedOneWithoutProofInput = {
    create?: XOR<ProblemCreateWithoutProofInput, ProblemUncheckedCreateWithoutProofInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutProofInput
    connect?: ProblemWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProofsInput = {
    create?: XOR<UserCreateWithoutProofsInput, UserUncheckedCreateWithoutProofsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProofsInput
    connect?: UserWhereUniqueInput
  }

  export type ProofLineCreateNestedManyWithoutProofInput = {
    create?: XOR<ProofLineCreateWithoutProofInput, ProofLineUncheckedCreateWithoutProofInput> | ProofLineCreateWithoutProofInput[] | ProofLineUncheckedCreateWithoutProofInput[]
    connectOrCreate?: ProofLineCreateOrConnectWithoutProofInput | ProofLineCreateOrConnectWithoutProofInput[]
    createMany?: ProofLineCreateManyProofInputEnvelope
    connect?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
  }

  export type ResponseTrackerCreateNestedManyWithoutProofInput = {
    create?: XOR<ResponseTrackerCreateWithoutProofInput, ResponseTrackerUncheckedCreateWithoutProofInput> | ResponseTrackerCreateWithoutProofInput[] | ResponseTrackerUncheckedCreateWithoutProofInput[]
    connectOrCreate?: ResponseTrackerCreateOrConnectWithoutProofInput | ResponseTrackerCreateOrConnectWithoutProofInput[]
    createMany?: ResponseTrackerCreateManyProofInputEnvelope
    connect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
  }

  export type StudentProblemSolutionCreateNestedOneWithoutProofInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutProofInput, StudentProblemSolutionUncheckedCreateWithoutProofInput>
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutProofInput
    connect?: StudentProblemSolutionWhereUniqueInput
  }

  export type ProblemUncheckedCreateNestedOneWithoutProofInput = {
    create?: XOR<ProblemCreateWithoutProofInput, ProblemUncheckedCreateWithoutProofInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutProofInput
    connect?: ProblemWhereUniqueInput
  }

  export type ProofLineUncheckedCreateNestedManyWithoutProofInput = {
    create?: XOR<ProofLineCreateWithoutProofInput, ProofLineUncheckedCreateWithoutProofInput> | ProofLineCreateWithoutProofInput[] | ProofLineUncheckedCreateWithoutProofInput[]
    connectOrCreate?: ProofLineCreateOrConnectWithoutProofInput | ProofLineCreateOrConnectWithoutProofInput[]
    createMany?: ProofLineCreateManyProofInputEnvelope
    connect?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
  }

  export type ResponseTrackerUncheckedCreateNestedManyWithoutProofInput = {
    create?: XOR<ResponseTrackerCreateWithoutProofInput, ResponseTrackerUncheckedCreateWithoutProofInput> | ResponseTrackerCreateWithoutProofInput[] | ResponseTrackerUncheckedCreateWithoutProofInput[]
    connectOrCreate?: ResponseTrackerCreateOrConnectWithoutProofInput | ResponseTrackerCreateOrConnectWithoutProofInput[]
    createMany?: ResponseTrackerCreateManyProofInputEnvelope
    connect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
  }

  export type StudentProblemSolutionUncheckedCreateNestedOneWithoutProofInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutProofInput, StudentProblemSolutionUncheckedCreateWithoutProofInput>
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutProofInput
    connect?: StudentProblemSolutionWhereUniqueInput
  }

  export type ProblemUpdateOneWithoutProofNestedInput = {
    create?: XOR<ProblemCreateWithoutProofInput, ProblemUncheckedCreateWithoutProofInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutProofInput
    upsert?: ProblemUpsertWithoutProofInput
    disconnect?: ProblemWhereInput | boolean
    delete?: ProblemWhereInput | boolean
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutProofInput, ProblemUpdateWithoutProofInput>, ProblemUncheckedUpdateWithoutProofInput>
  }

  export type UserUpdateOneRequiredWithoutProofsNestedInput = {
    create?: XOR<UserCreateWithoutProofsInput, UserUncheckedCreateWithoutProofsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProofsInput
    upsert?: UserUpsertWithoutProofsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProofsInput, UserUpdateWithoutProofsInput>, UserUncheckedUpdateWithoutProofsInput>
  }

  export type ProofLineUpdateManyWithoutProofNestedInput = {
    create?: XOR<ProofLineCreateWithoutProofInput, ProofLineUncheckedCreateWithoutProofInput> | ProofLineCreateWithoutProofInput[] | ProofLineUncheckedCreateWithoutProofInput[]
    connectOrCreate?: ProofLineCreateOrConnectWithoutProofInput | ProofLineCreateOrConnectWithoutProofInput[]
    upsert?: ProofLineUpsertWithWhereUniqueWithoutProofInput | ProofLineUpsertWithWhereUniqueWithoutProofInput[]
    createMany?: ProofLineCreateManyProofInputEnvelope
    set?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
    disconnect?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
    delete?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
    connect?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
    update?: ProofLineUpdateWithWhereUniqueWithoutProofInput | ProofLineUpdateWithWhereUniqueWithoutProofInput[]
    updateMany?: ProofLineUpdateManyWithWhereWithoutProofInput | ProofLineUpdateManyWithWhereWithoutProofInput[]
    deleteMany?: ProofLineScalarWhereInput | ProofLineScalarWhereInput[]
  }

  export type ResponseTrackerUpdateManyWithoutProofNestedInput = {
    create?: XOR<ResponseTrackerCreateWithoutProofInput, ResponseTrackerUncheckedCreateWithoutProofInput> | ResponseTrackerCreateWithoutProofInput[] | ResponseTrackerUncheckedCreateWithoutProofInput[]
    connectOrCreate?: ResponseTrackerCreateOrConnectWithoutProofInput | ResponseTrackerCreateOrConnectWithoutProofInput[]
    upsert?: ResponseTrackerUpsertWithWhereUniqueWithoutProofInput | ResponseTrackerUpsertWithWhereUniqueWithoutProofInput[]
    createMany?: ResponseTrackerCreateManyProofInputEnvelope
    set?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    disconnect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    delete?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    connect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    update?: ResponseTrackerUpdateWithWhereUniqueWithoutProofInput | ResponseTrackerUpdateWithWhereUniqueWithoutProofInput[]
    updateMany?: ResponseTrackerUpdateManyWithWhereWithoutProofInput | ResponseTrackerUpdateManyWithWhereWithoutProofInput[]
    deleteMany?: ResponseTrackerScalarWhereInput | ResponseTrackerScalarWhereInput[]
  }

  export type StudentProblemSolutionUpdateOneWithoutProofNestedInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutProofInput, StudentProblemSolutionUncheckedCreateWithoutProofInput>
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutProofInput
    upsert?: StudentProblemSolutionUpsertWithoutProofInput
    disconnect?: StudentProblemSolutionWhereInput | boolean
    delete?: StudentProblemSolutionWhereInput | boolean
    connect?: StudentProblemSolutionWhereUniqueInput
    update?: XOR<XOR<StudentProblemSolutionUpdateToOneWithWhereWithoutProofInput, StudentProblemSolutionUpdateWithoutProofInput>, StudentProblemSolutionUncheckedUpdateWithoutProofInput>
  }

  export type ProblemUncheckedUpdateOneWithoutProofNestedInput = {
    create?: XOR<ProblemCreateWithoutProofInput, ProblemUncheckedCreateWithoutProofInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutProofInput
    upsert?: ProblemUpsertWithoutProofInput
    disconnect?: ProblemWhereInput | boolean
    delete?: ProblemWhereInput | boolean
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutProofInput, ProblemUpdateWithoutProofInput>, ProblemUncheckedUpdateWithoutProofInput>
  }

  export type ProofLineUncheckedUpdateManyWithoutProofNestedInput = {
    create?: XOR<ProofLineCreateWithoutProofInput, ProofLineUncheckedCreateWithoutProofInput> | ProofLineCreateWithoutProofInput[] | ProofLineUncheckedCreateWithoutProofInput[]
    connectOrCreate?: ProofLineCreateOrConnectWithoutProofInput | ProofLineCreateOrConnectWithoutProofInput[]
    upsert?: ProofLineUpsertWithWhereUniqueWithoutProofInput | ProofLineUpsertWithWhereUniqueWithoutProofInput[]
    createMany?: ProofLineCreateManyProofInputEnvelope
    set?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
    disconnect?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
    delete?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
    connect?: ProofLineWhereUniqueInput | ProofLineWhereUniqueInput[]
    update?: ProofLineUpdateWithWhereUniqueWithoutProofInput | ProofLineUpdateWithWhereUniqueWithoutProofInput[]
    updateMany?: ProofLineUpdateManyWithWhereWithoutProofInput | ProofLineUpdateManyWithWhereWithoutProofInput[]
    deleteMany?: ProofLineScalarWhereInput | ProofLineScalarWhereInput[]
  }

  export type ResponseTrackerUncheckedUpdateManyWithoutProofNestedInput = {
    create?: XOR<ResponseTrackerCreateWithoutProofInput, ResponseTrackerUncheckedCreateWithoutProofInput> | ResponseTrackerCreateWithoutProofInput[] | ResponseTrackerUncheckedCreateWithoutProofInput[]
    connectOrCreate?: ResponseTrackerCreateOrConnectWithoutProofInput | ResponseTrackerCreateOrConnectWithoutProofInput[]
    upsert?: ResponseTrackerUpsertWithWhereUniqueWithoutProofInput | ResponseTrackerUpsertWithWhereUniqueWithoutProofInput[]
    createMany?: ResponseTrackerCreateManyProofInputEnvelope
    set?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    disconnect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    delete?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    connect?: ResponseTrackerWhereUniqueInput | ResponseTrackerWhereUniqueInput[]
    update?: ResponseTrackerUpdateWithWhereUniqueWithoutProofInput | ResponseTrackerUpdateWithWhereUniqueWithoutProofInput[]
    updateMany?: ResponseTrackerUpdateManyWithWhereWithoutProofInput | ResponseTrackerUpdateManyWithWhereWithoutProofInput[]
    deleteMany?: ResponseTrackerScalarWhereInput | ResponseTrackerScalarWhereInput[]
  }

  export type StudentProblemSolutionUncheckedUpdateOneWithoutProofNestedInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutProofInput, StudentProblemSolutionUncheckedCreateWithoutProofInput>
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutProofInput
    upsert?: StudentProblemSolutionUpsertWithoutProofInput
    disconnect?: StudentProblemSolutionWhereInput | boolean
    delete?: StudentProblemSolutionWhereInput | boolean
    connect?: StudentProblemSolutionWhereUniqueInput
    update?: XOR<XOR<StudentProblemSolutionUpdateToOneWithWhereWithoutProofInput, StudentProblemSolutionUpdateWithoutProofInput>, StudentProblemSolutionUncheckedUpdateWithoutProofInput>
  }

  export type ProofLineCreaterefsInput = {
    set: string[]
  }

  export type ProofCreateNestedOneWithoutLinesInput = {
    create?: XOR<ProofCreateWithoutLinesInput, ProofUncheckedCreateWithoutLinesInput>
    connectOrCreate?: ProofCreateOrConnectWithoutLinesInput
    connect?: ProofWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProofLineUpdaterefsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProofUpdateOneRequiredWithoutLinesNestedInput = {
    create?: XOR<ProofCreateWithoutLinesInput, ProofUncheckedCreateWithoutLinesInput>
    connectOrCreate?: ProofCreateOrConnectWithoutLinesInput
    upsert?: ProofUpsertWithoutLinesInput
    connect?: ProofWhereUniqueInput
    update?: XOR<XOR<ProofUpdateToOneWithWhereWithoutLinesInput, ProofUpdateWithoutLinesInput>, ProofUncheckedUpdateWithoutLinesInput>
  }

  export type ProofCreateNestedOneWithoutProblemInput = {
    create?: XOR<ProofCreateWithoutProblemInput, ProofUncheckedCreateWithoutProblemInput>
    connectOrCreate?: ProofCreateOrConnectWithoutProblemInput
    connect?: ProofWhereUniqueInput
  }

  export type StudentProblemSolutionCreateNestedManyWithoutProblemInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutProblemInput, StudentProblemSolutionUncheckedCreateWithoutProblemInput> | StudentProblemSolutionCreateWithoutProblemInput[] | StudentProblemSolutionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutProblemInput | StudentProblemSolutionCreateOrConnectWithoutProblemInput[]
    createMany?: StudentProblemSolutionCreateManyProblemInputEnvelope
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
  }

  export type AssignmentCreateNestedManyWithoutProblemsInput = {
    create?: XOR<AssignmentCreateWithoutProblemsInput, AssignmentUncheckedCreateWithoutProblemsInput> | AssignmentCreateWithoutProblemsInput[] | AssignmentUncheckedCreateWithoutProblemsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutProblemsInput | AssignmentCreateOrConnectWithoutProblemsInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type StudentProblemSolutionUncheckedCreateNestedManyWithoutProblemInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutProblemInput, StudentProblemSolutionUncheckedCreateWithoutProblemInput> | StudentProblemSolutionCreateWithoutProblemInput[] | StudentProblemSolutionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutProblemInput | StudentProblemSolutionCreateOrConnectWithoutProblemInput[]
    createMany?: StudentProblemSolutionCreateManyProblemInputEnvelope
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutProblemsInput = {
    create?: XOR<AssignmentCreateWithoutProblemsInput, AssignmentUncheckedCreateWithoutProblemsInput> | AssignmentCreateWithoutProblemsInput[] | AssignmentUncheckedCreateWithoutProblemsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutProblemsInput | AssignmentCreateOrConnectWithoutProblemsInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type ProofUpdateOneRequiredWithoutProblemNestedInput = {
    create?: XOR<ProofCreateWithoutProblemInput, ProofUncheckedCreateWithoutProblemInput>
    connectOrCreate?: ProofCreateOrConnectWithoutProblemInput
    upsert?: ProofUpsertWithoutProblemInput
    connect?: ProofWhereUniqueInput
    update?: XOR<XOR<ProofUpdateToOneWithWhereWithoutProblemInput, ProofUpdateWithoutProblemInput>, ProofUncheckedUpdateWithoutProblemInput>
  }

  export type StudentProblemSolutionUpdateManyWithoutProblemNestedInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutProblemInput, StudentProblemSolutionUncheckedCreateWithoutProblemInput> | StudentProblemSolutionCreateWithoutProblemInput[] | StudentProblemSolutionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutProblemInput | StudentProblemSolutionCreateOrConnectWithoutProblemInput[]
    upsert?: StudentProblemSolutionUpsertWithWhereUniqueWithoutProblemInput | StudentProblemSolutionUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: StudentProblemSolutionCreateManyProblemInputEnvelope
    set?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    disconnect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    delete?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    update?: StudentProblemSolutionUpdateWithWhereUniqueWithoutProblemInput | StudentProblemSolutionUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: StudentProblemSolutionUpdateManyWithWhereWithoutProblemInput | StudentProblemSolutionUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: StudentProblemSolutionScalarWhereInput | StudentProblemSolutionScalarWhereInput[]
  }

  export type AssignmentUpdateManyWithoutProblemsNestedInput = {
    create?: XOR<AssignmentCreateWithoutProblemsInput, AssignmentUncheckedCreateWithoutProblemsInput> | AssignmentCreateWithoutProblemsInput[] | AssignmentUncheckedCreateWithoutProblemsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutProblemsInput | AssignmentCreateOrConnectWithoutProblemsInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutProblemsInput | AssignmentUpsertWithWhereUniqueWithoutProblemsInput[]
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutProblemsInput | AssignmentUpdateWithWhereUniqueWithoutProblemsInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutProblemsInput | AssignmentUpdateManyWithWhereWithoutProblemsInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type StudentProblemSolutionUncheckedUpdateManyWithoutProblemNestedInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutProblemInput, StudentProblemSolutionUncheckedCreateWithoutProblemInput> | StudentProblemSolutionCreateWithoutProblemInput[] | StudentProblemSolutionUncheckedCreateWithoutProblemInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutProblemInput | StudentProblemSolutionCreateOrConnectWithoutProblemInput[]
    upsert?: StudentProblemSolutionUpsertWithWhereUniqueWithoutProblemInput | StudentProblemSolutionUpsertWithWhereUniqueWithoutProblemInput[]
    createMany?: StudentProblemSolutionCreateManyProblemInputEnvelope
    set?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    disconnect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    delete?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    update?: StudentProblemSolutionUpdateWithWhereUniqueWithoutProblemInput | StudentProblemSolutionUpdateWithWhereUniqueWithoutProblemInput[]
    updateMany?: StudentProblemSolutionUpdateManyWithWhereWithoutProblemInput | StudentProblemSolutionUpdateManyWithWhereWithoutProblemInput[]
    deleteMany?: StudentProblemSolutionScalarWhereInput | StudentProblemSolutionScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutProblemsNestedInput = {
    create?: XOR<AssignmentCreateWithoutProblemsInput, AssignmentUncheckedCreateWithoutProblemsInput> | AssignmentCreateWithoutProblemsInput[] | AssignmentUncheckedCreateWithoutProblemsInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutProblemsInput | AssignmentCreateOrConnectWithoutProblemsInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutProblemsInput | AssignmentUpsertWithWhereUniqueWithoutProblemsInput[]
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutProblemsInput | AssignmentUpdateWithWhereUniqueWithoutProblemsInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutProblemsInput | AssignmentUpdateManyWithWhereWithoutProblemsInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type AssignmentCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type InstructorCreateNestedOneWithoutCoursesInput = {
    create?: XOR<InstructorCreateWithoutCoursesInput, InstructorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutCoursesInput
    connect?: InstructorWhereUniqueInput
  }

  export type StudentCreateNestedManyWithoutCoursesInput = {
    create?: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput> | StudentCreateWithoutCoursesInput[] | StudentUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCoursesInput | StudentCreateOrConnectWithoutCoursesInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type AssignmentUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutCoursesInput = {
    create?: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput> | StudentCreateWithoutCoursesInput[] | StudentUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCoursesInput | StudentCreateOrConnectWithoutCoursesInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type AssignmentUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCourseInput | AssignmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCourseInput | AssignmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCourseInput | AssignmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type InstructorUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<InstructorCreateWithoutCoursesInput, InstructorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutCoursesInput
    upsert?: InstructorUpsertWithoutCoursesInput
    connect?: InstructorWhereUniqueInput
    update?: XOR<XOR<InstructorUpdateToOneWithWhereWithoutCoursesInput, InstructorUpdateWithoutCoursesInput>, InstructorUncheckedUpdateWithoutCoursesInput>
  }

  export type StudentUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput> | StudentCreateWithoutCoursesInput[] | StudentUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCoursesInput | StudentCreateOrConnectWithoutCoursesInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutCoursesInput | StudentUpsertWithWhereUniqueWithoutCoursesInput[]
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutCoursesInput | StudentUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutCoursesInput | StudentUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type AssignmentUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput> | AssignmentCreateWithoutCourseInput[] | AssignmentUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: AssignmentCreateOrConnectWithoutCourseInput | AssignmentCreateOrConnectWithoutCourseInput[]
    upsert?: AssignmentUpsertWithWhereUniqueWithoutCourseInput | AssignmentUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: AssignmentCreateManyCourseInputEnvelope
    set?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    disconnect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    delete?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    connect?: AssignmentWhereUniqueInput | AssignmentWhereUniqueInput[]
    update?: AssignmentUpdateWithWhereUniqueWithoutCourseInput | AssignmentUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: AssignmentUpdateManyWithWhereWithoutCourseInput | AssignmentUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutCoursesNestedInput = {
    create?: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput> | StudentCreateWithoutCoursesInput[] | StudentUncheckedCreateWithoutCoursesInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutCoursesInput | StudentCreateOrConnectWithoutCoursesInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutCoursesInput | StudentUpsertWithWhereUniqueWithoutCoursesInput[]
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutCoursesInput | StudentUpdateWithWhereUniqueWithoutCoursesInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutCoursesInput | StudentUpdateManyWithWhereWithoutCoursesInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssignmentsInput
    connect?: CourseWhereUniqueInput
  }

  export type InstructorCreateNestedOneWithoutAssignmentsInput = {
    create?: XOR<InstructorCreateWithoutAssignmentsInput, InstructorUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutAssignmentsInput
    connect?: InstructorWhereUniqueInput
  }

  export type AssignmentDelayCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<AssignmentDelayCreateWithoutAssignmentInput, AssignmentDelayUncheckedCreateWithoutAssignmentInput> | AssignmentDelayCreateWithoutAssignmentInput[] | AssignmentDelayUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentDelayCreateOrConnectWithoutAssignmentInput | AssignmentDelayCreateOrConnectWithoutAssignmentInput[]
    createMany?: AssignmentDelayCreateManyAssignmentInputEnvelope
    connect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
  }

  export type StudentProblemSolutionCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutAssignmentInput, StudentProblemSolutionUncheckedCreateWithoutAssignmentInput> | StudentProblemSolutionCreateWithoutAssignmentInput[] | StudentProblemSolutionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutAssignmentInput | StudentProblemSolutionCreateOrConnectWithoutAssignmentInput[]
    createMany?: StudentProblemSolutionCreateManyAssignmentInputEnvelope
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
  }

  export type ProblemCreateNestedManyWithoutAssignmentsInput = {
    create?: XOR<ProblemCreateWithoutAssignmentsInput, ProblemUncheckedCreateWithoutAssignmentsInput> | ProblemCreateWithoutAssignmentsInput[] | ProblemUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutAssignmentsInput | ProblemCreateOrConnectWithoutAssignmentsInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
  }

  export type AssignmentDelayUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<AssignmentDelayCreateWithoutAssignmentInput, AssignmentDelayUncheckedCreateWithoutAssignmentInput> | AssignmentDelayCreateWithoutAssignmentInput[] | AssignmentDelayUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentDelayCreateOrConnectWithoutAssignmentInput | AssignmentDelayCreateOrConnectWithoutAssignmentInput[]
    createMany?: AssignmentDelayCreateManyAssignmentInputEnvelope
    connect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
  }

  export type StudentProblemSolutionUncheckedCreateNestedManyWithoutAssignmentInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutAssignmentInput, StudentProblemSolutionUncheckedCreateWithoutAssignmentInput> | StudentProblemSolutionCreateWithoutAssignmentInput[] | StudentProblemSolutionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutAssignmentInput | StudentProblemSolutionCreateOrConnectWithoutAssignmentInput[]
    createMany?: StudentProblemSolutionCreateManyAssignmentInputEnvelope
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
  }

  export type ProblemUncheckedCreateNestedManyWithoutAssignmentsInput = {
    create?: XOR<ProblemCreateWithoutAssignmentsInput, ProblemUncheckedCreateWithoutAssignmentsInput> | ProblemCreateWithoutAssignmentsInput[] | ProblemUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutAssignmentsInput | ProblemCreateOrConnectWithoutAssignmentsInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
  }

  export type CourseUpdateOneRequiredWithoutAssignmentsNestedInput = {
    create?: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutAssignmentsInput
    upsert?: CourseUpsertWithoutAssignmentsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutAssignmentsInput, CourseUpdateWithoutAssignmentsInput>, CourseUncheckedUpdateWithoutAssignmentsInput>
  }

  export type InstructorUpdateOneWithoutAssignmentsNestedInput = {
    create?: XOR<InstructorCreateWithoutAssignmentsInput, InstructorUncheckedCreateWithoutAssignmentsInput>
    connectOrCreate?: InstructorCreateOrConnectWithoutAssignmentsInput
    upsert?: InstructorUpsertWithoutAssignmentsInput
    disconnect?: InstructorWhereInput | boolean
    delete?: InstructorWhereInput | boolean
    connect?: InstructorWhereUniqueInput
    update?: XOR<XOR<InstructorUpdateToOneWithWhereWithoutAssignmentsInput, InstructorUpdateWithoutAssignmentsInput>, InstructorUncheckedUpdateWithoutAssignmentsInput>
  }

  export type AssignmentDelayUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<AssignmentDelayCreateWithoutAssignmentInput, AssignmentDelayUncheckedCreateWithoutAssignmentInput> | AssignmentDelayCreateWithoutAssignmentInput[] | AssignmentDelayUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentDelayCreateOrConnectWithoutAssignmentInput | AssignmentDelayCreateOrConnectWithoutAssignmentInput[]
    upsert?: AssignmentDelayUpsertWithWhereUniqueWithoutAssignmentInput | AssignmentDelayUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: AssignmentDelayCreateManyAssignmentInputEnvelope
    set?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    disconnect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    delete?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    connect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    update?: AssignmentDelayUpdateWithWhereUniqueWithoutAssignmentInput | AssignmentDelayUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: AssignmentDelayUpdateManyWithWhereWithoutAssignmentInput | AssignmentDelayUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: AssignmentDelayScalarWhereInput | AssignmentDelayScalarWhereInput[]
  }

  export type StudentProblemSolutionUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutAssignmentInput, StudentProblemSolutionUncheckedCreateWithoutAssignmentInput> | StudentProblemSolutionCreateWithoutAssignmentInput[] | StudentProblemSolutionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutAssignmentInput | StudentProblemSolutionCreateOrConnectWithoutAssignmentInput[]
    upsert?: StudentProblemSolutionUpsertWithWhereUniqueWithoutAssignmentInput | StudentProblemSolutionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: StudentProblemSolutionCreateManyAssignmentInputEnvelope
    set?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    disconnect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    delete?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    update?: StudentProblemSolutionUpdateWithWhereUniqueWithoutAssignmentInput | StudentProblemSolutionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: StudentProblemSolutionUpdateManyWithWhereWithoutAssignmentInput | StudentProblemSolutionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: StudentProblemSolutionScalarWhereInput | StudentProblemSolutionScalarWhereInput[]
  }

  export type ProblemUpdateManyWithoutAssignmentsNestedInput = {
    create?: XOR<ProblemCreateWithoutAssignmentsInput, ProblemUncheckedCreateWithoutAssignmentsInput> | ProblemCreateWithoutAssignmentsInput[] | ProblemUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutAssignmentsInput | ProblemCreateOrConnectWithoutAssignmentsInput[]
    upsert?: ProblemUpsertWithWhereUniqueWithoutAssignmentsInput | ProblemUpsertWithWhereUniqueWithoutAssignmentsInput[]
    set?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    disconnect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    delete?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    update?: ProblemUpdateWithWhereUniqueWithoutAssignmentsInput | ProblemUpdateWithWhereUniqueWithoutAssignmentsInput[]
    updateMany?: ProblemUpdateManyWithWhereWithoutAssignmentsInput | ProblemUpdateManyWithWhereWithoutAssignmentsInput[]
    deleteMany?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
  }

  export type AssignmentDelayUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<AssignmentDelayCreateWithoutAssignmentInput, AssignmentDelayUncheckedCreateWithoutAssignmentInput> | AssignmentDelayCreateWithoutAssignmentInput[] | AssignmentDelayUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: AssignmentDelayCreateOrConnectWithoutAssignmentInput | AssignmentDelayCreateOrConnectWithoutAssignmentInput[]
    upsert?: AssignmentDelayUpsertWithWhereUniqueWithoutAssignmentInput | AssignmentDelayUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: AssignmentDelayCreateManyAssignmentInputEnvelope
    set?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    disconnect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    delete?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    connect?: AssignmentDelayWhereUniqueInput | AssignmentDelayWhereUniqueInput[]
    update?: AssignmentDelayUpdateWithWhereUniqueWithoutAssignmentInput | AssignmentDelayUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: AssignmentDelayUpdateManyWithWhereWithoutAssignmentInput | AssignmentDelayUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: AssignmentDelayScalarWhereInput | AssignmentDelayScalarWhereInput[]
  }

  export type StudentProblemSolutionUncheckedUpdateManyWithoutAssignmentNestedInput = {
    create?: XOR<StudentProblemSolutionCreateWithoutAssignmentInput, StudentProblemSolutionUncheckedCreateWithoutAssignmentInput> | StudentProblemSolutionCreateWithoutAssignmentInput[] | StudentProblemSolutionUncheckedCreateWithoutAssignmentInput[]
    connectOrCreate?: StudentProblemSolutionCreateOrConnectWithoutAssignmentInput | StudentProblemSolutionCreateOrConnectWithoutAssignmentInput[]
    upsert?: StudentProblemSolutionUpsertWithWhereUniqueWithoutAssignmentInput | StudentProblemSolutionUpsertWithWhereUniqueWithoutAssignmentInput[]
    createMany?: StudentProblemSolutionCreateManyAssignmentInputEnvelope
    set?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    disconnect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    delete?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    connect?: StudentProblemSolutionWhereUniqueInput | StudentProblemSolutionWhereUniqueInput[]
    update?: StudentProblemSolutionUpdateWithWhereUniqueWithoutAssignmentInput | StudentProblemSolutionUpdateWithWhereUniqueWithoutAssignmentInput[]
    updateMany?: StudentProblemSolutionUpdateManyWithWhereWithoutAssignmentInput | StudentProblemSolutionUpdateManyWithWhereWithoutAssignmentInput[]
    deleteMany?: StudentProblemSolutionScalarWhereInput | StudentProblemSolutionScalarWhereInput[]
  }

  export type ProblemUncheckedUpdateManyWithoutAssignmentsNestedInput = {
    create?: XOR<ProblemCreateWithoutAssignmentsInput, ProblemUncheckedCreateWithoutAssignmentsInput> | ProblemCreateWithoutAssignmentsInput[] | ProblemUncheckedCreateWithoutAssignmentsInput[]
    connectOrCreate?: ProblemCreateOrConnectWithoutAssignmentsInput | ProblemCreateOrConnectWithoutAssignmentsInput[]
    upsert?: ProblemUpsertWithWhereUniqueWithoutAssignmentsInput | ProblemUpsertWithWhereUniqueWithoutAssignmentsInput[]
    set?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    disconnect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    delete?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    connect?: ProblemWhereUniqueInput | ProblemWhereUniqueInput[]
    update?: ProblemUpdateWithWhereUniqueWithoutAssignmentsInput | ProblemUpdateWithWhereUniqueWithoutAssignmentsInput[]
    updateMany?: ProblemUpdateManyWithWhereWithoutAssignmentsInput | ProblemUpdateManyWithWhereWithoutAssignmentsInput[]
    deleteMany?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
  }

  export type AssignmentCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<AssignmentCreateWithoutSolutionsInput, AssignmentUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSolutionsInput
    connect?: AssignmentWhereUniqueInput
  }

  export type ProblemCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<ProblemCreateWithoutSolutionsInput, ProblemUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutSolutionsInput
    connect?: ProblemWhereUniqueInput
  }

  export type ProofCreateNestedOneWithoutStudentSolutionInput = {
    create?: XOR<ProofCreateWithoutStudentSolutionInput, ProofUncheckedCreateWithoutStudentSolutionInput>
    connectOrCreate?: ProofCreateOrConnectWithoutStudentSolutionInput
    connect?: ProofWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutSolutionsInput = {
    create?: XOR<StudentCreateWithoutSolutionsInput, StudentUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSolutionsInput
    connect?: StudentWhereUniqueInput
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type AssignmentUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<AssignmentCreateWithoutSolutionsInput, AssignmentUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutSolutionsInput
    upsert?: AssignmentUpsertWithoutSolutionsInput
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutSolutionsInput, AssignmentUpdateWithoutSolutionsInput>, AssignmentUncheckedUpdateWithoutSolutionsInput>
  }

  export type ProblemUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<ProblemCreateWithoutSolutionsInput, ProblemUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: ProblemCreateOrConnectWithoutSolutionsInput
    upsert?: ProblemUpsertWithoutSolutionsInput
    connect?: ProblemWhereUniqueInput
    update?: XOR<XOR<ProblemUpdateToOneWithWhereWithoutSolutionsInput, ProblemUpdateWithoutSolutionsInput>, ProblemUncheckedUpdateWithoutSolutionsInput>
  }

  export type ProofUpdateOneRequiredWithoutStudentSolutionNestedInput = {
    create?: XOR<ProofCreateWithoutStudentSolutionInput, ProofUncheckedCreateWithoutStudentSolutionInput>
    connectOrCreate?: ProofCreateOrConnectWithoutStudentSolutionInput
    upsert?: ProofUpsertWithoutStudentSolutionInput
    connect?: ProofWhereUniqueInput
    update?: XOR<XOR<ProofUpdateToOneWithWhereWithoutStudentSolutionInput, ProofUpdateWithoutStudentSolutionInput>, ProofUncheckedUpdateWithoutStudentSolutionInput>
  }

  export type StudentUpdateOneRequiredWithoutSolutionsNestedInput = {
    create?: XOR<StudentCreateWithoutSolutionsInput, StudentUncheckedCreateWithoutSolutionsInput>
    connectOrCreate?: StudentCreateOrConnectWithoutSolutionsInput
    upsert?: StudentUpsertWithoutSolutionsInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutSolutionsInput, StudentUpdateWithoutSolutionsInput>, StudentUncheckedUpdateWithoutSolutionsInput>
  }

  export type ProofCreateNestedOneWithoutResponsesInput = {
    create?: XOR<ProofCreateWithoutResponsesInput, ProofUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: ProofCreateOrConnectWithoutResponsesInput
    connect?: ProofWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutResponsesInput = {
    create?: XOR<UserCreateWithoutResponsesInput, UserUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutResponsesInput
    connect?: UserWhereUniqueInput
  }

  export type ProofUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<ProofCreateWithoutResponsesInput, ProofUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: ProofCreateOrConnectWithoutResponsesInput
    upsert?: ProofUpsertWithoutResponsesInput
    connect?: ProofWhereUniqueInput
    update?: XOR<XOR<ProofUpdateToOneWithWhereWithoutResponsesInput, ProofUpdateWithoutResponsesInput>, ProofUncheckedUpdateWithoutResponsesInput>
  }

  export type UserUpdateOneRequiredWithoutResponsesNestedInput = {
    create?: XOR<UserCreateWithoutResponsesInput, UserUncheckedCreateWithoutResponsesInput>
    connectOrCreate?: UserCreateOrConnectWithoutResponsesInput
    upsert?: UserUpsertWithoutResponsesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutResponsesInput, UserUpdateWithoutResponsesInput>, UserUncheckedUpdateWithoutResponsesInput>
  }

  export type AssignmentCreateNestedOneWithoutDelaysInput = {
    create?: XOR<AssignmentCreateWithoutDelaysInput, AssignmentUncheckedCreateWithoutDelaysInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutDelaysInput
    connect?: AssignmentWhereUniqueInput
  }

  export type StudentCreateNestedOneWithoutDelaysInput = {
    create?: XOR<StudentCreateWithoutDelaysInput, StudentUncheckedCreateWithoutDelaysInput>
    connectOrCreate?: StudentCreateOrConnectWithoutDelaysInput
    connect?: StudentWhereUniqueInput
  }

  export type AssignmentUpdateOneRequiredWithoutDelaysNestedInput = {
    create?: XOR<AssignmentCreateWithoutDelaysInput, AssignmentUncheckedCreateWithoutDelaysInput>
    connectOrCreate?: AssignmentCreateOrConnectWithoutDelaysInput
    upsert?: AssignmentUpsertWithoutDelaysInput
    connect?: AssignmentWhereUniqueInput
    update?: XOR<XOR<AssignmentUpdateToOneWithWhereWithoutDelaysInput, AssignmentUpdateWithoutDelaysInput>, AssignmentUncheckedUpdateWithoutDelaysInput>
  }

  export type StudentUpdateOneRequiredWithoutDelaysNestedInput = {
    create?: XOR<StudentCreateWithoutDelaysInput, StudentUncheckedCreateWithoutDelaysInput>
    connectOrCreate?: StudentCreateOrConnectWithoutDelaysInput
    upsert?: StudentUpsertWithoutDelaysInput
    connect?: StudentWhereUniqueInput
    update?: XOR<XOR<StudentUpdateToOneWithWhereWithoutDelaysInput, StudentUpdateWithoutDelaysInput>, StudentUncheckedUpdateWithoutDelaysInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type InstructorCreateWithoutUserInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    assignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    courses?: CourseCreateNestedManyWithoutInstructorInput
  }

  export type InstructorUncheckedCreateWithoutUserInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
    courses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
  }

  export type InstructorCreateOrConnectWithoutUserInput = {
    where: InstructorWhereUniqueInput
    create: XOR<InstructorCreateWithoutUserInput, InstructorUncheckedCreateWithoutUserInput>
  }

  export type ProofCreateWithoutCreatedByInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemCreateNestedOneWithoutProofInput
    lines?: ProofLineCreateNestedManyWithoutProofInput
    responses?: ResponseTrackerCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionCreateNestedOneWithoutProofInput
  }

  export type ProofUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemUncheckedCreateNestedOneWithoutProofInput
    lines?: ProofLineUncheckedCreateNestedManyWithoutProofInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionUncheckedCreateNestedOneWithoutProofInput
  }

  export type ProofCreateOrConnectWithoutCreatedByInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutCreatedByInput, ProofUncheckedCreateWithoutCreatedByInput>
  }

  export type ProofCreateManyCreatedByInputEnvelope = {
    data: ProofCreateManyCreatedByInput | ProofCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ResponseTrackerCreateWithoutUserInput = {
    id?: string
    responseType?: number | null
    responseMsg?: string
    proof: ProofCreateNestedOneWithoutResponsesInput
  }

  export type ResponseTrackerUncheckedCreateWithoutUserInput = {
    id?: string
    proofId: string
    responseType?: number | null
    responseMsg?: string
  }

  export type ResponseTrackerCreateOrConnectWithoutUserInput = {
    where: ResponseTrackerWhereUniqueInput
    create: XOR<ResponseTrackerCreateWithoutUserInput, ResponseTrackerUncheckedCreateWithoutUserInput>
  }

  export type ResponseTrackerCreateManyUserInputEnvelope = {
    data: ResponseTrackerCreateManyUserInput | ResponseTrackerCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutUserInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    delays?: AssignmentDelayCreateNestedManyWithoutStudentInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutStudentInput
    courses?: CourseCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutUserInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutStudentInput
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutStudentInput
    courses?: CourseUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentCreateOrConnectWithoutUserInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
  }

  export type InstructorUpsertWithoutUserInput = {
    update: XOR<InstructorUpdateWithoutUserInput, InstructorUncheckedUpdateWithoutUserInput>
    create: XOR<InstructorCreateWithoutUserInput, InstructorUncheckedCreateWithoutUserInput>
    where?: InstructorWhereInput
  }

  export type InstructorUpdateToOneWithWhereWithoutUserInput = {
    where?: InstructorWhereInput
    data: XOR<InstructorUpdateWithoutUserInput, InstructorUncheckedUpdateWithoutUserInput>
  }

  export type InstructorUpdateWithoutUserInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    courses?: CourseUpdateManyWithoutInstructorNestedInput
  }

  export type InstructorUncheckedUpdateWithoutUserInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
    courses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
  }

  export type ProofUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProofWhereUniqueInput
    update: XOR<ProofUpdateWithoutCreatedByInput, ProofUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProofCreateWithoutCreatedByInput, ProofUncheckedCreateWithoutCreatedByInput>
  }

  export type ProofUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProofWhereUniqueInput
    data: XOR<ProofUpdateWithoutCreatedByInput, ProofUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProofUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProofScalarWhereInput
    data: XOR<ProofUpdateManyMutationInput, ProofUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProofScalarWhereInput = {
    AND?: ProofScalarWhereInput | ProofScalarWhereInput[]
    OR?: ProofScalarWhereInput[]
    NOT?: ProofScalarWhereInput | ProofScalarWhereInput[]
    id?: StringFilter<"Proof"> | string
    name?: StringNullableFilter<"Proof"> | string | null
    rules?: StringFilter<"Proof"> | string
    premises?: StringNullableFilter<"Proof"> | string | null
    conclusion?: StringFilter<"Proof"> | string
    createdById?: StringFilter<"Proof"> | string
    complete?: BoolFilter<"Proof"> | boolean
    lemmasAllowed?: BoolFilter<"Proof"> | boolean
    disproofString?: StringNullableFilter<"Proof"> | string | null
    createdAt?: DateTimeFilter<"Proof"> | Date | string
    updatedAt?: DateTimeFilter<"Proof"> | Date | string
    isDeleted?: BoolFilter<"Proof"> | boolean
  }

  export type ResponseTrackerUpsertWithWhereUniqueWithoutUserInput = {
    where: ResponseTrackerWhereUniqueInput
    update: XOR<ResponseTrackerUpdateWithoutUserInput, ResponseTrackerUncheckedUpdateWithoutUserInput>
    create: XOR<ResponseTrackerCreateWithoutUserInput, ResponseTrackerUncheckedCreateWithoutUserInput>
  }

  export type ResponseTrackerUpdateWithWhereUniqueWithoutUserInput = {
    where: ResponseTrackerWhereUniqueInput
    data: XOR<ResponseTrackerUpdateWithoutUserInput, ResponseTrackerUncheckedUpdateWithoutUserInput>
  }

  export type ResponseTrackerUpdateManyWithWhereWithoutUserInput = {
    where: ResponseTrackerScalarWhereInput
    data: XOR<ResponseTrackerUpdateManyMutationInput, ResponseTrackerUncheckedUpdateManyWithoutUserInput>
  }

  export type ResponseTrackerScalarWhereInput = {
    AND?: ResponseTrackerScalarWhereInput | ResponseTrackerScalarWhereInput[]
    OR?: ResponseTrackerScalarWhereInput[]
    NOT?: ResponseTrackerScalarWhereInput | ResponseTrackerScalarWhereInput[]
    id?: StringFilter<"ResponseTracker"> | string
    proofId?: StringFilter<"ResponseTracker"> | string
    responseType?: IntNullableFilter<"ResponseTracker"> | number | null
    responseMsg?: StringFilter<"ResponseTracker"> | string
    userId?: StringFilter<"ResponseTracker"> | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type StudentUpsertWithoutUserInput = {
    update: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
    create: XOR<StudentCreateWithoutUserInput, StudentUncheckedCreateWithoutUserInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutUserInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutUserInput, StudentUncheckedUpdateWithoutUserInput>
  }

  export type StudentUpdateWithoutUserInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUpdateManyWithoutStudentNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutStudentNestedInput
    courses?: CourseUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutUserInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutStudentNestedInput
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutStudentNestedInput
    courses?: CourseUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type AssignmentDelayCreateWithoutStudentInput = {
    id?: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
    assignment: AssignmentCreateNestedOneWithoutDelaysInput
  }

  export type AssignmentDelayUncheckedCreateWithoutStudentInput = {
    id?: string
    assignmentId: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
  }

  export type AssignmentDelayCreateOrConnectWithoutStudentInput = {
    where: AssignmentDelayWhereUniqueInput
    create: XOR<AssignmentDelayCreateWithoutStudentInput, AssignmentDelayUncheckedCreateWithoutStudentInput>
  }

  export type AssignmentDelayCreateManyStudentInputEnvelope = {
    data: AssignmentDelayCreateManyStudentInput | AssignmentDelayCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutStudentInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    instructor?: InstructorCreateNestedOneWithoutUserInput
    proofs?: ProofCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutStudentInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    instructor?: InstructorUncheckedCreateNestedOneWithoutUserInput
    proofs?: ProofUncheckedCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
  }

  export type StudentProblemSolutionCreateWithoutStudentInput = {
    id?: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
    assignment: AssignmentCreateNestedOneWithoutSolutionsInput
    problem: ProblemCreateNestedOneWithoutSolutionsInput
    proof: ProofCreateNestedOneWithoutStudentSolutionInput
  }

  export type StudentProblemSolutionUncheckedCreateWithoutStudentInput = {
    id?: string
    assignmentId: string
    problemId: string
    proofId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionCreateOrConnectWithoutStudentInput = {
    where: StudentProblemSolutionWhereUniqueInput
    create: XOR<StudentProblemSolutionCreateWithoutStudentInput, StudentProblemSolutionUncheckedCreateWithoutStudentInput>
  }

  export type StudentProblemSolutionCreateManyStudentInputEnvelope = {
    data: StudentProblemSolutionCreateManyStudentInput | StudentProblemSolutionCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutStudentsInput = {
    id?: string
    title: string
    term: string
    section: number
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    instructor: InstructorCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutStudentsInput = {
    id?: string
    title: string
    term: string
    section: number
    instructorId: string
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutStudentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
  }

  export type AssignmentDelayUpsertWithWhereUniqueWithoutStudentInput = {
    where: AssignmentDelayWhereUniqueInput
    update: XOR<AssignmentDelayUpdateWithoutStudentInput, AssignmentDelayUncheckedUpdateWithoutStudentInput>
    create: XOR<AssignmentDelayCreateWithoutStudentInput, AssignmentDelayUncheckedCreateWithoutStudentInput>
  }

  export type AssignmentDelayUpdateWithWhereUniqueWithoutStudentInput = {
    where: AssignmentDelayWhereUniqueInput
    data: XOR<AssignmentDelayUpdateWithoutStudentInput, AssignmentDelayUncheckedUpdateWithoutStudentInput>
  }

  export type AssignmentDelayUpdateManyWithWhereWithoutStudentInput = {
    where: AssignmentDelayScalarWhereInput
    data: XOR<AssignmentDelayUpdateManyMutationInput, AssignmentDelayUncheckedUpdateManyWithoutStudentInput>
  }

  export type AssignmentDelayScalarWhereInput = {
    AND?: AssignmentDelayScalarWhereInput | AssignmentDelayScalarWhereInput[]
    OR?: AssignmentDelayScalarWhereInput[]
    NOT?: AssignmentDelayScalarWhereInput | AssignmentDelayScalarWhereInput[]
    id?: StringFilter<"AssignmentDelay"> | string
    assignmentId?: StringFilter<"AssignmentDelay"> | string
    studentId?: StringFilter<"AssignmentDelay"> | string
    dueDate?: DateTimeNullableFilter<"AssignmentDelay"> | Date | string | null
    submissionDate?: DateTimeNullableFilter<"AssignmentDelay"> | Date | string | null
    status?: StringFilter<"AssignmentDelay"> | string
  }

  export type UserUpsertWithoutStudentInput = {
    update: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
    create: XOR<UserCreateWithoutStudentInput, UserUncheckedCreateWithoutStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInput, UserUncheckedUpdateWithoutStudentInput>
  }

  export type UserUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    instructor?: InstructorUpdateOneWithoutUserNestedInput
    proofs?: ProofUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    instructor?: InstructorUncheckedUpdateOneWithoutUserNestedInput
    proofs?: ProofUncheckedUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type StudentProblemSolutionUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentProblemSolutionWhereUniqueInput
    update: XOR<StudentProblemSolutionUpdateWithoutStudentInput, StudentProblemSolutionUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentProblemSolutionCreateWithoutStudentInput, StudentProblemSolutionUncheckedCreateWithoutStudentInput>
  }

  export type StudentProblemSolutionUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentProblemSolutionWhereUniqueInput
    data: XOR<StudentProblemSolutionUpdateWithoutStudentInput, StudentProblemSolutionUncheckedUpdateWithoutStudentInput>
  }

  export type StudentProblemSolutionUpdateManyWithWhereWithoutStudentInput = {
    where: StudentProblemSolutionScalarWhereInput
    data: XOR<StudentProblemSolutionUpdateManyMutationInput, StudentProblemSolutionUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentProblemSolutionScalarWhereInput = {
    AND?: StudentProblemSolutionScalarWhereInput | StudentProblemSolutionScalarWhereInput[]
    OR?: StudentProblemSolutionScalarWhereInput[]
    NOT?: StudentProblemSolutionScalarWhereInput | StudentProblemSolutionScalarWhereInput[]
    id?: StringFilter<"StudentProblemSolution"> | string
    studentId?: StringFilter<"StudentProblemSolution"> | string
    assignmentId?: StringFilter<"StudentProblemSolution"> | string
    problemId?: StringFilter<"StudentProblemSolution"> | string
    proofId?: StringFilter<"StudentProblemSolution"> | string
    submittedOn?: DateTimeNullableFilter<"StudentProblemSolution"> | Date | string | null
    grade?: DecimalNullableFilter<"StudentProblemSolution"> | Decimal | DecimalJsLike | number | string | null
  }

  export type CourseUpsertWithWhereUniqueWithoutStudentsInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutStudentsInput, CourseUncheckedUpdateWithoutStudentsInput>
    create: XOR<CourseCreateWithoutStudentsInput, CourseUncheckedCreateWithoutStudentsInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutStudentsInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutStudentsInput, CourseUncheckedUpdateWithoutStudentsInput>
  }

  export type CourseUpdateManyWithWhereWithoutStudentsInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutStudentsInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: StringFilter<"Course"> | string
    title?: StringFilter<"Course"> | string
    term?: StringFilter<"Course"> | string
    section?: IntFilter<"Course"> | number
    instructorId?: StringFilter<"Course"> | string
  }

  export type AssignmentCreateWithoutCreatedByInput = {
    id?: string
    title?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    course: CourseCreateNestedOneWithoutAssignmentsInput
    delays?: AssignmentDelayCreateNestedManyWithoutAssignmentInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutAssignmentInput
    problems?: ProblemCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    courseId: string
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutAssignmentInput
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutAssignmentInput
    problems?: ProblemUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentCreateOrConnectWithoutCreatedByInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput>
  }

  export type AssignmentCreateManyCreatedByInputEnvelope = {
    data: AssignmentCreateManyCreatedByInput | AssignmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutInstructorInput = {
    id?: string
    title: string
    term: string
    section: number
    assignments?: AssignmentCreateNestedManyWithoutCourseInput
    students?: StudentCreateNestedManyWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutInstructorInput = {
    id?: string
    title: string
    term: string
    section: number
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCourseInput
    students?: StudentUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type CourseCreateOrConnectWithoutInstructorInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput>
  }

  export type CourseCreateManyInstructorInputEnvelope = {
    data: CourseCreateManyInstructorInput | CourseCreateManyInstructorInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutInstructorInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    proofs?: ProofCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutInstructorInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    proofs?: ProofUncheckedCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutInstructorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutInstructorInput, UserUncheckedCreateWithoutInstructorInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutCreatedByInput, AssignmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<AssignmentCreateWithoutCreatedByInput, AssignmentUncheckedCreateWithoutCreatedByInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutCreatedByInput, AssignmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type AssignmentScalarWhereInput = {
    AND?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    OR?: AssignmentScalarWhereInput[]
    NOT?: AssignmentScalarWhereInput | AssignmentScalarWhereInput[]
    id?: StringFilter<"Assignment"> | string
    title?: StringNullableFilter<"Assignment"> | string | null
    createdById?: StringNullableFilter<"Assignment"> | string | null
    createdOn?: DateTimeFilter<"Assignment"> | Date | string
    startDate?: DateTimeNullableFilter<"Assignment"> | Date | string | null
    dueBy?: DateTimeFilter<"Assignment"> | Date | string
    resubmissions?: IntNullableFilter<"Assignment"> | number | null
    courseId?: StringFilter<"Assignment"> | string
    isSubmitted?: BoolFilter<"Assignment"> | boolean
    isLateSubmitted?: BoolFilter<"Assignment"> | boolean
    isLateSubmittedDate?: DateTimeNullableFilter<"Assignment"> | Date | string | null
  }

  export type CourseUpsertWithWhereUniqueWithoutInstructorInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutInstructorInput, CourseUncheckedUpdateWithoutInstructorInput>
    create: XOR<CourseCreateWithoutInstructorInput, CourseUncheckedCreateWithoutInstructorInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutInstructorInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutInstructorInput, CourseUncheckedUpdateWithoutInstructorInput>
  }

  export type CourseUpdateManyWithWhereWithoutInstructorInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutInstructorInput>
  }

  export type UserUpsertWithoutInstructorInput = {
    update: XOR<UserUpdateWithoutInstructorInput, UserUncheckedUpdateWithoutInstructorInput>
    create: XOR<UserCreateWithoutInstructorInput, UserUncheckedCreateWithoutInstructorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutInstructorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutInstructorInput, UserUncheckedUpdateWithoutInstructorInput>
  }

  export type UserUpdateWithoutInstructorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    proofs?: ProofUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutInstructorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    proofs?: ProofUncheckedUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ProblemCreateWithoutProofInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    solutions?: StudentProblemSolutionCreateNestedManyWithoutProblemInput
    assignments?: AssignmentCreateNestedManyWithoutProblemsInput
  }

  export type ProblemUncheckedCreateWithoutProofInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutProblemInput
    assignments?: AssignmentUncheckedCreateNestedManyWithoutProblemsInput
  }

  export type ProblemCreateOrConnectWithoutProofInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutProofInput, ProblemUncheckedCreateWithoutProofInput>
  }

  export type UserCreateWithoutProofsInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    instructor?: InstructorCreateNestedOneWithoutUserInput
    responses?: ResponseTrackerCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProofsInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    instructor?: InstructorUncheckedCreateNestedOneWithoutUserInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProofsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProofsInput, UserUncheckedCreateWithoutProofsInput>
  }

  export type ProofLineCreateWithoutProofInput = {
    id?: string
    lineNo: string
    formula?: string | null
    rule?: string | null
    order?: number | null
    comment?: string | null
    response?: string | null
    depth?: number
    refs?: ProofLineCreaterefsInput | string[]
  }

  export type ProofLineUncheckedCreateWithoutProofInput = {
    id?: string
    lineNo: string
    formula?: string | null
    rule?: string | null
    order?: number | null
    comment?: string | null
    response?: string | null
    depth?: number
    refs?: ProofLineCreaterefsInput | string[]
  }

  export type ProofLineCreateOrConnectWithoutProofInput = {
    where: ProofLineWhereUniqueInput
    create: XOR<ProofLineCreateWithoutProofInput, ProofLineUncheckedCreateWithoutProofInput>
  }

  export type ProofLineCreateManyProofInputEnvelope = {
    data: ProofLineCreateManyProofInput | ProofLineCreateManyProofInput[]
    skipDuplicates?: boolean
  }

  export type ResponseTrackerCreateWithoutProofInput = {
    id?: string
    responseType?: number | null
    responseMsg?: string
    user: UserCreateNestedOneWithoutResponsesInput
  }

  export type ResponseTrackerUncheckedCreateWithoutProofInput = {
    id?: string
    responseType?: number | null
    responseMsg?: string
    userId: string
  }

  export type ResponseTrackerCreateOrConnectWithoutProofInput = {
    where: ResponseTrackerWhereUniqueInput
    create: XOR<ResponseTrackerCreateWithoutProofInput, ResponseTrackerUncheckedCreateWithoutProofInput>
  }

  export type ResponseTrackerCreateManyProofInputEnvelope = {
    data: ResponseTrackerCreateManyProofInput | ResponseTrackerCreateManyProofInput[]
    skipDuplicates?: boolean
  }

  export type StudentProblemSolutionCreateWithoutProofInput = {
    id?: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
    assignment: AssignmentCreateNestedOneWithoutSolutionsInput
    problem: ProblemCreateNestedOneWithoutSolutionsInput
    student: StudentCreateNestedOneWithoutSolutionsInput
  }

  export type StudentProblemSolutionUncheckedCreateWithoutProofInput = {
    id?: string
    studentId: string
    assignmentId: string
    problemId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionCreateOrConnectWithoutProofInput = {
    where: StudentProblemSolutionWhereUniqueInput
    create: XOR<StudentProblemSolutionCreateWithoutProofInput, StudentProblemSolutionUncheckedCreateWithoutProofInput>
  }

  export type ProblemUpsertWithoutProofInput = {
    update: XOR<ProblemUpdateWithoutProofInput, ProblemUncheckedUpdateWithoutProofInput>
    create: XOR<ProblemCreateWithoutProofInput, ProblemUncheckedCreateWithoutProofInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutProofInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutProofInput, ProblemUncheckedUpdateWithoutProofInput>
  }

  export type ProblemUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
    solutions?: StudentProblemSolutionUpdateManyWithoutProblemNestedInput
    assignments?: AssignmentUpdateManyWithoutProblemsNestedInput
  }

  export type ProblemUncheckedUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutProblemNestedInput
    assignments?: AssignmentUncheckedUpdateManyWithoutProblemsNestedInput
  }

  export type UserUpsertWithoutProofsInput = {
    update: XOR<UserUpdateWithoutProofsInput, UserUncheckedUpdateWithoutProofsInput>
    create: XOR<UserCreateWithoutProofsInput, UserUncheckedCreateWithoutProofsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProofsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProofsInput, UserUncheckedUpdateWithoutProofsInput>
  }

  export type UserUpdateWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    instructor?: InstructorUpdateOneWithoutUserNestedInput
    responses?: ResponseTrackerUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    instructor?: InstructorUncheckedUpdateOneWithoutUserNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type ProofLineUpsertWithWhereUniqueWithoutProofInput = {
    where: ProofLineWhereUniqueInput
    update: XOR<ProofLineUpdateWithoutProofInput, ProofLineUncheckedUpdateWithoutProofInput>
    create: XOR<ProofLineCreateWithoutProofInput, ProofLineUncheckedCreateWithoutProofInput>
  }

  export type ProofLineUpdateWithWhereUniqueWithoutProofInput = {
    where: ProofLineWhereUniqueInput
    data: XOR<ProofLineUpdateWithoutProofInput, ProofLineUncheckedUpdateWithoutProofInput>
  }

  export type ProofLineUpdateManyWithWhereWithoutProofInput = {
    where: ProofLineScalarWhereInput
    data: XOR<ProofLineUpdateManyMutationInput, ProofLineUncheckedUpdateManyWithoutProofInput>
  }

  export type ProofLineScalarWhereInput = {
    AND?: ProofLineScalarWhereInput | ProofLineScalarWhereInput[]
    OR?: ProofLineScalarWhereInput[]
    NOT?: ProofLineScalarWhereInput | ProofLineScalarWhereInput[]
    id?: StringFilter<"ProofLine"> | string
    proofId?: StringFilter<"ProofLine"> | string
    lineNo?: StringFilter<"ProofLine"> | string
    formula?: StringNullableFilter<"ProofLine"> | string | null
    rule?: StringNullableFilter<"ProofLine"> | string | null
    order?: IntNullableFilter<"ProofLine"> | number | null
    comment?: StringNullableFilter<"ProofLine"> | string | null
    response?: StringNullableFilter<"ProofLine"> | string | null
    depth?: IntFilter<"ProofLine"> | number
    refs?: StringNullableListFilter<"ProofLine">
  }

  export type ResponseTrackerUpsertWithWhereUniqueWithoutProofInput = {
    where: ResponseTrackerWhereUniqueInput
    update: XOR<ResponseTrackerUpdateWithoutProofInput, ResponseTrackerUncheckedUpdateWithoutProofInput>
    create: XOR<ResponseTrackerCreateWithoutProofInput, ResponseTrackerUncheckedCreateWithoutProofInput>
  }

  export type ResponseTrackerUpdateWithWhereUniqueWithoutProofInput = {
    where: ResponseTrackerWhereUniqueInput
    data: XOR<ResponseTrackerUpdateWithoutProofInput, ResponseTrackerUncheckedUpdateWithoutProofInput>
  }

  export type ResponseTrackerUpdateManyWithWhereWithoutProofInput = {
    where: ResponseTrackerScalarWhereInput
    data: XOR<ResponseTrackerUpdateManyMutationInput, ResponseTrackerUncheckedUpdateManyWithoutProofInput>
  }

  export type StudentProblemSolutionUpsertWithoutProofInput = {
    update: XOR<StudentProblemSolutionUpdateWithoutProofInput, StudentProblemSolutionUncheckedUpdateWithoutProofInput>
    create: XOR<StudentProblemSolutionCreateWithoutProofInput, StudentProblemSolutionUncheckedCreateWithoutProofInput>
    where?: StudentProblemSolutionWhereInput
  }

  export type StudentProblemSolutionUpdateToOneWithWhereWithoutProofInput = {
    where?: StudentProblemSolutionWhereInput
    data: XOR<StudentProblemSolutionUpdateWithoutProofInput, StudentProblemSolutionUncheckedUpdateWithoutProofInput>
  }

  export type StudentProblemSolutionUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignment?: AssignmentUpdateOneRequiredWithoutSolutionsNestedInput
    problem?: ProblemUpdateOneRequiredWithoutSolutionsNestedInput
    student?: StudentUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type StudentProblemSolutionUncheckedUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProofCreateWithoutLinesInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemCreateNestedOneWithoutProofInput
    createdBy: UserCreateNestedOneWithoutProofsInput
    responses?: ResponseTrackerCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionCreateNestedOneWithoutProofInput
  }

  export type ProofUncheckedCreateWithoutLinesInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    createdById: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemUncheckedCreateNestedOneWithoutProofInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionUncheckedCreateNestedOneWithoutProofInput
  }

  export type ProofCreateOrConnectWithoutLinesInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutLinesInput, ProofUncheckedCreateWithoutLinesInput>
  }

  export type ProofUpsertWithoutLinesInput = {
    update: XOR<ProofUpdateWithoutLinesInput, ProofUncheckedUpdateWithoutLinesInput>
    create: XOR<ProofCreateWithoutLinesInput, ProofUncheckedCreateWithoutLinesInput>
    where?: ProofWhereInput
  }

  export type ProofUpdateToOneWithWhereWithoutLinesInput = {
    where?: ProofWhereInput
    data: XOR<ProofUpdateWithoutLinesInput, ProofUncheckedUpdateWithoutLinesInput>
  }

  export type ProofUpdateWithoutLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUpdateOneWithoutProofNestedInput
    createdBy?: UserUpdateOneRequiredWithoutProofsNestedInput
    responses?: ResponseTrackerUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUpdateOneWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateWithoutLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUncheckedUpdateOneWithoutProofNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUncheckedUpdateOneWithoutProofNestedInput
  }

  export type ProofCreateWithoutProblemInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    createdBy: UserCreateNestedOneWithoutProofsInput
    lines?: ProofLineCreateNestedManyWithoutProofInput
    responses?: ResponseTrackerCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionCreateNestedOneWithoutProofInput
  }

  export type ProofUncheckedCreateWithoutProblemInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    createdById: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    lines?: ProofLineUncheckedCreateNestedManyWithoutProofInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionUncheckedCreateNestedOneWithoutProofInput
  }

  export type ProofCreateOrConnectWithoutProblemInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutProblemInput, ProofUncheckedCreateWithoutProblemInput>
  }

  export type StudentProblemSolutionCreateWithoutProblemInput = {
    id?: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
    assignment: AssignmentCreateNestedOneWithoutSolutionsInput
    proof: ProofCreateNestedOneWithoutStudentSolutionInput
    student: StudentCreateNestedOneWithoutSolutionsInput
  }

  export type StudentProblemSolutionUncheckedCreateWithoutProblemInput = {
    id?: string
    studentId: string
    assignmentId: string
    proofId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionCreateOrConnectWithoutProblemInput = {
    where: StudentProblemSolutionWhereUniqueInput
    create: XOR<StudentProblemSolutionCreateWithoutProblemInput, StudentProblemSolutionUncheckedCreateWithoutProblemInput>
  }

  export type StudentProblemSolutionCreateManyProblemInputEnvelope = {
    data: StudentProblemSolutionCreateManyProblemInput | StudentProblemSolutionCreateManyProblemInput[]
    skipDuplicates?: boolean
  }

  export type AssignmentCreateWithoutProblemsInput = {
    id?: string
    title?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    course: CourseCreateNestedOneWithoutAssignmentsInput
    createdBy?: InstructorCreateNestedOneWithoutAssignmentsInput
    delays?: AssignmentDelayCreateNestedManyWithoutAssignmentInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentUncheckedCreateWithoutProblemsInput = {
    id?: string
    title?: string | null
    createdById?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    courseId: string
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutAssignmentInput
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutAssignmentInput
  }

  export type AssignmentCreateOrConnectWithoutProblemsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutProblemsInput, AssignmentUncheckedCreateWithoutProblemsInput>
  }

  export type ProofUpsertWithoutProblemInput = {
    update: XOR<ProofUpdateWithoutProblemInput, ProofUncheckedUpdateWithoutProblemInput>
    create: XOR<ProofCreateWithoutProblemInput, ProofUncheckedCreateWithoutProblemInput>
    where?: ProofWhereInput
  }

  export type ProofUpdateToOneWithWhereWithoutProblemInput = {
    where?: ProofWhereInput
    data: XOR<ProofUpdateWithoutProblemInput, ProofUncheckedUpdateWithoutProblemInput>
  }

  export type ProofUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: UserUpdateOneRequiredWithoutProofsNestedInput
    lines?: ProofLineUpdateManyWithoutProofNestedInput
    responses?: ResponseTrackerUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUpdateOneWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    lines?: ProofLineUncheckedUpdateManyWithoutProofNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUncheckedUpdateOneWithoutProofNestedInput
  }

  export type StudentProblemSolutionUpsertWithWhereUniqueWithoutProblemInput = {
    where: StudentProblemSolutionWhereUniqueInput
    update: XOR<StudentProblemSolutionUpdateWithoutProblemInput, StudentProblemSolutionUncheckedUpdateWithoutProblemInput>
    create: XOR<StudentProblemSolutionCreateWithoutProblemInput, StudentProblemSolutionUncheckedCreateWithoutProblemInput>
  }

  export type StudentProblemSolutionUpdateWithWhereUniqueWithoutProblemInput = {
    where: StudentProblemSolutionWhereUniqueInput
    data: XOR<StudentProblemSolutionUpdateWithoutProblemInput, StudentProblemSolutionUncheckedUpdateWithoutProblemInput>
  }

  export type StudentProblemSolutionUpdateManyWithWhereWithoutProblemInput = {
    where: StudentProblemSolutionScalarWhereInput
    data: XOR<StudentProblemSolutionUpdateManyMutationInput, StudentProblemSolutionUncheckedUpdateManyWithoutProblemInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutProblemsInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutProblemsInput, AssignmentUncheckedUpdateWithoutProblemsInput>
    create: XOR<AssignmentCreateWithoutProblemsInput, AssignmentUncheckedCreateWithoutProblemsInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutProblemsInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutProblemsInput, AssignmentUncheckedUpdateWithoutProblemsInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutProblemsInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutProblemsInput>
  }

  export type AssignmentCreateWithoutCourseInput = {
    id?: string
    title?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    createdBy?: InstructorCreateNestedOneWithoutAssignmentsInput
    delays?: AssignmentDelayCreateNestedManyWithoutAssignmentInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutAssignmentInput
    problems?: ProblemCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutCourseInput = {
    id?: string
    title?: string | null
    createdById?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutAssignmentInput
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutAssignmentInput
    problems?: ProblemUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentCreateOrConnectWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput>
  }

  export type AssignmentCreateManyCourseInputEnvelope = {
    data: AssignmentCreateManyCourseInput | AssignmentCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type InstructorCreateWithoutCoursesInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    assignments?: AssignmentCreateNestedManyWithoutCreatedByInput
    user: UserCreateNestedOneWithoutInstructorInput
  }

  export type InstructorUncheckedCreateWithoutCoursesInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    assignments?: AssignmentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type InstructorCreateOrConnectWithoutCoursesInput = {
    where: InstructorWhereUniqueInput
    create: XOR<InstructorCreateWithoutCoursesInput, InstructorUncheckedCreateWithoutCoursesInput>
  }

  export type StudentCreateWithoutCoursesInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    delays?: AssignmentDelayCreateNestedManyWithoutStudentInput
    user: UserCreateNestedOneWithoutStudentInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutStudentInput
  }

  export type StudentUncheckedCreateWithoutCoursesInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutStudentInput
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentCreateOrConnectWithoutCoursesInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput>
  }

  export type AssignmentUpsertWithWhereUniqueWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    update: XOR<AssignmentUpdateWithoutCourseInput, AssignmentUncheckedUpdateWithoutCourseInput>
    create: XOR<AssignmentCreateWithoutCourseInput, AssignmentUncheckedCreateWithoutCourseInput>
  }

  export type AssignmentUpdateWithWhereUniqueWithoutCourseInput = {
    where: AssignmentWhereUniqueInput
    data: XOR<AssignmentUpdateWithoutCourseInput, AssignmentUncheckedUpdateWithoutCourseInput>
  }

  export type AssignmentUpdateManyWithWhereWithoutCourseInput = {
    where: AssignmentScalarWhereInput
    data: XOR<AssignmentUpdateManyMutationInput, AssignmentUncheckedUpdateManyWithoutCourseInput>
  }

  export type InstructorUpsertWithoutCoursesInput = {
    update: XOR<InstructorUpdateWithoutCoursesInput, InstructorUncheckedUpdateWithoutCoursesInput>
    create: XOR<InstructorCreateWithoutCoursesInput, InstructorUncheckedCreateWithoutCoursesInput>
    where?: InstructorWhereInput
  }

  export type InstructorUpdateToOneWithWhereWithoutCoursesInput = {
    where?: InstructorWhereInput
    data: XOR<InstructorUpdateWithoutCoursesInput, InstructorUncheckedUpdateWithoutCoursesInput>
  }

  export type InstructorUpdateWithoutCoursesInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: AssignmentUpdateManyWithoutCreatedByNestedInput
    user?: UserUpdateOneRequiredWithoutInstructorNestedInput
  }

  export type InstructorUncheckedUpdateWithoutCoursesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignments?: AssignmentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type StudentUpsertWithWhereUniqueWithoutCoursesInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutCoursesInput, StudentUncheckedUpdateWithoutCoursesInput>
    create: XOR<StudentCreateWithoutCoursesInput, StudentUncheckedCreateWithoutCoursesInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutCoursesInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutCoursesInput, StudentUncheckedUpdateWithoutCoursesInput>
  }

  export type StudentUpdateManyWithWhereWithoutCoursesInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutCoursesInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    userId?: StringFilter<"Student"> | string
    imageUrl?: StringNullableFilter<"Student"> | string | null
    mobile?: StringNullableFilter<"Student"> | string | null
    bio?: StringNullableFilter<"Student"> | string | null
    dob?: DateTimeNullableFilter<"Student"> | Date | string | null
  }

  export type CourseCreateWithoutAssignmentsInput = {
    id?: string
    title: string
    term: string
    section: number
    instructor: InstructorCreateNestedOneWithoutCoursesInput
    students?: StudentCreateNestedManyWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    title: string
    term: string
    section: number
    instructorId: string
    students?: StudentUncheckedCreateNestedManyWithoutCoursesInput
  }

  export type CourseCreateOrConnectWithoutAssignmentsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
  }

  export type InstructorCreateWithoutAssignmentsInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    courses?: CourseCreateNestedManyWithoutInstructorInput
    user: UserCreateNestedOneWithoutInstructorInput
  }

  export type InstructorUncheckedCreateWithoutAssignmentsInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    courses?: CourseUncheckedCreateNestedManyWithoutInstructorInput
  }

  export type InstructorCreateOrConnectWithoutAssignmentsInput = {
    where: InstructorWhereUniqueInput
    create: XOR<InstructorCreateWithoutAssignmentsInput, InstructorUncheckedCreateWithoutAssignmentsInput>
  }

  export type AssignmentDelayCreateWithoutAssignmentInput = {
    id?: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
    student: StudentCreateNestedOneWithoutDelaysInput
  }

  export type AssignmentDelayUncheckedCreateWithoutAssignmentInput = {
    id?: string
    studentId: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
  }

  export type AssignmentDelayCreateOrConnectWithoutAssignmentInput = {
    where: AssignmentDelayWhereUniqueInput
    create: XOR<AssignmentDelayCreateWithoutAssignmentInput, AssignmentDelayUncheckedCreateWithoutAssignmentInput>
  }

  export type AssignmentDelayCreateManyAssignmentInputEnvelope = {
    data: AssignmentDelayCreateManyAssignmentInput | AssignmentDelayCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type StudentProblemSolutionCreateWithoutAssignmentInput = {
    id?: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
    problem: ProblemCreateNestedOneWithoutSolutionsInput
    proof: ProofCreateNestedOneWithoutStudentSolutionInput
    student: StudentCreateNestedOneWithoutSolutionsInput
  }

  export type StudentProblemSolutionUncheckedCreateWithoutAssignmentInput = {
    id?: string
    studentId: string
    problemId: string
    proofId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionCreateOrConnectWithoutAssignmentInput = {
    where: StudentProblemSolutionWhereUniqueInput
    create: XOR<StudentProblemSolutionCreateWithoutAssignmentInput, StudentProblemSolutionUncheckedCreateWithoutAssignmentInput>
  }

  export type StudentProblemSolutionCreateManyAssignmentInputEnvelope = {
    data: StudentProblemSolutionCreateManyAssignmentInput | StudentProblemSolutionCreateManyAssignmentInput[]
    skipDuplicates?: boolean
  }

  export type ProblemCreateWithoutAssignmentsInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    proof: ProofCreateNestedOneWithoutProblemInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutProblemInput
  }

  export type ProblemUncheckedCreateWithoutAssignmentsInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    proofId: string
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutProblemInput
  }

  export type ProblemCreateOrConnectWithoutAssignmentsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutAssignmentsInput, ProblemUncheckedCreateWithoutAssignmentsInput>
  }

  export type CourseUpsertWithoutAssignmentsInput = {
    update: XOR<CourseUpdateWithoutAssignmentsInput, CourseUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<CourseCreateWithoutAssignmentsInput, CourseUncheckedCreateWithoutAssignmentsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutAssignmentsInput, CourseUncheckedUpdateWithoutAssignmentsInput>
  }

  export type CourseUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    instructor?: InstructorUpdateOneRequiredWithoutCoursesNestedInput
    students?: StudentUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    instructorId?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type InstructorUpsertWithoutAssignmentsInput = {
    update: XOR<InstructorUpdateWithoutAssignmentsInput, InstructorUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<InstructorCreateWithoutAssignmentsInput, InstructorUncheckedCreateWithoutAssignmentsInput>
    where?: InstructorWhereInput
  }

  export type InstructorUpdateToOneWithWhereWithoutAssignmentsInput = {
    where?: InstructorWhereInput
    data: XOR<InstructorUpdateWithoutAssignmentsInput, InstructorUncheckedUpdateWithoutAssignmentsInput>
  }

  export type InstructorUpdateWithoutAssignmentsInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: CourseUpdateManyWithoutInstructorNestedInput
    user?: UserUpdateOneRequiredWithoutInstructorNestedInput
  }

  export type InstructorUncheckedUpdateWithoutAssignmentsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    courses?: CourseUncheckedUpdateManyWithoutInstructorNestedInput
  }

  export type AssignmentDelayUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: AssignmentDelayWhereUniqueInput
    update: XOR<AssignmentDelayUpdateWithoutAssignmentInput, AssignmentDelayUncheckedUpdateWithoutAssignmentInput>
    create: XOR<AssignmentDelayCreateWithoutAssignmentInput, AssignmentDelayUncheckedCreateWithoutAssignmentInput>
  }

  export type AssignmentDelayUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: AssignmentDelayWhereUniqueInput
    data: XOR<AssignmentDelayUpdateWithoutAssignmentInput, AssignmentDelayUncheckedUpdateWithoutAssignmentInput>
  }

  export type AssignmentDelayUpdateManyWithWhereWithoutAssignmentInput = {
    where: AssignmentDelayScalarWhereInput
    data: XOR<AssignmentDelayUpdateManyMutationInput, AssignmentDelayUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type StudentProblemSolutionUpsertWithWhereUniqueWithoutAssignmentInput = {
    where: StudentProblemSolutionWhereUniqueInput
    update: XOR<StudentProblemSolutionUpdateWithoutAssignmentInput, StudentProblemSolutionUncheckedUpdateWithoutAssignmentInput>
    create: XOR<StudentProblemSolutionCreateWithoutAssignmentInput, StudentProblemSolutionUncheckedCreateWithoutAssignmentInput>
  }

  export type StudentProblemSolutionUpdateWithWhereUniqueWithoutAssignmentInput = {
    where: StudentProblemSolutionWhereUniqueInput
    data: XOR<StudentProblemSolutionUpdateWithoutAssignmentInput, StudentProblemSolutionUncheckedUpdateWithoutAssignmentInput>
  }

  export type StudentProblemSolutionUpdateManyWithWhereWithoutAssignmentInput = {
    where: StudentProblemSolutionScalarWhereInput
    data: XOR<StudentProblemSolutionUpdateManyMutationInput, StudentProblemSolutionUncheckedUpdateManyWithoutAssignmentInput>
  }

  export type ProblemUpsertWithWhereUniqueWithoutAssignmentsInput = {
    where: ProblemWhereUniqueInput
    update: XOR<ProblemUpdateWithoutAssignmentsInput, ProblemUncheckedUpdateWithoutAssignmentsInput>
    create: XOR<ProblemCreateWithoutAssignmentsInput, ProblemUncheckedCreateWithoutAssignmentsInput>
  }

  export type ProblemUpdateWithWhereUniqueWithoutAssignmentsInput = {
    where: ProblemWhereUniqueInput
    data: XOR<ProblemUpdateWithoutAssignmentsInput, ProblemUncheckedUpdateWithoutAssignmentsInput>
  }

  export type ProblemUpdateManyWithWhereWithoutAssignmentsInput = {
    where: ProblemScalarWhereInput
    data: XOR<ProblemUpdateManyMutationInput, ProblemUncheckedUpdateManyWithoutAssignmentsInput>
  }

  export type ProblemScalarWhereInput = {
    AND?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
    OR?: ProblemScalarWhereInput[]
    NOT?: ProblemScalarWhereInput | ProblemScalarWhereInput[]
    id?: StringFilter<"Problem"> | string
    question?: StringFilter<"Problem"> | string
    point?: DecimalFilter<"Problem"> | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFilter<"Problem"> | number
    lostPoints?: IntFilter<"Problem"> | number
    proofId?: StringFilter<"Problem"> | string
    lemmasAllowed?: BoolFilter<"Problem"> | boolean
    showTargetSteps?: BoolFilter<"Problem"> | boolean
  }

  export type AssignmentCreateWithoutSolutionsInput = {
    id?: string
    title?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    course: CourseCreateNestedOneWithoutAssignmentsInput
    createdBy?: InstructorCreateNestedOneWithoutAssignmentsInput
    delays?: AssignmentDelayCreateNestedManyWithoutAssignmentInput
    problems?: ProblemCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutSolutionsInput = {
    id?: string
    title?: string | null
    createdById?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    courseId: string
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutAssignmentInput
    problems?: ProblemUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentCreateOrConnectWithoutSolutionsInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutSolutionsInput, AssignmentUncheckedCreateWithoutSolutionsInput>
  }

  export type ProblemCreateWithoutSolutionsInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    proof: ProofCreateNestedOneWithoutProblemInput
    assignments?: AssignmentCreateNestedManyWithoutProblemsInput
  }

  export type ProblemUncheckedCreateWithoutSolutionsInput = {
    id?: string
    question?: string
    point: Decimal | DecimalJsLike | number | string
    targetSteps: number
    lostPoints: number
    proofId: string
    lemmasAllowed?: boolean
    showTargetSteps?: boolean
    assignments?: AssignmentUncheckedCreateNestedManyWithoutProblemsInput
  }

  export type ProblemCreateOrConnectWithoutSolutionsInput = {
    where: ProblemWhereUniqueInput
    create: XOR<ProblemCreateWithoutSolutionsInput, ProblemUncheckedCreateWithoutSolutionsInput>
  }

  export type ProofCreateWithoutStudentSolutionInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemCreateNestedOneWithoutProofInput
    createdBy: UserCreateNestedOneWithoutProofsInput
    lines?: ProofLineCreateNestedManyWithoutProofInput
    responses?: ResponseTrackerCreateNestedManyWithoutProofInput
  }

  export type ProofUncheckedCreateWithoutStudentSolutionInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    createdById: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemUncheckedCreateNestedOneWithoutProofInput
    lines?: ProofLineUncheckedCreateNestedManyWithoutProofInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutProofInput
  }

  export type ProofCreateOrConnectWithoutStudentSolutionInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutStudentSolutionInput, ProofUncheckedCreateWithoutStudentSolutionInput>
  }

  export type StudentCreateWithoutSolutionsInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    delays?: AssignmentDelayCreateNestedManyWithoutStudentInput
    user: UserCreateNestedOneWithoutStudentInput
    courses?: CourseCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutSolutionsInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    delays?: AssignmentDelayUncheckedCreateNestedManyWithoutStudentInput
    courses?: CourseUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentCreateOrConnectWithoutSolutionsInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutSolutionsInput, StudentUncheckedCreateWithoutSolutionsInput>
  }

  export type AssignmentUpsertWithoutSolutionsInput = {
    update: XOR<AssignmentUpdateWithoutSolutionsInput, AssignmentUncheckedUpdateWithoutSolutionsInput>
    create: XOR<AssignmentCreateWithoutSolutionsInput, AssignmentUncheckedCreateWithoutSolutionsInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutSolutionsInput, AssignmentUncheckedUpdateWithoutSolutionsInput>
  }

  export type AssignmentUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    createdBy?: InstructorUpdateOneWithoutAssignmentsNestedInput
    delays?: AssignmentDelayUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type ProblemUpsertWithoutSolutionsInput = {
    update: XOR<ProblemUpdateWithoutSolutionsInput, ProblemUncheckedUpdateWithoutSolutionsInput>
    create: XOR<ProblemCreateWithoutSolutionsInput, ProblemUncheckedCreateWithoutSolutionsInput>
    where?: ProblemWhereInput
  }

  export type ProblemUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: ProblemWhereInput
    data: XOR<ProblemUpdateWithoutSolutionsInput, ProblemUncheckedUpdateWithoutSolutionsInput>
  }

  export type ProblemUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
    proof?: ProofUpdateOneRequiredWithoutProblemNestedInput
    assignments?: AssignmentUpdateManyWithoutProblemsNestedInput
  }

  export type ProblemUncheckedUpdateWithoutSolutionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    proofId?: StringFieldUpdateOperationsInput | string
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
    assignments?: AssignmentUncheckedUpdateManyWithoutProblemsNestedInput
  }

  export type ProofUpsertWithoutStudentSolutionInput = {
    update: XOR<ProofUpdateWithoutStudentSolutionInput, ProofUncheckedUpdateWithoutStudentSolutionInput>
    create: XOR<ProofCreateWithoutStudentSolutionInput, ProofUncheckedCreateWithoutStudentSolutionInput>
    where?: ProofWhereInput
  }

  export type ProofUpdateToOneWithWhereWithoutStudentSolutionInput = {
    where?: ProofWhereInput
    data: XOR<ProofUpdateWithoutStudentSolutionInput, ProofUncheckedUpdateWithoutStudentSolutionInput>
  }

  export type ProofUpdateWithoutStudentSolutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUpdateOneWithoutProofNestedInput
    createdBy?: UserUpdateOneRequiredWithoutProofsNestedInput
    lines?: ProofLineUpdateManyWithoutProofNestedInput
    responses?: ResponseTrackerUpdateManyWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateWithoutStudentSolutionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUncheckedUpdateOneWithoutProofNestedInput
    lines?: ProofLineUncheckedUpdateManyWithoutProofNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutProofNestedInput
  }

  export type StudentUpsertWithoutSolutionsInput = {
    update: XOR<StudentUpdateWithoutSolutionsInput, StudentUncheckedUpdateWithoutSolutionsInput>
    create: XOR<StudentCreateWithoutSolutionsInput, StudentUncheckedCreateWithoutSolutionsInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutSolutionsInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutSolutionsInput, StudentUncheckedUpdateWithoutSolutionsInput>
  }

  export type StudentUpdateWithoutSolutionsInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUpdateManyWithoutStudentNestedInput
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    courses?: CourseUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutSolutionsInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutStudentNestedInput
    courses?: CourseUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type ProofCreateWithoutResponsesInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemCreateNestedOneWithoutProofInput
    createdBy: UserCreateNestedOneWithoutProofsInput
    lines?: ProofLineCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionCreateNestedOneWithoutProofInput
  }

  export type ProofUncheckedCreateWithoutResponsesInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    createdById: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    problem?: ProblemUncheckedCreateNestedOneWithoutProofInput
    lines?: ProofLineUncheckedCreateNestedManyWithoutProofInput
    studentSolution?: StudentProblemSolutionUncheckedCreateNestedOneWithoutProofInput
  }

  export type ProofCreateOrConnectWithoutResponsesInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutResponsesInput, ProofUncheckedCreateWithoutResponsesInput>
  }

  export type UserCreateWithoutResponsesInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    instructor?: InstructorCreateNestedOneWithoutUserInput
    proofs?: ProofCreateNestedManyWithoutCreatedByInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutResponsesInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    instructor?: InstructorUncheckedCreateNestedOneWithoutUserInput
    proofs?: ProofUncheckedCreateNestedManyWithoutCreatedByInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutResponsesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutResponsesInput, UserUncheckedCreateWithoutResponsesInput>
  }

  export type ProofUpsertWithoutResponsesInput = {
    update: XOR<ProofUpdateWithoutResponsesInput, ProofUncheckedUpdateWithoutResponsesInput>
    create: XOR<ProofCreateWithoutResponsesInput, ProofUncheckedCreateWithoutResponsesInput>
    where?: ProofWhereInput
  }

  export type ProofUpdateToOneWithWhereWithoutResponsesInput = {
    where?: ProofWhereInput
    data: XOR<ProofUpdateWithoutResponsesInput, ProofUncheckedUpdateWithoutResponsesInput>
  }

  export type ProofUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUpdateOneWithoutProofNestedInput
    createdBy?: UserUpdateOneRequiredWithoutProofsNestedInput
    lines?: ProofLineUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUpdateOneWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUncheckedUpdateOneWithoutProofNestedInput
    lines?: ProofLineUncheckedUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUncheckedUpdateOneWithoutProofNestedInput
  }

  export type UserUpsertWithoutResponsesInput = {
    update: XOR<UserUpdateWithoutResponsesInput, UserUncheckedUpdateWithoutResponsesInput>
    create: XOR<UserCreateWithoutResponsesInput, UserUncheckedCreateWithoutResponsesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutResponsesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutResponsesInput, UserUncheckedUpdateWithoutResponsesInput>
  }

  export type UserUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    instructor?: InstructorUpdateOneWithoutUserNestedInput
    proofs?: ProofUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutResponsesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    instructor?: InstructorUncheckedUpdateOneWithoutUserNestedInput
    proofs?: ProofUncheckedUpdateManyWithoutCreatedByNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AssignmentCreateWithoutDelaysInput = {
    id?: string
    title?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    course: CourseCreateNestedOneWithoutAssignmentsInput
    createdBy?: InstructorCreateNestedOneWithoutAssignmentsInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutAssignmentInput
    problems?: ProblemCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentUncheckedCreateWithoutDelaysInput = {
    id?: string
    title?: string | null
    createdById?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    courseId: string
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutAssignmentInput
    problems?: ProblemUncheckedCreateNestedManyWithoutAssignmentsInput
  }

  export type AssignmentCreateOrConnectWithoutDelaysInput = {
    where: AssignmentWhereUniqueInput
    create: XOR<AssignmentCreateWithoutDelaysInput, AssignmentUncheckedCreateWithoutDelaysInput>
  }

  export type StudentCreateWithoutDelaysInput = {
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    user: UserCreateNestedOneWithoutStudentInput
    solutions?: StudentProblemSolutionCreateNestedManyWithoutStudentInput
    courses?: CourseCreateNestedManyWithoutStudentsInput
  }

  export type StudentUncheckedCreateWithoutDelaysInput = {
    userId: string
    imageUrl?: string | null
    mobile?: string | null
    bio?: string | null
    dob?: Date | string | null
    solutions?: StudentProblemSolutionUncheckedCreateNestedManyWithoutStudentInput
    courses?: CourseUncheckedCreateNestedManyWithoutStudentsInput
  }

  export type StudentCreateOrConnectWithoutDelaysInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutDelaysInput, StudentUncheckedCreateWithoutDelaysInput>
  }

  export type AssignmentUpsertWithoutDelaysInput = {
    update: XOR<AssignmentUpdateWithoutDelaysInput, AssignmentUncheckedUpdateWithoutDelaysInput>
    create: XOR<AssignmentCreateWithoutDelaysInput, AssignmentUncheckedCreateWithoutDelaysInput>
    where?: AssignmentWhereInput
  }

  export type AssignmentUpdateToOneWithWhereWithoutDelaysInput = {
    where?: AssignmentWhereInput
    data: XOR<AssignmentUpdateWithoutDelaysInput, AssignmentUncheckedUpdateWithoutDelaysInput>
  }

  export type AssignmentUpdateWithoutDelaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    createdBy?: InstructorUpdateOneWithoutAssignmentsNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutDelaysInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type StudentUpsertWithoutDelaysInput = {
    update: XOR<StudentUpdateWithoutDelaysInput, StudentUncheckedUpdateWithoutDelaysInput>
    create: XOR<StudentCreateWithoutDelaysInput, StudentUncheckedCreateWithoutDelaysInput>
    where?: StudentWhereInput
  }

  export type StudentUpdateToOneWithWhereWithoutDelaysInput = {
    where?: StudentWhereInput
    data: XOR<StudentUpdateWithoutDelaysInput, StudentUncheckedUpdateWithoutDelaysInput>
  }

  export type StudentUpdateWithoutDelaysInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutStudentNestedInput
    courses?: CourseUpdateManyWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateWithoutDelaysInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutStudentNestedInput
    courses?: CourseUncheckedUpdateManyWithoutStudentsNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    instructor?: InstructorCreateNestedOneWithoutUserInput
    proofs?: ProofCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    instructor?: InstructorUncheckedCreateNestedOneWithoutUserInput
    proofs?: ProofUncheckedCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instructor?: InstructorUpdateOneWithoutUserNestedInput
    proofs?: ProofUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    instructor?: InstructorUncheckedUpdateOneWithoutUserNestedInput
    proofs?: ProofUncheckedUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    instructor?: InstructorCreateNestedOneWithoutUserInput
    proofs?: ProofCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerCreateNestedManyWithoutUserInput
    student?: StudentCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    email: string
    username: string
    hashedPassword: string
    isStudent?: boolean
    isInstructor?: boolean
    isAdmin?: boolean
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    instructor?: InstructorUncheckedCreateNestedOneWithoutUserInput
    proofs?: ProofUncheckedCreateNestedManyWithoutCreatedByInput
    responses?: ResponseTrackerUncheckedCreateNestedManyWithoutUserInput
    student?: StudentUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    instructor?: InstructorUpdateOneWithoutUserNestedInput
    proofs?: ProofUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUpdateManyWithoutUserNestedInput
    student?: StudentUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    hashedPassword?: StringFieldUpdateOperationsInput | string
    isStudent?: BoolFieldUpdateOperationsInput | boolean
    isInstructor?: BoolFieldUpdateOperationsInput | boolean
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    instructor?: InstructorUncheckedUpdateOneWithoutUserNestedInput
    proofs?: ProofUncheckedUpdateManyWithoutCreatedByNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutUserNestedInput
    student?: StudentUncheckedUpdateOneWithoutUserNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
  }

  export type ProofCreateManyCreatedByInput = {
    id?: string
    name?: string | null
    rules?: string
    premises?: string | null
    conclusion: string
    complete?: boolean
    lemmasAllowed?: boolean
    disproofString?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
  }

  export type ResponseTrackerCreateManyUserInput = {
    id?: string
    proofId: string
    responseType?: number | null
    responseMsg?: string
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProofUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUpdateOneWithoutProofNestedInput
    lines?: ProofLineUpdateManyWithoutProofNestedInput
    responses?: ResponseTrackerUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUpdateOneWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    problem?: ProblemUncheckedUpdateOneWithoutProofNestedInput
    lines?: ProofLineUncheckedUpdateManyWithoutProofNestedInput
    responses?: ResponseTrackerUncheckedUpdateManyWithoutProofNestedInput
    studentSolution?: StudentProblemSolutionUncheckedUpdateOneWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    rules?: StringFieldUpdateOperationsInput | string
    premises?: NullableStringFieldUpdateOperationsInput | string | null
    conclusion?: StringFieldUpdateOperationsInput | string
    complete?: BoolFieldUpdateOperationsInput | boolean
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    disproofString?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ResponseTrackerUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
    proof?: ProofUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type ResponseTrackerUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseTrackerUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AssignmentDelayCreateManyStudentInput = {
    id?: string
    assignmentId: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
  }

  export type StudentProblemSolutionCreateManyStudentInput = {
    id?: string
    assignmentId: string
    problemId: string
    proofId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type AssignmentDelayUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    assignment?: AssignmentUpdateOneRequiredWithoutDelaysNestedInput
  }

  export type AssignmentDelayUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentDelayUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type StudentProblemSolutionUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignment?: AssignmentUpdateOneRequiredWithoutSolutionsNestedInput
    problem?: ProblemUpdateOneRequiredWithoutSolutionsNestedInput
    proof?: ProofUpdateOneRequiredWithoutStudentSolutionNestedInput
  }

  export type StudentProblemSolutionUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type CourseUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    instructor?: InstructorUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    instructorId?: StringFieldUpdateOperationsInput | string
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutStudentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    instructorId?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentCreateManyCreatedByInput = {
    id?: string
    title?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    courseId: string
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
  }

  export type CourseCreateManyInstructorInput = {
    id?: string
    title: string
    term: string
    section: number
  }

  export type AssignmentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    delays?: AssignmentDelayUpdateManyWithoutAssignmentNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutAssignmentNestedInput
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CourseUpdateWithoutInstructorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    assignments?: AssignmentUpdateManyWithoutCourseNestedInput
    students?: StudentUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutInstructorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
    assignments?: AssignmentUncheckedUpdateManyWithoutCourseNestedInput
    students?: StudentUncheckedUpdateManyWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutInstructorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    term?: StringFieldUpdateOperationsInput | string
    section?: IntFieldUpdateOperationsInput | number
  }

  export type ProofLineCreateManyProofInput = {
    id?: string
    lineNo: string
    formula?: string | null
    rule?: string | null
    order?: number | null
    comment?: string | null
    response?: string | null
    depth?: number
    refs?: ProofLineCreaterefsInput | string[]
  }

  export type ResponseTrackerCreateManyProofInput = {
    id?: string
    responseType?: number | null
    responseMsg?: string
    userId: string
  }

  export type ProofLineUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNo?: StringFieldUpdateOperationsInput | string
    formula?: NullableStringFieldUpdateOperationsInput | string | null
    rule?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: IntFieldUpdateOperationsInput | number
    refs?: ProofLineUpdaterefsInput | string[]
  }

  export type ProofLineUncheckedUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNo?: StringFieldUpdateOperationsInput | string
    formula?: NullableStringFieldUpdateOperationsInput | string | null
    rule?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: IntFieldUpdateOperationsInput | number
    refs?: ProofLineUpdaterefsInput | string[]
  }

  export type ProofLineUncheckedUpdateManyWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    lineNo?: StringFieldUpdateOperationsInput | string
    formula?: NullableStringFieldUpdateOperationsInput | string | null
    rule?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableIntFieldUpdateOperationsInput | number | null
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    response?: NullableStringFieldUpdateOperationsInput | string | null
    depth?: IntFieldUpdateOperationsInput | number
    refs?: ProofLineUpdaterefsInput | string[]
  }

  export type ResponseTrackerUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutResponsesNestedInput
  }

  export type ResponseTrackerUncheckedUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ResponseTrackerUncheckedUpdateManyWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    responseType?: NullableIntFieldUpdateOperationsInput | number | null
    responseMsg?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StudentProblemSolutionCreateManyProblemInput = {
    id?: string
    studentId: string
    assignmentId: string
    proofId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    assignment?: AssignmentUpdateOneRequiredWithoutSolutionsNestedInput
    proof?: ProofUpdateOneRequiredWithoutStudentSolutionNestedInput
    student?: StudentUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type StudentProblemSolutionUncheckedUpdateWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionUncheckedUpdateManyWithoutProblemInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    assignmentId?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type AssignmentUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    course?: CourseUpdateOneRequiredWithoutAssignmentsNestedInput
    createdBy?: InstructorUpdateOneWithoutAssignmentsNestedInput
    delays?: AssignmentDelayUpdateManyWithoutAssignmentNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutAssignmentNestedInput
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutAssignmentNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutProblemsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    courseId?: StringFieldUpdateOperationsInput | string
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssignmentCreateManyCourseInput = {
    id?: string
    title?: string | null
    createdById?: string | null
    createdOn?: Date | string
    startDate?: Date | string | null
    dueBy: Date | string
    resubmissions?: number | null
    isSubmitted?: boolean
    isLateSubmitted?: boolean
    isLateSubmittedDate?: Date | string | null
  }

  export type AssignmentUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: InstructorUpdateOneWithoutAssignmentsNestedInput
    delays?: AssignmentDelayUpdateManyWithoutAssignmentNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutAssignmentNestedInput
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutAssignmentNestedInput
    problems?: ProblemUncheckedUpdateManyWithoutAssignmentsNestedInput
  }

  export type AssignmentUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueBy?: DateTimeFieldUpdateOperationsInput | Date | string
    resubmissions?: NullableIntFieldUpdateOperationsInput | number | null
    isSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmitted?: BoolFieldUpdateOperationsInput | boolean
    isLateSubmittedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StudentUpdateWithoutCoursesInput = {
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUpdateManyWithoutStudentNestedInput
    user?: UserUpdateOneRequiredWithoutStudentNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateWithoutCoursesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    delays?: AssignmentDelayUncheckedUpdateManyWithoutStudentNestedInput
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentUncheckedUpdateManyWithoutCoursesInput = {
    userId?: StringFieldUpdateOperationsInput | string
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    mobile?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    dob?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type AssignmentDelayCreateManyAssignmentInput = {
    id?: string
    studentId: string
    dueDate?: Date | string | null
    submissionDate?: Date | string | null
    status?: string
  }

  export type StudentProblemSolutionCreateManyAssignmentInput = {
    id?: string
    studentId: string
    problemId: string
    proofId: string
    submittedOn?: Date | string | null
    grade?: Decimal | DecimalJsLike | number | string | null
  }

  export type AssignmentDelayUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    student?: StudentUpdateOneRequiredWithoutDelaysNestedInput
  }

  export type AssignmentDelayUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type AssignmentDelayUncheckedUpdateManyWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    submissionDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type StudentProblemSolutionUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    problem?: ProblemUpdateOneRequiredWithoutSolutionsNestedInput
    proof?: ProofUpdateOneRequiredWithoutStudentSolutionNestedInput
    student?: StudentUpdateOneRequiredWithoutSolutionsNestedInput
  }

  export type StudentProblemSolutionUncheckedUpdateWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type StudentProblemSolutionUncheckedUpdateManyWithoutAssignmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    problemId?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    submittedOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    grade?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ProblemUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
    proof?: ProofUpdateOneRequiredWithoutProblemNestedInput
    solutions?: StudentProblemSolutionUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    proofId?: StringFieldUpdateOperationsInput | string
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
    solutions?: StudentProblemSolutionUncheckedUpdateManyWithoutProblemNestedInput
  }

  export type ProblemUncheckedUpdateManyWithoutAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    question?: StringFieldUpdateOperationsInput | string
    point?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    targetSteps?: IntFieldUpdateOperationsInput | number
    lostPoints?: IntFieldUpdateOperationsInput | number
    proofId?: StringFieldUpdateOperationsInput | string
    lemmasAllowed?: BoolFieldUpdateOperationsInput | boolean
    showTargetSteps?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}